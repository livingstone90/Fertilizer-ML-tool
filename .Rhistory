myplott(hosp_mortality)
myplott <- function(hosp_mortality) {
print(paste0("Plot for hospital: ",hosp_mortality$hosp_id))
p <- ggplot(hosp_mortality ,
aes(x = format(date_discharge,"%b"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hosp_mortality$hosp_id) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%b"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hosp_mortality$hosp_id) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality)
myplott(hosp_mortality, "Bungoma County Referral Hospital")
plot_list <- unique(hosp_mortality$hosp_id) %>%
purrr::set_names() %>%
purrr::map( ~ myplott(hosp_mortality, .x))
str(plot_list, max.level = 1)
purrr::walk(plot_list, print)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%b"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
plot_list <- unique(hosp_mortality$hosp_id) %>%
purrr::set_names() %>%
purrr::map( ~ myplott(hosp_mortality, .x))
str(plot_list, max.level = 1)
purrr::walk(plot_list, print)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
plot_list <- unique(hosp_mortality$hosp_id) %>%
purrr::set_names() %>%
purrr::map( ~ myplott(hosp_mortality, .x))
str(plot_list, max.level = 1)
purrr::walk(plot_list, print)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity") +
theme_classic() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity",fill="lightblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Percentage %") +
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
ylab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
plot_list <- unique(hosp_mortality$hosp_id) %>%
purrr::set_names() %>%
purrr::map( ~ myplott(hosp_mortality, .x))
str(plot_list, max.level = 1)
purrr::walk(plot_list, print)
#Create slide of plots
library(magrittr)
library(rvg)
library(officer)
#Create slide of plots
create_pptx <- function(plot, path){
if(!file.exists(path)) {
out <- read_pptx()
} else {
out <- read_pptx(path)
}
out %>%
add_slide(layout = "Title and Content", master = "Office Theme") %>%
ph_with(dml(code = print(plot)), location = ph_location_fullsize()) %>%
print(target = path)
}
map(plot_list, create_pptx, path = "C:\\Users\\lmumelo\\OneDrive - Kemri Wellcome Trust\\CIN_NEST\data\\Neonatal_mortality_cases_per_hospital.pptx")
map(plot_list, create_pptx, path = "C:\\Users\\lmumelo\\OneDrive - Kemri Wellcome Trust\\CIN_NEST\\data\\Neonatal_mortality_cases_per_hospital.pptx")
hosp_mortality <- neo_death %>%
group_by(hosp_id, weight.group,date_discharge) %>%
dplyr::summarise(mortality=n()) %>%
mutate(freq = round(mortality / sum(mortality), 3))
View(hosp_mortality)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
#l#ibrary(plyr)
hosp_mortality <- neo_death %>%
group_by(hosp_id, weight.group,date_discharge) %>%
dplyr::summarise(mortality=n()) %>%
mutate(freq = formattable::percent(mortality / sum(mortality)))
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = mortality,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
#l#ibrary(plyr)
hosp_mortality <- neo_death %>%
group_by(hosp_id, weight.group,date_discharge) %>%
dplyr::summarise(mortality=n()) %>%
mutate(freq = formattable::percent(mortality / sum(mortality)*100))
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
plot_list <- unique(hosp_mortality$hosp_id) %>%
purrr::set_names() %>%
purrr::map( ~ myplott(hosp_mortality, .x))
str(plot_list, max.level = 1)
purrr::walk(plot_list, print)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -0.2) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = 1.6) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 3) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2,hjust = 0.5) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2,angle = 45) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2,angle = 30) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2,angle = 30) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
myplott <- function(hosp_mortality,hospital) {
print(paste0("Plot for hospital: ",hospital))
p <- ggplot(hosp_mortality %>% filter(hosp_id == hospital),
aes(x = format(date_discharge,"%Y"), y = freq,
group = weight.group)) +
geom_bar( stat = "identity",fill="steelblue") +
theme_bw() +
facet_wrap(~weight.group) +
ylab("Mortality cases") +
xlab("year")+
ggtitle(hospital) +
theme(axis.text.x = element_text(size = 13, hjust = 1, angle = 45)) +
geom_text(aes(label = freq), vjust = -1.6 ,size = 2) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 20), legend.position = "top") +
theme(legend.title = element_blank())
return(p)
}
myplott(hosp_mortality, "Bungoma County Referral Hospital")
install.packages("jsonify")
install.packages("jsonify")
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(data.table)
library(RedcapData)
#database_values <- read.csv("database_values.csv", header = T)
api_url <- database_values$Value[database_values$Object ==Sys.getenv("cin_url")] #"URL"]
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("xfun")
remove.packages(xfun)
devtools::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
devtools::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
install.packages("cli")
devtools::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
devtools::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
install.packages("rlang")
devtools::install_github("rvlenth/emmeans", dependencies = TRUE, build_opts = "")
install.packages("bayesplot")
devtools::install_github("stan-dev/bayesplot", dependencies = TRUE, build_vignettes = FALSE)
install.packages(c("aplot", "BiocManager", "broom", "bslib", "cachem", "callr", "car", "colorspace", "conquer", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "dtplyr", "fansi", "fastmap", "flextable", "foghorn", "fontawesome", "forcats", "forestmangr", "Formula", "gargle", "gdtools", "gert", "ggforce", "ggfun", "ggplot2", "ggpmisc", "ggpp", "gh", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "janitor", "jsonlite", "knitr", "lintr", "lme4", "longitudinalData", "lubridate", "mapproj", "maptools", "markdown", "MatrixModels", "mice", "minqa", "modelr", "naniar", "nanotime", "odbc", "officer", "openxlsx", "packrat", "party", "pingr", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "purrr", "raster", "Rcpp", "RcppArmadillo", "RcppCCTZ", "RcppEigen", "RCurl", "readr", "readxl", "redcapAPI", "repr", "rgeos", "rgl", "roxygen2", "rsconnect", "RSQLite", "rsvg", "rtweet", "rvg", "s2", "sass", "sf", "shiny", "skimr", "sp", "stringi", "stringr", "svglite", "terra", "testthat", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeSeries", "tokenizers", "tseries", "units", "utf8", "V8", "vcd", "vdiffr", "visdat", "vroom", "webshot", "XML", "xts", "yaml"))
install.packages(c("aplot", "BiocManager", "broom", "bslib", "cachem", "callr", "car", "colorspace", "conquer", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "dtplyr", "fansi", "fastmap", "flextable", "foghorn", "fontawesome", "forcats", "forestmangr", "Formula", "gargle", "gdtools", "gert", "ggforce", "ggfun", "ggplot2", "ggpmisc", "ggpp", "gh", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "janitor", "jsonlite", "knitr", "lintr", "lme4", "longitudinalData", "lubridate", "mapproj", "maptools", "markdown", "MatrixModels", "mice", "minqa", "modelr", "naniar", "nanotime", "odbc", "officer", "openxlsx", "packrat", "party", "pingr", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "purrr", "raster", "Rcpp", "RcppArmadillo", "RcppCCTZ", "RcppEigen", "RCurl", "readr", "readxl", "redcapAPI", "repr", "rgeos", "rgl", "roxygen2", "rsconnect", "RSQLite", "rsvg", "rtweet", "rvg", "s2", "sass", "sf", "shiny", "skimr", "sp", "stringi", "stringr", "svglite", "terra", "testthat", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeSeries", "tokenizers", "tseries", "units", "utf8", "V8", "vcd", "vdiffr", "visdat", "vroom", "webshot", "XML", "xts", "yaml"))
install.packages(c("aplot", "BiocManager", "broom", "bslib", "cachem", "callr", "car", "colorspace", "conquer", "data.table", "dbplyr", "devtools", "digest", "dplyr", "DT", "dtplyr", "fansi", "fastmap", "flextable", "foghorn", "fontawesome", "forcats", "forestmangr", "Formula", "gargle", "gdtools", "gert", "ggforce", "ggfun", "ggplot2", "ggpmisc", "ggpp", "gh", "Hmisc", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "janitor", "jsonlite", "knitr", "lintr", "lme4", "longitudinalData", "lubridate", "mapproj", "maptools", "markdown", "MatrixModels", "mice", "minqa", "modelr", "naniar", "nanotime", "odbc", "officer", "openxlsx", "packrat", "party", "pingr", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "purrr", "raster", "Rcpp", "RcppArmadillo", "RcppCCTZ", "RcppEigen", "RCurl", "readr", "readxl", "redcapAPI", "repr", "rgeos", "rgl", "roxygen2", "rsconnect", "RSQLite", "rsvg", "rtweet", "rvg", "s2", "sass", "sf", "shiny", "skimr", "sp", "stringi", "stringr", "svglite", "terra", "testthat", "tidyr", "tidyselect", "tidytext", "tidyverse", "timeSeries", "tokenizers", "tseries", "units", "utf8", "V8", "vcd", "vdiffr", "visdat", "vroom", "webshot", "XML", "xts", "yaml"))
# Step 0: Load all required pacakges
library(xlsx)
library(dplyr)
install.packages("xlsx")
# Step 0: Load all required pacakges
library(xlsx)
library(dplyr)
# Step 0: Load all required pacakges
#library(xlsx)
library(dplyr)
library(reshape2)
library(stringr)
install.packages("reshape2")
library(reshape2)
library(stringr)
library(tidyverse)
library(broom)
library(ggplot2)
library(Rmisc)
library(tidylog)
library(emmeans)
library(multcomp)
library(multcompView)
library(randomForest)
setwd("D:/project/maize_yield_dashboard")
# Step 1: Set working directory
setwd('D:/project/maize_yield_dashboard/')
yldsx <-readxl::read_excel('~/Alliance/Job/Data/Baby_trials/SCALING_HARVEST_DATA_2017_JK.xlsx',sheetName  = 'Survey_2017_sila')
yldsx <-readxl::read_excel('~/Alliance/Job/Data/Baby_trials/SCALING_HARVEST_DATA_2017_JK.xlsx',sheet= 'Survey_2017_sila')
yldsx <-readxl::read_excel('SCALING_HARVEST_DATA_2017_JK.xlsx',sheet= 'Survey_2017_sila')
yldsx <-readxl::read_excel('SCALING_HARVEST_DATA_2017_JK.xlsx',sheet= 'Survey_2017_sila')
yldsx <-readxl::read_excel('D:/project/maize_yield_dashboard/SCALING_HARVEST_DATA_2017_JK.xlsx',sheet= 'Survey_2017_sila')
yldsx <-readxl::read_excel('D:/project/maize_yield_dashboard/SCALING_HARVEST_DATA_2017_JK.xlsx')
yldsx <-readxl::read_excel('D:\\project\\maize_yield_dashboard\\SCALING_HARVEST_DATA_2017_JK.xlsx',sheet= 'Survey_2017_sila')
getwd()
yldsx <-readxl::read_excel(paste0(getwd(),"/SCALING_HARVEST_DATA_2017_JK.xlsx"),sheet= 'Survey_2017_sila')
