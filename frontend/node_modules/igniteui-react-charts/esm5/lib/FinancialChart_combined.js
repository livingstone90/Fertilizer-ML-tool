/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __read, __spreadArray, __values } from "tslib";
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
var FinancialChart = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChart, _super);
    function FinancialChart() {
        var _this = _super.call(this) || this;
        _this.ad5 = null;
        _this.ag3 = null;
        _this.ag1 = null;
        _this.agy = null;
        _this.ag0 = null;
        _this.ag2 = null;
        _this.agz = null;
        _this.adb = null;
        _this.ahl = null;
        _this.ahm = null;
        _this.ahi = null;
        _this.ahn = null;
        _this.aho = null;
        _this.ahj = null;
        _this.ahk = null;
        _this.aet = null;
        _this.af3 = 40;
        _this.adz = null;
        _this.adx = null;
        _this.ad1 = null;
        _this.ad6 = null;
        _this.ahw = null;
        _this.aep = null;
        _this.aff = false;
        _this.afe = false;
        _this.afm = false;
        _this.ae1 = false;
        _this.ag9 = 10;
        _this.aga = NaN;
        _this.agc = NaN;
        _this.agb = NaN;
        _this.agd = 0;
        _this.adh = 0;
        _this.adk = 0;
        _this.af5 = 3;
        _this.af8 = NaN;
        _this.af6 = NaN;
        _this.af7 = NaN;
        _this.af9 = NaN;
        _this.adm = 0;
        _this.aew = true;
        _this.add = 0;
        _this.aex = false;
        _this.adr = null;
        _this.adt = null;
        _this.afo = null;
        _this.aez = true;
        _this.aey = false;
        _this.ae0 = false;
        _this.aeq = null;
        _this.ado = 1;
        _this.acf = null;
        _this.acg = null;
        _this.ach = null;
        _this.aci = null;
        _this.ack = null;
        _this.acj = null;
        _this.ace = null;
        _this.acd = null;
        _this.af4 = 1;
        _this.af2 = 1;
        _this.af1 = 2;
        _this.af0 = 1;
        _this.ad3 = null;
        _this.ag5 = -2147483648;
        _this.afz = 2;
        _this.ag8 = 3;
        _this.ag6 = 10;
        _this.ag4 = 30;
        _this.ag7 = 9;
        _this.ac8 = null;
        _this.ac9 = null;
        _this.ac4 = null;
        _this.applyCustomIndicators = null;
        _this.alq = null;
        _this.age = 1;
        _this.aev = false;
        _this.adv = null;
        _this.afw = dateMinValue();
        _this.afv = dateMaxValue();
        _this.aft = null;
        _this.q9();
        _this.aft = new ObservableCollection$1(Base.$, 0);
        if (_this.xAxisBreaks != null) {
            var a = _this.xAxisBreaks;
            a.collectionChanged = delegateCombine(a.collectionChanged, function (a, b) { return _this.alf(); });
        }
        _this.ak0();
        return _this;
    }
    FinancialChart.prototype.sf = function (a, b, c) {
        _super.prototype.sf.call(this, a, b, c);
        switch (a) {
            case "ToolbarTemplate":
            case "RangeSelectorTemplate":
                this.adc = new FinancialChartToolbar(this, this.aht);
                break;
            case "Toolbar":
                var d = b;
                if (d != null) {
                    d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.akn));
                    d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.akq));
                    d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.akr));
                    d.l(null);
                }
                if (this.adc != null) {
                    this.adc.ac = this.adj;
                    this.adc.ai = this.dj;
                    this.adc.y = this.ade;
                    this.adc.al = this.afc;
                    if (this.ag0 != null) {
                        this.adc.l(this.ag0);
                    }
                    var e = this.adc;
                    e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.akn));
                    ;
                    var f = this.adc;
                    f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.akq));
                    var g = this.adc;
                    g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.akr));
                }
                break;
            case "ChartType":
                if (this.adc != null) {
                    this.adc.y = this.ade;
                }
                break;
            case "VolumeType":
                if (this.adc != null) {
                    this.adc.ac = this.adj;
                }
                break;
            case "TrendLineType":
                if (this.adc != null) {
                    this.adc.ai = this.dj;
                }
                break;
            case "IsToolbarVisible":
                if (this.adc == null) {
                    break;
                }
                this.adc.al = this.afc;
                this.setGridRows();
                break;
        }
    };
    FinancialChart.prototype.akr = function (a, b) {
        this.adj = this.adc.ac;
    };
    FinancialChart.prototype.akq = function (a, b) {
        this.dj = this.adc.ai;
    };
    FinancialChart.prototype.akn = function (a, b) {
        this.ade = this.adc.y;
    };
    FinancialChart.prototype.ak0 = function () {
        this.ad5 = new IndicatorPane();
        this.adw = TypeRegistrar.create("FinancialLegend");
    };
    FinancialChart.prototype.provideGrid = function (a) {
        this.ag3 = a;
        this.all();
        this.setGridRows();
        if (this.adc != null) {
            this.adc.bg(a);
        }
    };
    FinancialChart.prototype.onDocumentClick = function (a) {
        if (this.adc != null) {
            this.adc.bl(a);
        }
    };
    FinancialChart.prototype.getContext = function () {
        var a = this.adc.v();
        var b = new FinancialChartContext();
        b.vm = new FinancialChartViewModel();
        b.vm.toolbar = a;
        b.container = this.ju;
        b.toolbarContainer = this.ag0;
        b.legendContainer = this.agz;
        b.indicatorsContainer = this.agy;
        b.volumeContainer = this.ag1;
        b.zoomContainer = this.ag2;
        return b;
    };
    FinancialChart.prototype.provideContainer = function (a) {
        var b = a;
        if (b != null) {
            var c = "financialChartMainGrid";
            var d = b.createElement("div");
            d.setStyleProperty("width", "100%");
            d.setStyleProperty("height", "100%");
            if (this.adc == null) {
                this.adc = new FinancialChartToolbar(this, this.aht);
            }
            this.adc.w.isIndicatorMenuVisible = this.ae3 && this.ae4;
            this.ag0 = b.getSubRenderer(d);
            this.adc.l(this.ag0);
            var e = b.createElement("div");
            e.setStyleProperty("width", "100%");
            e.setStyleProperty("height", "100%");
            var f = b.createElement("div");
            f.setStyleProperty("width", "100%");
            f.setStyleProperty("height", "100%");
            this.agz = b.getSubRenderer(f);
            var g = b.createElement("div");
            g.setStyleProperty("width", "100%");
            g.setStyleProperty("height", "100%");
            this.agy = b.getSubRenderer(g);
            var h = b.createElement("div");
            h.setStyleProperty("width", "100%");
            h.setStyleProperty("height", "100%");
            this.ag1 = b.getSubRenderer(h);
            var i = b.createElement("div");
            i.setStyleProperty("width", "100%");
            i.setStyleProperty("height", "100%");
            this.ag2 = b.getSubRenderer(i);
            a = b.getSubRenderer(e);
        }
        else {
            this.ag0 = null;
            if (this.adc != null) {
                this.adc.l(null);
            }
            if (this.aeu != null) {
                this.aeu.provideContainer(null);
                this.aeu = null;
            }
            if (this.adw != null) {
                this.adw.provideContainer(null);
            }
        }
        _super.prototype.provideContainer.call(this, a);
        if (b != null) {
            if (this.volumeChart != null) {
                this.volumeChart.provideContainer(this.ag1);
            }
            if (this.ad5 != null) {
                this.ad5.h(this.agy);
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.provideContainer(this.ag2);
                if (a != null) {
                    this.aj7();
                }
                else {
                    this.aeu = null;
                }
            }
            if (this.adw != null) {
                this.adw.provideContainer(this.agz);
            }
            this.setGridRows();
        }
    };
    FinancialChart.prototype.alb = function (a, b, c) {
        if (a != null) {
            a.provideContainer(null);
        }
        if (b != null) {
            b.provideContainer(c);
        }
        this.setGridRows();
    };
    FinancialChart.prototype.alp = function (a, b) {
        this.alb(a, b, this.ag2);
        if (b == null) {
            return;
        }
        this.aj7();
    };
    FinancialChart.prototype.aj7 = function () {
        var _this = this;
        if (this.ag2 == null) {
            return;
        }
        if (this.aeu != null) {
            this.aeu.provideContainer(null);
        }
        this.aeu = TypeRegistrar.create("ZoomSlider");
        this.aeu.provideContainer(this.ag2);
        var a = this.aeu;
        a.windowRectChanged = delegateCombine(a.windowRectChanged, function (a, b) {
            if (_this.dataChart != null) {
                _this.dataChart.tp = new Rect(0, _this.aeu.windowRect.left, _this.dataChart.s9.top, _this.aeu.windowRect.width, _this.dataChart.s9.height);
            }
        });
        this.aj8();
    };
    FinancialChart.prototype.aln = function (a, b) {
        this.alb(a, b, this.ag1);
    };
    FinancialChart.prototype.setGridRows = function () {
        if (this.ag3 == null) {
            return;
        }
        var a = new Array(6);
        a[0] = (this.afc ? this.agk : 0) + "px";
        a[1] = this.ae8 ? "min-content" : "0px";
        a[2] = "auto";
        a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
        a[4] = this.volumeChart == null ? "0px" : "100px";
        a[5] = this.zoomSliderChart == null ? "0px" : "100px";
        if (this.aeu != null) {
            if (a[5] == "0px") {
                this.aeu.hide();
            }
            else {
                this.aeu.show();
            }
        }
        this.ag3.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin.apply(void 0, __spreadArray([" "], __read(a), false)), "auto", "1fr"));
        this.ag3.setStyleProperty("grid-template-rows", stringJoin.apply(void 0, __spreadArray([" "], __read(a), false)));
        if (this.ju == null) {
            return;
        }
        if (this.dataChart != null) {
            this.dataChart.notifyContainerResized();
        }
        if (this.ad5 != null) {
            this.ad5.f();
        }
        if (this.volumeChart != null) {
            this.volumeChart.notifyContainerResized();
        }
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.notifyContainerResized();
        }
        if (this.aeu != null) {
            this.aeu.notifySizeChanged();
        }
    };
    FinancialChart.prototype.rr = function () {
        var e_1, _a;
        _super.prototype.rr.call(this);
        this.vr = 1;
        this.aa6 = 0;
        this.xo = 0;
        this.ab0 = null;
        this.abt = AxisDefaults.g;
        this.w8 = AxisDefaults.e;
        this.w7 = AxisDefaults.f;
        this.abu = AxisDefaults.j;
        this.abq = null;
        this.alr = AxisDefaults.h;
        this.agx = AxisDefaults.b;
        this.fj = true;
        this.fc = true;
        this.fd = false;
        this.a7 = 0;
        this.hw = Defaults.j;
        this.t1 = Defaults.ae;
        this.tw = Defaults.af;
        this.tx = Defaults.ag;
        this.ih = NaN;
        this.h8 = 40;
        this.fs = true;
        this.fy = false;
        if (this.dataChart != null) {
            var a = this.dataChart.cu.j.e();
            this.acn = a.d;
            this.aco = a.e;
            this.acm = a.d;
            this.alr = this.dataChart.xu;
        }
        var b = new BrushCollection();
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#8BDC5C";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#8961A9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#6DB1FF";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#82E9D9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#EA3C63";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#735656";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#F8CE4F";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#A8A8B7";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#E051A9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#FF903B";
            return $ret;
        })()));
        var c = new BrushCollection();
        try {
            for (var _b = __values(fromEnum(b)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var d = _c.value;
                c.add(BrushUtil.m(d, 0.3));
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        this.acp = c;
        this.acq = b;
    };
    FinancialChart.prototype.ak7 = function () {
        if (this.ad5 != null) {
            this.ad5.b = null;
            this.ad5.b = this.indicatorCharts;
        }
        this.setGridRows();
    };
    FinancialChart.prototype.ak8 = function () {
        this.setGridRows();
    };
    FinancialChart.prototype.alh = function () {
        this.ak7();
    };
    FinancialChart.prototype.aj6 = function () {
        if (this.aeu == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
            return;
        }
        var a = this.ju.rootWrapper.width();
        var b = this.dataChart.to.left + this.dataChart.to.width;
        var c = this.dataChart.to.left;
        var d = a - b;
        this.aeu.startInset = c - this.aeu.trackStartInset;
        this.aeu.endInset = d - this.aeu.trackEndInset;
        if (this.aeu.endInset < 0) {
            var e = this.aeu.endInset;
            this.aeu.endInset = 0;
            this.dataChart.g1 += (e * -1);
        }
        if (this.aeu.startInset < 0) {
            var f = this.aeu.startInset;
            this.aeu.startInset = 0;
            this.dataChart.gw += (f * -1);
        }
        this.zoomSliderChart.gw = c;
        this.zoomSliderChart.g1 = d;
        this.zoomSliderChart.gj = this.aeu.barExtent;
    };
    FinancialChart.prototype.akx = function () {
        this.aj6();
    };
    FinancialChart.prototype.ro = function (a) {
        _super.prototype.ro.call(this, a);
        if (a != null) {
            a.gi = 0;
        }
    };
    FinancialChart.prototype.als = function (a) {
        return a.s2();
    };
    FinancialChart.prototype.alv = function () {
        return this.agz == null ? null : this.alu(this.agz.rootWrapper);
    };
    FinancialChart.prototype.alt = function (a) {
        if (a == null || a.d == null) {
            return null;
        }
        return this.alu(a.d.rootWrapper);
    };
    FinancialChart.prototype.alu = function (a) {
        if (a == null) {
            return null;
        }
        var b = a.getOffset();
        return new Rect(0, b.left, b.top, a.width(), a.height());
    };
    FinancialChart.prototype.agf = function () {
        if (this.ag3 == null) {
            return NaN;
        }
        var a = this.ag3.getOffset();
        return this.ag3.width() + (a == null ? 0 : a.left);
    };
    FinancialChart.prototype.rz = function (source_, a, b) {
        _super.prototype.rz.call(this, source_, a, b);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mg(source_, a, b);
        }
    };
    FinancialChart.prototype.r0 = function (source_, a, b) {
        _super.prototype.r0.call(this, source_, a, b);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mh(source_, a, b);
        }
    };
    FinancialChart.prototype.ry = function (source_) {
        _super.prototype.ry.call(this, source_);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.l9(source_);
        }
    };
    FinancialChart.prototype.r2 = function (source_, a, b, c) {
        _super.prototype.r2.call(this, source_, a, b, c);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mi(source_, a, b, c);
        }
    };
    FinancialChart.prototype.ru = function (a, b) {
        _super.prototype.ru.call(this, a, b);
        if (this.ae9(a)) {
            a.toolTip = null;
        }
    };
    Object.defineProperty(FinancialChart.prototype, "adc", {
        get: function () {
            return this.adb;
        },
        set: function (a) {
            var b = this.adc;
            if (a != b) {
                this.adb = a;
                this.sd("Toolbar", b, this.adc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahs", {
        get: function () {
            return this.ahl;
        },
        set: function (a) {
            var b = this.ahs;
            if (a != b) {
                this.ahl = a;
                this.sd("RangeSelectorTemplate", b, this.ahs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aht", {
        get: function () {
            return this.ahm;
        },
        set: function (a) {
            var b = this.aht;
            if (a != b) {
                this.ahm = a;
                this.sd("ToolbarTemplate", b, this.aht);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahp", {
        get: function () {
            return this.ahi;
        },
        set: function (a) {
            var b = this.ahp;
            if (a != b) {
                this.ahi = a;
                this.sd("ChartTypePickerTemplate", b, this.ahp);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahu", {
        get: function () {
            return this.ahn;
        },
        set: function (a) {
            var b = this.ahu;
            if (a != b) {
                this.ahn = a;
                this.sd("TrendLineTypePickerTemplate", b, this.ahu);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahv", {
        get: function () {
            return this.aho;
        },
        set: function (a) {
            var b = this.ahv;
            if (a != b) {
                this.aho = a;
                this.sd("VolumeTypePickerTemplate", b, this.ahv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahq", {
        get: function () {
            return this.ahj;
        },
        set: function (a) {
            var b = this.ahq;
            if (a != b) {
                this.ahj = a;
                this.sd("IndicatorMenuTemplate", b, this.ahq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahr", {
        get: function () {
            return this.ahk;
        },
        set: function (a) {
            var b = this.ahr;
            if (a != b) {
                this.ahk = a;
                this.sd("OverlayPickerTemplate", b, this.ahr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aeu", {
        get: function () {
            return this.aet;
        },
        set: function (a) {
            var b = this.aeu;
            if (a != b) {
                this.aet = a;
                this.sd("ZoomSlider", b, this.aeu);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_h8 = function () {
        return _super.prototype.get_h8.call(this);
    };
    FinancialChart.prototype.set_h8 = function (a) {
        _super.prototype.set_h8.call(this, a);
    };
    FinancialChart.prototype.get_fs = function () {
        return _super.prototype.get_fs.call(this);
    };
    FinancialChart.prototype.set_fs = function (a) {
        _super.prototype.set_fs.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "agk", {
        get: function () {
            return this.af3;
        },
        set: function (a) {
            var b = this.agk;
            if (a != b) {
                this.af3 = a;
                this.sd("ToolbarHeight", b, this.agk);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.vg = function () {
        return this.xAxis;
    };
    FinancialChart.prototype.vh = function () {
        return this.yAxis;
    };
    FinancialChart.prototype.onAttachedToUI = function () {
        _super.prototype.onAttachedToUI.call(this);
        if (this.aeu != null) {
            this.aeu.onAttachedToUI();
        }
    };
    FinancialChart.prototype.onDetachedFromUI = function () {
        _super.prototype.onDetachedFromUI.call(this);
        if (this.aeu != null) {
            this.aeu.onDetachedFromUI();
        }
    };
    FinancialChart.prototype.ba = function (a) {
        return 20;
    };
    FinancialChart.prototype.get_gf = function () {
        return ((function () {
            var $ret = new List$1(DataSeriesType_$type, 0);
            $ret.add(20);
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChart.prototype, "gf", {
        get: function () {
            return this.get_gf();
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_ge = function () {
        return ((function () {
            var $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
            $ret.add(new SimpleFinancialPriceSeriesRule());
            $ret.add(new SubCollectionsRule());
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChart.prototype, "ge", {
        get: function () {
            return this.get_ge();
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.acy = function (a) {
        return this.acz(a);
    };
    FinancialChart.prototype.aec = function (a) {
        return this.aed(a);
    };
    FinancialChart.prototype.acx = function (a) {
        var b = this.acy(0);
        b.name = a;
        return b;
    };
    FinancialChart.prototype.q5 = function () {
        this.xAxis = this.acx("xAxis");
        this.yAxis = this.aec(0);
        this.yAxis.name = "yAxis";
        this.volumeAxis = this.aec(0);
        this.volumeAxis.name = "volumeAxis";
        this.volumeXAxis = this.acx("volumeXAxis");
        this.afq = new List$1(NumericYAxis.$, 0);
        this.afs = new List$1(CategoryAxisBase.$, 0);
        this.indicatorAxis = this.aec(0);
        this.indicatorAxis.name = "indicatorAxis";
        this.indicatorXAxis = this.acx("indicatorXAxis_0");
        this.afq.add(this.indicatorAxis);
        this.afs.add(this.indicatorXAxis);
        if (this.xAxis.ay == null) {
            this.xAxis.ay = new AxisLabelSettings();
        }
        if (this.yAxis.ay == null) {
            this.yAxis.ay = new AxisLabelSettings();
        }
        if (this.volumeAxis.ay == null) {
            this.volumeAxis.ay = new AxisLabelSettings();
        }
        if (this.volumeXAxis.ay == null) {
            this.volumeAxis.ay = new AxisLabelSettings();
        }
        if (this.indicatorAxis.ay == null) {
            this.indicatorAxis.ay = new AxisLabelSettings();
        }
        if (this.indicatorXAxis.ay == null) {
            this.indicatorXAxis.ay = new AxisLabelSettings();
        }
        this.zoomSliderAxis = this.aec(0);
        this.zoomSliderAxis.name = "zoomSliderAxis";
        this.zoomSliderXAxis = this.acx("zoomSliderXAxis");
        if (this.zoomSliderAxis.ay == null) {
            this.zoomSliderAxis.ay = new AxisLabelSettings();
        }
        if (this.zoomSliderXAxis.ay == null) {
            this.zoomSliderXAxis.ay = new AxisLabelSettings();
        }
    };
    FinancialChart.prototype.q1 = function (a, b) {
        var c = typeCast(MarkerSeries.$, a);
        if (c != null) {
            c.qh = this.cn(a, b);
        }
    };
    FinancialChart.prototype.cm = function (a) {
        if (a != null) {
            return 1;
        }
        return _super.prototype.cm.call(this, a);
    };
    FinancialChart.prototype.sv = function (a) {
        if (a.suggestedSecondaryAxis == 2) {
            this.yAxis.lg = true;
            this.yAxis.l7 = 10;
        }
    };
    FinancialChart.prototype.sy = function () {
        this.yAxis.lg = this.afj;
        this.yAxis.l7 = this.ahh;
    };
    FinancialChart.prototype.adg = function (a) {
        var b;
        if (this.ade == 0) {
            if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                b = 4;
            }
            else {
                b = 2;
            }
        }
        else {
            b = this.ade;
        }
        b = this.adf(b);
        return b;
    };
    FinancialChart.prototype.adf = function (a) {
        if ((a == 1 || a == 2)) {
            if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                return a;
            }
            a = 4;
        }
        if (a == 4) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 3;
        }
        if (a == 3) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.adp = function (a) {
        if ((a == 2 || a == 3)) {
            if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                return a;
            }
            a = 5;
        }
        if (a == 5) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 6;
        }
        if (a == 6) {
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                return a;
            }
            a = 4;
        }
        if (a == 4) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.adi = function (a) {
        if (a == 2) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 3;
        }
        if (a == 3) {
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                return a;
            }
            a = 1;
        }
        if (a == 1) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.ah4 = function (a) {
        var b = a.getMemberPathFor(14);
        if (stringIsNullOrEmpty(b)) {
            b = a.getMemberPathFor(11);
        }
        return b;
    };
    FinancialChart.prototype.acz = function (axisType_) {
        if ((this.externalObject)) {
            return (this.externalObject.createXAxis(axisType_).i);
        }
        else {
            var a = void 0;
            switch (axisType_) {
                case 0:
                    if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                        a = TypeRegistrar.create("OrdinalTimeXAxis");
                    }
                    else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                        a = TypeRegistrar.create("TimeXAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
                case 1:
                    if (TypeRegistrar.isRegistered("TimeXAxis")) {
                        a = TypeRegistrar.create("TimeXAxis");
                    }
                    else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                        a = TypeRegistrar.create("OrdinalTimeXAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
            }
            return null;
        }
    };
    FinancialChart.prototype.aed = function (axisType_) {
        if ((this.externalObject)) {
            return (this.externalObject.createYAxis(axisType_).i);
        }
        else {
            var a = void 0;
            switch (axisType_) {
                case 0:
                    if (TypeRegistrar.isRegistered("NumericYAxis")) {
                        a = TypeRegistrar.create("NumericYAxis");
                    }
                    else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                        a = TypeRegistrar.create("PercentChangeYAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
                case 1:
                    if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                        a = TypeRegistrar.create("PercentChangeYAxis");
                    }
                    else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                        a = TypeRegistrar.create("NumericYAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
            }
            return null;
        }
    };
    FinancialChart.prototype.aej = function () {
        return this.cx(1);
    };
    FinancialChart.prototype.aek = function () {
        return this.cx(0);
    };
    FinancialChart.prototype.aei = function () {
        return this.cx(2);
    };
    FinancialChart.prototype.ael = function () {
        return this.cx(20);
    };
    Object.defineProperty(FinancialChart.prototype, "ae2", {
        get: function () {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad0", {
        get: function () {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ae5", {
        get: function () {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ady", {
        get: function () {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ae3", {
        get: function () {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad2", {
        get: function () {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ae4", {
        get: function () {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad7", {
        get: function () {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.cw = function (a, b) {
        var c = this.ah4(a);
        switch (this.adg(a)) {
            case 3:
                var d = this.aej();
                this.ad0.setValueMemberPath(d, c);
                this.ad0.setXAxis(d, this.xAxis);
                this.ad0.setYAxis(d, this.yAxis);
                this.ad0.setCategoryMode(d, 1);
                return d;
            case 4:
                var e = this.aek();
                this.ad0.setValueMemberPath(e, c);
                this.ad0.setXAxis(e, this.xAxis);
                this.ad0.setYAxis(e, this.yAxis);
                this.ad0.setCategoryMode(e, 1);
                return e;
            default:
            case 1:
            case 2:
                var f = this.ael();
                this.ady.setOpenMemberPath(f, a.getMemberPathFor(11));
                this.ady.setHighMemberPath(f, a.getMemberPathFor(12));
                this.ady.setLowMemberPath(f, a.getMemberPathFor(13));
                this.ady.setCloseMemberPath(f, a.getMemberPathFor(14));
                this.ady.setVolumeMemberPath(f, a.getMemberPathFor(15));
                this.ady.setXAxis(f, this.xAxis);
                this.ady.setYAxis(f, this.yAxis);
                this.ady.setDisplayType(f, this.ade == 1 ? 1 : 0);
                this.ady.setCategoryMode(f, 1);
                return f;
        }
    };
    FinancialChart.prototype.sx = function () {
        _super.prototype.sx.call(this);
        this.akv(this.xAxis);
        this.alj(false);
        if (this.adj != 0 && this.volumeChart != null) {
            this.ak2();
        }
        this.akv(this.volumeXAxis);
        this.akv(this.indicatorXAxis);
        this.alg();
        this.ali();
        if (this.adq != 0) {
            this.ak3();
            this.akv(this.zoomSliderXAxis);
        }
    };
    FinancialChart.prototype.aas = function (a, b) {
        var e_2, _a;
        _super.prototype.aas.call(this, a, b);
        a(this.volumeXAxis);
        if (this.afs != null) {
            try {
                for (var _b = __values(fromEnum(this.afs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    a(c);
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
        var d = true;
        switch (b) {
            case "XAxisMajorStroke":
            case "XAxisMajorStrokeThickness":
                d = false;
                break;
        }
        if (d) {
            a(this.zoomSliderXAxis);
        }
    };
    FinancialChart.prototype.aax = function (a, b) {
        var e_3, _a;
        _super.prototype.aax.call(this, a, b);
        if (b) {
            a(this.volumeAxis);
            if (this.afq != null) {
                try {
                    for (var _b = __values(fromEnum(this.afq)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var c = _c.value;
                        a(c);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
            }
            a(this.zoomSliderAxis);
        }
    };
    FinancialChart.prototype.akz = function (a) {
        var b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
        if (b != null) {
            a(b);
        }
    };
    FinancialChart.prototype.aav = function (a) {
        _super.prototype.aav.call(this, a);
        this.aam(this.volumeXAxis, a);
        this.aam(this.indicatorXAxis, a);
        this.aam(this.zoomSliderXAxis, a);
    };
    FinancialChart.prototype.aa0 = function (a) {
        _super.prototype.aa0.call(this, a);
        this.aam(this.volumeAxis, a);
        this.aam(this.indicatorAxis, a);
        this.aam(this.zoomSliderAxis, a);
    };
    FinancialChart.prototype.aay = function (a) {
        _super.prototype.aay.call(this, a);
        this.aal(this.volumeAxis, a);
        this.aal(this.indicatorAxis, a);
        this.aal(this.zoomSliderAxis, a);
    };
    FinancialChart.prototype.aat = function (a) {
        _super.prototype.aat.call(this, a);
        this.aal(this.volumeXAxis, a);
        this.aal(this.indicatorXAxis, a);
        this.aal(this.zoomSliderXAxis, a);
    };
    FinancialChart.prototype.rn = function (a) {
        var _this = this;
        _super.prototype.rn.call(this, a);
        if (a == null) {
            return;
        }
        if (a == this.zoomSliderChart) {
            a.uk = a.un = false;
            a.legend = null;
            if (this.dataChart != null) {
                a.ag = this.dataChart.ag;
                a.aj = this.dataChart.aj;
            }
        }
        else {
            SyncManager.d(a, ((function () {
                var $ret = new SyncSettings();
                $ret.syncChannel = _this.aiz();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = false;
                return $ret;
            })()));
            SyncManager.c(a);
        }
        a.ci = 2;
    };
    FinancialChart.prototype.aiz = function () {
        if (this.ahw == null) {
            FinancialChart.ahg++;
            this.ahw = FinancialChart.ahg.toString();
        }
        return this.ahw;
    };
    FinancialChart.prototype.akh = function (a, b) {
        this.aj3();
        this.akx();
    };
    FinancialChart.prototype.aj3 = function () {
        var e_4, _a;
        if (this.yAxis.b7()) {
            return;
        }
        var a = this.yAxis.av.bd;
        if (this.adj != 0) {
            a = Math.max(a, this.volumeAxis.av.bd);
        }
        try {
            for (var _b = __values(fromEnum(this.afq)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                a = Math.max(a, b.av.bd);
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        this.aj4(a);
    };
    FinancialChart.prototype.aj4 = function (a) {
        var e_5, _a;
        if (this.yAxis.b7()) {
            return;
        }
        this.yAxis.er = this.volumeAxis.er = a;
        try {
            for (var _b = __values(fromEnum(this.afq)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                b.er = a;
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
        this.zoomSliderAxis.er = this.yAxis.er;
    };
    FinancialChart.prototype.aj9 = function (a) {
        if (this.indicatorCharts == null) {
            return;
        }
        for (var b = 0; b < this.indicatorCharts.count; b++) {
            var c = this.indicatorCharts._inner[b];
            for (var d = 0; d < c.series.count; d++) {
                var e = c.series._inner[d];
                if (!(this.ae7(e))) {
                    continue;
                }
                a(c.series._inner[d], b);
            }
        }
    };
    FinancialChart.prototype.akc = function (a) {
        if (this.volumeChart == null) {
            return;
        }
        for (var b = 0; b < this.volumeChart.series.count; b++) {
            var c = this.volumeChart.series._inner[b];
            if (c.dc) {
                continue;
            }
            a(this.volumeChart.series._inner[b], b);
        }
    };
    FinancialChart.prototype.aka = function (a) {
        if (this.dataChart == null) {
            return;
        }
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = this.dataChart.series._inner[b];
            if (!this.ae9(c)) {
                continue;
            }
            a(c, b);
        }
    };
    FinancialChart.prototype.akb = function (a, b) {
        if (this.dataChart == null) {
            return;
        }
        for (var c = 0; c < this.dataChart.series.count; c++) {
            var d = this.dataChart.series._inner[c];
            if (this.ae9(d)) {
                continue;
            }
            var e = this.aha(d, c);
            a(d, e);
        }
        if (b) {
            this.akd(a);
        }
    };
    FinancialChart.prototype.akd = function (a) {
        if (this.zoomSliderChart == null) {
            return;
        }
        for (var b = 0; b < this.zoomSliderChart.series.count; b++) {
            var c = this.zoomSliderChart.series._inner[b];
            if (c.dc) {
                continue;
            }
            a(this.zoomSliderChart.series._inner[b], b);
        }
    };
    FinancialChart.prototype.aha = function (a, b) {
        if (a.cb != this.dataChart) {
            return b;
        }
        var c = this.bb == null || this.bb.dataSeries == null ? 0 : this.bb.dataSeries.count;
        var d = this.adu == null ? 0 : this.adu.count;
        return b - (c * d);
    };
    FinancialChart.prototype.rd = function (a) {
        _super.prototype.rd.call(this, a);
        this.akc(a);
        this.aj9(a);
        this.akd(a);
    };
    Object.defineProperty(FinancialChart.prototype, "volumeChart", {
        get: function () {
            return this.aep;
        },
        set: function (a) {
            var b = this.volumeChart;
            if (a != b) {
                this.aep = a;
                this.sd("VolumeChart", b, this.volumeChart);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.ak2 = function () {
        if (this.dataChart == null) {
            return;
        }
        this.volumeChart.series.clear();
        var a = new List$1(Series.$, 0);
        var b = -1;
        for (var c = 0; c < this.dataChart.series.count; c++) {
            var d = this.dataChart.series._inner[c];
            if (this.ae9(d) || d.dc) {
                continue;
            }
            b++;
            var e = void 0;
            var f = this.adj;
            f = this.adi(f);
            switch (f) {
                case 2:
                    e = this.aek();
                    break;
                case 3:
                    e = this.aei();
                    break;
                default:
                case 1:
                    e = this.aej();
                    break;
            }
            this.ad0.setCategoryMode(e, 1);
            e.name = "volumeSeries_" + b;
            e.itemsSource = d.itemsSource;
            this.ad0.setXAxis(e, this.volumeXAxis);
            this.ad0.setYAxis(e, this.volumeAxis);
            this.ad0.setValueMemberPath(e, this.bb != null && this.bb.dataSeries != null && this.bb.dataSeries.count > b ? this.bb.dataSeries._inner[b].getMemberPathFor(15) : null);
            e.title = d.title + " Volume";
            e.o7 = ArrayExtension.getModulus$1(Brush.$, this.acr, b);
            e.pc = ArrayExtension.getModulus$1(Brush.$, this.acs, b);
            e.g1 = this.agl;
            a.add(e);
        }
        var g = this.gb("volume", false);
        if (g != null) {
            a.o(g);
        }
        for (var h = 0; h < a.count; h++) {
            var i = a._inner[h];
            this.volumeChart.series.add(i);
            this.rs(i, h);
        }
    };
    FinancialChart.prototype.ae6 = function (a) {
        if (!this.ae2) {
            return false;
        }
        return this.ad0.matchesType(a);
    };
    FinancialChart.prototype.afa = function (a) {
        if (!this.ae5) {
            return false;
        }
        return this.ady.matchesType(a);
    };
    FinancialChart.prototype.ae7 = function (a) {
        if (!this.ae3) {
            return false;
        }
        return this.ad2.matchesType(a);
    };
    FinancialChart.prototype.ae9 = function (a) {
        if (!this.ae4) {
            return false;
        }
        return this.ad7.matchesType(a);
    };
    FinancialChart.prototype.ak1 = function () {
        if (this.dataChart == null) {
            return;
        }
        var a = 0;
        var b = this.ads == null ? 0 : this.ads.count;
        var c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
        var d = b + c;
        for (var e = 0; e < d; e++) {
            var f = new List$1(Series.$, 0);
            var g = this.indicatorCharts._inner[e];
            var h = e >= b;
            var i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.ads._inner[e]);
            var j = -1;
            for (var k = 0; k < this.dataChart.series.count; k++) {
                var l = this.dataChart.series._inner[k];
                if (this.ae9(l) || l.dc) {
                    continue;
                }
                j++;
                var m = void 0;
                if (h) {
                    var n = this.aem("Custom");
                    this.ad2.handleCustomIndicatorEvent(n, runOn(this, this.akf));
                    m = n;
                }
                else {
                    m = this.aeo(this.ads._inner[e]);
                }
                if (m == null) {
                    continue;
                }
                m.name = "indicator_" + a++;
                this.ad2.setXAxis(m, this.afs._inner[e]);
                this.ad2.setYAxis(m, this.afq._inner[e]);
                m.itemsSource = l.itemsSource;
                this.ad2.setOpenMemberPath(m, this.bb.dataSeries._inner[j].getMemberPathFor(11));
                this.ad2.setHighMemberPath(m, this.bb.dataSeries._inner[j].getMemberPathFor(12));
                this.ad2.setLowMemberPath(m, this.bb.dataSeries._inner[j].getMemberPathFor(13));
                this.ad2.setCloseMemberPath(m, this.bb.dataSeries._inner[j].getMemberPathFor(14));
                this.ad2.setVolumeMemberPath(m, this.bb.dataSeries._inner[j].getMemberPathFor(15));
                m.title = l.title + " " + i;
                m.o7 = ArrayExtension.getModulus$1(Brush.$, this.acl, e);
                m.g1 = this.agh;
                if (this.ae7(m)) {
                    this.ad2.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.acm, e));
                    this.ad2.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ad4, e));
                }
                if (this.ahc != -2147483648 && this.ae7(m)) {
                    this.ad2.setPeriodOverride(m, this.ahc);
                }
                if (this.ae7(m)) {
                    this.ad2.setSmoothingPeriod(m, this.ahf);
                }
                if (this.ae7(m)) {
                    this.ad2.setSignalPeriod(m, this.ahe);
                }
                if (this.ae7(m)) {
                    this.ad2.setShortPeriod(m, this.ahd);
                    this.ad2.setLongPeriod(m, this.ahb);
                }
                this.rs(m, e);
                f.add(m);
            }
            var o = this.gb(i, false);
            for (var p = 0; p < f.count; p++) {
                var q = f._inner[p];
                g.series.add(q);
            }
            if (o != null) {
                for (var r = 0; r < o.count; r++) {
                    var s = o._inner[r];
                    g.series.add(s);
                    this.rs(s, r);
                }
            }
        }
    };
    FinancialChart.prototype.aem = function (indicatorName_) {
        return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
    };
    FinancialChart.prototype.aeo = function (a) {
        return this.aem(EnumUtil.getName(FinancialIndicatorType_$type, a));
    };
    FinancialChart.prototype.alj = function (a) {
        if (this.adc == null) {
            return;
        }
        var b = this.xAxis;
        if (b.actualMinimumValue > b.actualMaximumValue) {
            return;
        }
        this.adc.as = b.actualMinimumValue;
        this.adc.ar = b.actualMaximumValue;
        if (a) {
            this.adc.au = b.visibleMinimum;
            this.adc.at = b.visibleMaximum;
        }
        this.adc.bn();
    };
    FinancialChart.prototype.jv = function () {
        var e_6, _a, e_7, _b;
        var _this = this;
        var a = ((function () {
            var $ret = new FinancialChartVisualData();
            $ret.mainChart = _super.prototype.jv.call(_this);
            $ret.volumeChart = _this.volumeChart == null ? null : _this.volumeChart.vw();
            $ret.toolbar = _this.adc == null ? null : _this.adc.aj();
            $ret.zoomChart = _this.zoomSliderChart == null ? null : _this.zoomSliderChart.vw();
            return $ret;
        })());
        if (this.indicatorCharts != null) {
            a.indicatorCharts = new List$1(Base.$, 0);
            try {
                for (var _c = __values(fromEnum(this.indicatorCharts)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var b = _d.value;
                    a.indicatorCharts.add1(b.vw());
                }
            }
            catch (e_6_1) {
                e_6 = { error: e_6_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_6)
                        throw e_6.error;
                }
            }
        }
        if (this.dataChart != null) {
            a.mainChartLeft = this.als(this.dataChart).x;
            a.mainChartTop = this.als(this.dataChart).y;
        }
        if (this.volumeChart != null) {
            a.volumeChartLeft = this.als(this.volumeChart).x;
            a.volumeChartTop = this.als(this.volumeChart).y;
        }
        if (this.zoomSliderChart != null) {
            a.zoomChartLeft = this.als(this.zoomSliderChart).x;
            a.zoomChartTop = this.als(this.zoomSliderChart).y;
        }
        if (this.adc != null) {
            var c = this.alt(this.adc);
            a.toolbarLeft = c.left;
            a.toolbarTop = c.top;
            a.toolbarWidth = c.width;
            a.toolbarHeight = c.height;
        }
        if (this.indicatorCharts != null) {
            a.indicatorChartLefts = new List$1(Number_$type, 0);
            a.indicatorChartTops = new List$1(Number_$type, 0);
            try {
                for (var _e = __values(fromEnum(this.indicatorCharts)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var d = _f.value;
                    a.indicatorChartLefts.add(this.als(d).x);
                    a.indicatorChartTops.add(this.als(d).y);
                }
            }
            catch (e_7_1) {
                e_7 = { error: e_7_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_7)
                        throw e_7.error;
                }
            }
        }
        var e = this.alv();
        a.legendLeft = e.left;
        a.legendTop = e.top;
        a.legendWidth = e.width;
        a.legendHeight = e.height;
        a.legend = this.adw == null ? null : this.adw.exportVisualData();
        return a;
    };
    FinancialChart.prototype.ah1 = function () {
        var a = this.jv();
        a.scaleByViewport();
        return a.serialize();
    };
    FinancialChart.prototype.aen = function (overlayName_) {
        return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
    };
    FinancialChart.prototype.ali = function () {
        var e_8, _a, e_9, _b;
        if (this.dataChart == null) {
            return;
        }
        var a = new List$1(Series.$, 0);
        try {
            for (var _c = __values(fromEnum(this.dataChart.series)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var b = _d.value;
                if (this.ae9(b)) {
                    a.add(b);
                }
            }
        }
        catch (e_8_1) {
            e_8 = { error: e_8_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_8)
                    throw e_8.error;
            }
        }
        try {
            for (var _e = __values(fromEnum(a)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var c = _f.value;
                this.dataChart.series.remove(c);
            }
        }
        catch (e_9_1) {
            e_9 = { error: e_9_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_9)
                    throw e_9.error;
            }
        }
        if (this.adu == null) {
            return;
        }
        var d = new List$1(Series.$, 0);
        var e = -1;
        for (var f = 0; f < this.dataChart.series.count; f++) {
            var g = this.dataChart.series._inner[f];
            if (this.ae9(g) || g.dc) {
                continue;
            }
            e++;
            for (var h = 0; h < this.adu.count; h++) {
                var i = this.adu._inner[h];
                var j = void 0;
                switch (i) {
                    case 1:
                        j = this.aen(EnumUtil.getName(FinancialOverlayType_$type, i));
                        break;
                    default:
                    case 0:
                        j = this.aen(EnumUtil.getName(FinancialOverlayType_$type, i));
                        break;
                }
                j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                this.ad7.setXAxis(j, this.xAxis);
                this.ad7.setYAxis(j, this.yAxis);
                j.itemsSource = g.itemsSource;
                var k = e * this.adu.count + h;
                j.o7 = ArrayExtension.getModulus$1(Brush.$, this.acp, k);
                j.pc = ArrayExtension.getModulus$1(Brush.$, this.acq, k);
                j.g1 = this.agj;
                j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                var l = g;
                if (l == null) {
                    continue;
                }
                var m = this.bb.dataSeries._inner[e];
                this.ad7.setOpenMemberPath(j, m.getMemberPathFor(11));
                this.ad7.setHighMemberPath(j, m.getMemberPathFor(12));
                this.ad7.setLowMemberPath(j, m.getMemberPathFor(13));
                this.ad7.setCloseMemberPath(j, m.getMemberPathFor(14));
                this.ad7.setVolumeMemberPath(j, m.getMemberPathFor(15));
                d.add(j);
            }
        }
        var n = new Array(this.dataChart.series.count);
        this.dataChart.series.copyTo(n, 0);
        this.dataChart.skipDataCleanup = true;
        this.dataChart.series.clear();
        this.dataChart.skipDataCleanup = false;
        for (var o = 0; o < n.length; o++) {
            n[o].index = -1;
        }
        d.o(n);
        for (var p = 0; p < d.count; p++) {
            var q = d._inner[p];
            this.dataChart.series.add(q);
            this.rs(q, p);
        }
    };
    FinancialChart.prototype.alg = function () {
        var e_10, _a;
        if (this.aff) {
            return;
        }
        this.aff = true;
        if (this.indicatorCharts != null) {
            var a = this.indicatorCharts;
            this.indicatorCharts = null;
            try {
                for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    this.akw(b);
                }
            }
            catch (e_10_1) {
                e_10 = { error: e_10_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_10)
                        throw e_10.error;
                }
            }
        }
        if ((this.ads == null || this.ads.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
            this.indicatorCharts = null;
            if (this.afq != null) {
                this.afq.clear();
            }
            if (this.afs != null) {
                this.afs.clear();
            }
            this.ak7();
            this.alh();
            this.aff = false;
            return;
        }
        if (this.indicatorCharts == null) {
            this.indicatorCharts = new List$1(XamDataChart.$, 0);
        }
        this.indicatorCharts.clear();
        this.afq.clear();
        this.afs.clear();
        var c = this.ads == null ? 0 : this.ads.count;
        var d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
        var e = c + d;
        for (var f = 0; f < e; f++) {
            var g = new XamDataChart();
            this.indicatorCharts.add(g);
            this.aku(g);
            var h = f >= c;
            if (h) {
                g.kg = this.customIndicatorNames._inner[f - c];
            }
            else {
                g.kg = this.ah3(this.ads._inner[f]);
            }
            if (this.indicatorAxis != null) {
                var i = void 0;
                var j = void 0;
                if (f == 0) {
                    i = this.indicatorAxis;
                    j = this.indicatorXAxis;
                }
                else {
                    i = new NumericYAxis();
                    if (!this.indicatorXAxis.cd) {
                        j = this.acy(0);
                    }
                    else {
                        j = this.acy(1);
                    }
                }
                j.name = "indicatorXAxis_" + f;
                i.name = "indicatorAxis_" + f;
                g.axes.add(i);
                g.axes.add(j);
                this.afq.add(i);
                this.afs.add(j);
                if (this.e9) {
                    this.aap(i);
                }
                if (this.e9) {
                    this.aan(j);
                }
            }
        }
        this.ak1();
        this.ak7();
        if (this.adc != null) {
            this.adc.ae = this.ads;
        }
        this.aj5();
        this.alh();
        this.aff = false;
    };
    FinancialChart.prototype.rk = function () {
        var e_11, _a, e_12, _b;
        _super.prototype.rk.call(this);
        this.aan(this.xAxis);
        this.aan(this.volumeXAxis);
        if (this.afs != null) {
            try {
                for (var _c = __values(fromEnum(this.afs)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var a = _d.value;
                    this.aan(a);
                }
            }
            catch (e_11_1) {
                e_11 = { error: e_11_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_11)
                        throw e_11.error;
                }
            }
        }
        this.aap(this.yAxis);
        this.aap(this.volumeAxis);
        if (this.afq != null) {
            try {
                for (var _e = __values(fromEnum(this.afq)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var b = _f.value;
                    this.aap(b);
                }
            }
            catch (e_12_1) {
                e_12 = { error: e_12_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_12)
                        throw e_12.error;
                }
            }
        }
        this.aan(this.zoomSliderXAxis);
        this.aap(this.zoomSliderAxis);
    };
    FinancialChart.prototype.get_fx = function () {
        return !this.afd;
    };
    Object.defineProperty(FinancialChart.prototype, "afl", {
        get: function () {
            return (this.externalObject._dynamicContent);
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.alo = function (a, b) {
        this.ala(a, b);
        this.aj5();
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
            this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
        }
        this.ak3();
        this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
        this.ak8();
        this.alp(a, b);
    };
    FinancialChart.prototype.ak3 = function () {
        if (this.dataChart == null || this.zoomSliderChart == null) {
            return;
        }
        this.zoomSliderChart.series.clear();
        var a = new List$1(Series.$, 0);
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = this.dataChart.series._inner[b];
            if (this.ae9(c) || c.dc) {
                continue;
            }
            var d = void 0;
            var e = this.adq;
            e = this.adp(e);
            var f = this.aha(c, b);
            if (e == 1) {
                switch (this.adg(this.bb != null && this.bb.dataSeries != null && this.bb.dataSeries.count > f ? this.bb.dataSeries._inner[f] : null)) {
                    case 1:
                        e = 2;
                        break;
                    case 2:
                        e = 3;
                        break;
                    case 3:
                        e = 4;
                        break;
                    case 4:
                        e = 5;
                        break;
                }
            }
            switch (e) {
                case 2:
                    d = this.ael();
                    this.ady.setDisplayType(d, 1);
                    break;
                case 3:
                    d = this.ael();
                    this.ady.setDisplayType(d, 0);
                    break;
                case 5:
                    d = this.aek();
                    break;
                case 6:
                    d = this.aei();
                    break;
                default:
                case 4:
                    d = this.aej();
                    break;
            }
            var g = this.bb != null && this.bb.dataSeries != null && this.bb.dataSeries.count > f ? this.bb.dataSeries._inner[f] : null;
            if (d.dh && !d.dq) {
                this.ad0.setCategoryMode(d, 1);
                this.ad0.setXAxis(d, this.zoomSliderXAxis);
                this.ad0.setYAxis(d, this.zoomSliderAxis);
                this.ad0.setValueMemberPath(d, g == null ? null : this.ah4(g));
            }
            else if (d.dq) {
                this.ady.setCategoryMode(d, 1);
                this.ady.setXAxis(d, this.zoomSliderXAxis);
                this.ady.setYAxis(d, this.zoomSliderAxis);
                if (g != null) {
                    this.ady.setOpenMemberPath(d, g.getMemberPathFor(11));
                    this.ady.setHighMemberPath(d, g.getMemberPathFor(12));
                    this.ady.setLowMemberPath(d, g.getMemberPathFor(13));
                    this.ady.setCloseMemberPath(d, g.getMemberPathFor(14));
                    this.ady.setVolumeMemberPath(d, g.getMemberPathFor(15));
                }
            }
            d.name = "zoomSliderSeries_" + f;
            d.itemsSource = c.itemsSource;
            d.title = c.title;
            d.g1 = this.io;
            a.add(d);
        }
        for (var h = 0; h < a.count; h++) {
            var i = a._inner[h];
            this.zoomSliderChart.series.add(i);
            this.rs(i, h);
        }
    };
    FinancialChart.prototype.r7 = function (a, b, c) {
        var e_13, _a;
        _super.prototype.r7.call(this, a, b, c);
        if (a == null || !b) {
            return;
        }
        var d = true;
        var e = true;
        switch (c) {
            case "Brushes":
            case "Outlines":
                d = e = false;
                break;
        }
        if (this.indicatorCharts != null && d) {
            try {
                for (var _b = __values(fromEnum(this.indicatorCharts)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var f = _c.value;
                    a(f);
                }
            }
            catch (e_13_1) {
                e_13 = { error: e_13_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_13)
                        throw e_13.error;
                }
            }
        }
        if (this.volumeChart != null && e) {
            a(this.volumeChart);
        }
        if (this.zoomSliderChart != null) {
            a(this.zoomSliderChart);
        }
    };
    FinancialChart.prototype.akf = function (a, b) {
        var c = b;
        var d = a;
        var e = -1;
        if (this.indicatorCharts != null) {
            e = this.indicatorCharts.indexOf(d.cb);
        }
        e -= this.ads == null ? 0 : this.ads.count;
        if (this.applyCustomIndicators != null) {
            this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
        }
    };
    FinancialChart.prototype.alc = function (a, b, c) {
        if (a != null) {
            if (b != null) {
                a.axes.remove(b);
            }
            a.axes.add(c);
        }
        if (this.e9) {
            this.aan(c);
        }
    };
    Object.defineProperty(FinancialChart.prototype, "afk", {
        get: function () {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.akg = function (a, b) {
        this.alg();
    };
    FinancialChart.prototype.afb = function (a, b) {
        if (b <= (0)) {
            return false;
        }
        switch (a) {
            case 5: return true;
            case 4:
            case 3: return b >= timeSpanFromDays(365);
            case 2: return b >= timeSpanFromDays(180);
            case 1: return b >= timeSpanFromDays(90);
            case 0: return b >= timeSpanFromDays(30);
        }
        return false;
    };
    FinancialChart.prototype.ak6 = function () {
        var e_14, _a;
        var a = this.ada != null ? this.ada : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
        var b = new FinancialChartRangeSelectorOptionCollection(0);
        var c = this.xAxis;
        var d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
        try {
            for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                if (this.afb(e, d)) {
                    b.add(e);
                }
            }
        }
        catch (e_14_1) {
            e_14 = { error: e_14_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_14)
                    throw e_14.error;
            }
        }
        this.ac9 = b;
        if (this.adc != null) {
            this.adc.u = this.ac9;
        }
    };
    FinancialChart.prototype.akk = function (a, b) {
        this.ak6();
    };
    FinancialChart.prototype.akp = function (a, b) {
        this.adu = this.adc.ag;
    };
    FinancialChart.prototype.ako = function (a, b) {
        this.ads = this.adc.ae;
    };
    FinancialChart.prototype.aki = function (a, b) {
        this.alg();
    };
    FinancialChart.prototype.akj = function (a, b) {
        this.ali();
    };
    FinancialChart.prototype.akt = function (a, b) {
        var c = a;
        if (c.bf == null) {
            return;
        }
        if (this.afd) {
            this.ak5(c.bf);
        }
    };
    FinancialChart.prototype.akw = function (a) {
        SyncManager.e(a);
        a.axes.clear();
        a.series.clear();
        a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.akh));
        a.provideContainer(null);
        if (this.volumeChart == null && this.indicatorCharts == null) {
            this.yAxis.er = this.volumeAxis.er = this.indicatorAxis.er = 0;
            this.xAxis.ay.visibility = this.acb;
        }
    };
    FinancialChart.prototype.aku = function (a) {
        var b = a != this.zoomSliderChart;
        if (b) {
            if (this.dataChart != null) {
                a.tp = new Rect(0, this.dataChart.s9.x, a.tp.y, this.dataChart.s9.width, a.tp.height);
            }
            var c = ((function () {
                var $ret = new SyncSettings();
                $ret.syncChannel = "one";
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = false;
                return $ret;
            })());
            SyncManager.d(a, c);
            SyncManager.c(a);
        }
        a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.akh));
        this.rm(a);
    };
    FinancialChart.prototype.aj5 = function () {
        if (this.indicatorCharts != null || this.volumeChart != null) {
            this.aal(this.xAxis, function (a) { return a.visibility = 1; });
        }
        var _loop_1 = function (a) {
            var b = this_1.afs._inner[a];
            var c = a < this_1.afs.count - 1 || this_1.volumeChart != null;
            this_1.aal(b, function (d) { return d.visibility = c ? 1 : 0; });
        };
        var this_1 = this;
        for (var a = 0; a < this.afs.count; a++) {
            _loop_1(a);
        }
    };
    FinancialChart.prototype.ala = function (a, b) {
        if (a != null) {
            this.akw(a);
        }
        if (b != null) {
            this.aku(b);
        }
    };
    FinancialChart.prototype.alm = function (a, b) {
        this.ala(a, b);
        this.aj5();
        if (this.volumeChart != null) {
            if (this.volumeAxis != null) {
                this.volumeChart.axes.add(this.volumeAxis);
                this.volumeChart.axes.add(this.volumeXAxis);
            }
            this.ak2();
            this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
        }
        this.aln(a, b);
    };
    FinancialChart.prototype.akl = function (a, b) {
        this.alk();
    };
    FinancialChart.prototype.alk = function () {
        if (this.adc == null || +(this.adc.au) == +(dateMaxValue()) || +(this.adc.at) == +(dateMinValue()) || this.dataChart == null) {
            return;
        }
        var a = this.xAxis;
        var b = a.getWindowRectForSelection(this.adc.au, this.adc.at);
        if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
            return;
        }
        this.afe = true;
        this.dataChart.tp = new Rect(0, b.left, this.dataChart.tp.top, b.width, this.dataChart.tp.height);
        if (this.aeu != null) {
            this.aeu.windowRect = this.dataChart.s9;
        }
        if (this.afd) {
            this.ak5(this.dataChart);
        }
        this.afe = false;
    };
    FinancialChart.prototype.aks = function (a, b) {
        this.ak6();
        this.alj(!this.afe);
    };
    FinancialChart.prototype.ake = function (a, b) {
        var _this = this;
        if (!this.afe) {
            if (this.afd) {
                this.ak5(a);
            }
            var c = false;
            var d = this.si(function () { return _this.alj(true); }, c);
            c = d.p1;
            if (this.aeu != null) {
                this.aeu.windowRect = this.dataChart.s9;
            }
        }
    };
    FinancialChart.prototype.ale = function (a, b, c, d) {
        var e_15, _a;
        if (a == null || b == null) {
            return;
        }
        if (c != -1) {
            this.afe = true;
            a.tp = new Rect(0, d, a.s9.top, c, a.s9.height);
            this.afe = false;
        }
        var e = 1.7976931348623157E+308;
        var f = -1.7976931348623157E+308;
        var g = new Rect(0, 0, 0, 1, 1);
        var h = new ScalerParams(0, g, g, this.yAxis.cg, a.td);
        try {
            for (var _b = __values(fromEnum(a.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                h.b = i.ge();
                var j = i.aq(a.s9);
                var k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                var l = b.ei(j.c, h);
                var m = b.ei(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
        }
        catch (e_15_1) {
            e_15 = { error: e_15_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_15)
                    throw e_15.error;
            }
        }
        var n = a.s9.width;
        if (c != -1) {
            n = c;
        }
        var o = a.s9.left;
        if (d != -1) {
            o = d;
        }
        if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
            return;
        }
        this.afe = true;
        var p = new Rect(0, o, e, n, f - e);
        a.tp = p;
        this.afe = false;
    };
    FinancialChart.prototype.ald = function (a) {
        if (a == null) {
            return;
        }
        if (a == this.dataChart) {
            this.ale(this.dataChart, this.yAxis, -1, -1);
            if (this.volumeChart != null) {
                this.ale(this.volumeChart, this.volumeAxis, this.dataChart.s9.width, this.dataChart.s9.left);
            }
        }
        else if (a == this.volumeChart) {
            this.ale(this.volumeChart, this.volumeAxis, -1, -1);
            this.ale(this.dataChart, this.yAxis, this.volumeChart.s9.width, this.volumeChart.s9.left);
        }
    };
    FinancialChart.prototype.ak5 = function (a) {
        var _this = this;
        this.sh(function () { return _this.ald(a); });
    };
    FinancialChart.prototype.akm = function (a, b) {
        if (this.afd) {
            this.ak5(a);
        }
    };
    FinancialChart.prototype.all = function () {
        if (!this.afl) {
            return;
        }
        this.aj8();
        if (this.adq == 0) {
            this.zoomSliderChart = null;
        }
        else if (this.zoomSliderChart == null) {
            this.zoomSliderChart = ((function () {
                var $ret = new XamDataChart();
                $ret.name = "ZoomSliderChart";
                return $ret;
            })());
        }
        else {
            this.ak3();
        }
    };
    FinancialChart.prototype.aj8 = function () {
        var container_ = this.ag2.rootWrapper.getNativeElement();
        var containerParent_ = container_.parentElement;
        if (this.aeu != null && containerParent_ != null && !this.afm) {
            this.afm = true;
            if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                var z_ = this.aeu;
                var f_ = this.externalObject;
                var sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                var sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                sliderInstance_._implementation = z_;
                sliderComponent_._staticStyling(container_, sliderInstance_, f_);
            }
        }
    };
    FinancialChart.prototype.alf = function () {
        var _this = this;
        if (this.adl != 1) {
            return;
        }
        this.aar(function (a) {
            var e_16, _a;
            var b;
            b = a.breaks;
            b.clear();
            if (_this.xAxisBreaks == null) {
                return;
            }
            try {
                for (var _b = __values(fromEnum(_this.xAxisBreaks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b.add(c);
                }
            }
            catch (e_16_1) {
                e_16 = { error: e_16_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_16)
                        throw e_16.error;
                }
            }
        });
    };
    FinancialChart.prototype.s2 = function (a, b, c) {
        _super.prototype.s2.call(this, a, b, c);
        if (this.bb.dataSeries.count > 0) {
            if (this.adl == 1 && stringIsNullOrEmpty(this.k7)) {
                this.b1.setXMemberPath(a, c.getMemberPathFor(17));
            }
            if (stringIsNullOrEmpty(this.k9)) {
                this.b1.setYMemberPath(a, this.ah4(c));
            }
            if (stringIsNullOrEmpty(this.k3)) {
                this.b1.setLabelMemberPath(a, this.ah4(c));
            }
            if (stringIsNullOrEmpty(this.k0)) {
                this.b1.setContentMemberPath(a, this.ah4(c));
            }
        }
    };
    FinancialChart.prototype.ah3 = function (a) {
        switch (a) {
            case 0: return "Absolute Volume Oscillator";
            case 1: return "Accumulation/Distribution Indicator";
            case 2: return "Average Directional Index";
            case 3: return "Average True Range Indicator";
            case 4: return "Bollinger Bandwidth";
            case 5: return "Chaikin Oscillator";
            case 6: return "Chaikin Volatility Indicator";
            case 7: return "Commodity Channel Index";
            case 8: return "Detrended Price Oscillator";
            case 9: return "Ease of Movement Indicator";
            case 10: return "Fast Stochastic Oscillator";
            case 11: return "Force Index Indicator";
            case 12: return "Full Stochastic Oscillator";
            case 13: return "Market Facilitation Index";
            case 14: return "Mass Index Indicator";
            case 15: return "Median Price Indicator";
            case 16: return "Money Flow Index";
            case 17: return "MACD Indicator";
            case 18: return "Negative Volume Index";
            case 19: return "On Balance Volume Indicator";
            case 20: return "Percentage Price Oscillator";
            case 21: return "Percentage Volume Oscillator";
            case 22: return "Positive Volume Index";
            case 23: return "Price Volume Trend";
            case 24: return "ROC - Rate of Change Indicator";
            case 25: return "RSI - Relative Strength Index";
            case 26: return "Slow Stochastic Oscillator";
            case 27: return "Standard Deviation Indicator";
            case 28: return "Stoch RSI";
            case 29: return "TRIX Indicator";
            case 30: return "Typical Price Indicator";
            case 31: return "Ultimate Oscillator";
            case 32: return "Weighted Close Indicator";
            case 33: return "Williams %R Indicator";
            default: return "Unknown";
        }
    };
    FinancialChart.prototype.aan = function (a) {
        var e_17, _a;
        var _this = this;
        _super.prototype.aan.call(this, a);
        var b = a;
        this.akv(b);
        if (a.bf != null) {
            try {
                for (var _b = __values(fromEnum(a.bf.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    if (this.ae6(c)) {
                        this.ad0.setXAxis(c, b);
                    }
                    else if (this.afa(c)) {
                        this.ady.setXAxis(c, b);
                    }
                    else if (this.ae7(c)) {
                        this.ad2.setXAxis(c, b);
                    }
                    else if (this.ae9(c)) {
                        this.ad7.setXAxis(c, b);
                    }
                }
            }
            catch (e_17_1) {
                e_17 = { error: e_17_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_17)
                        throw e_17.error;
                }
            }
        }
        this.akz(function (d) {
            d.zoomMaximumCategoryRange = _this.agm;
            d.zoomMaximumItemSpan = _this.agn;
            d.zoomToCategoryRange = _this.ago;
            d.zoomToCategoryStart = _this.agp;
            d.zoomToItemSpan = _this.agq;
        });
        var d = a == this.zoomSliderXAxis;
        if (d) {
            a.jv = this.alr;
            a.eq = this.agx;
            this.aal(a, function (e) { return e.visibility = 1; });
        }
        var e = a;
        e.minimumValue = this.afy;
        e.maximumValue = this.afx;
        a.b0 = this.afg;
    };
    FinancialChart.prototype.aap = function (a) {
        var e_18, _a;
        _super.prototype.aap.call(this, a);
        if (a.bf != null && a == this.yAxis) {
            try {
                for (var _b = __values(fromEnum(a.bf.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    if (this.ae6(b)) {
                        this.ad0.setYAxis(b, this.yAxis);
                    }
                    else if (this.afa(b)) {
                        this.ady.setYAxis(b, this.yAxis);
                    }
                    else if (this.ae7(b)) {
                        this.ad2.setYAxis(b, this.yAxis);
                    }
                    else if (this.ae9(b)) {
                        this.ad7.setYAxis(b, this.yAxis);
                    }
                }
            }
            catch (e_18_1) {
                e_18 = { error: e_18_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_18)
                        throw e_18.error;
                }
            }
        }
        a.k8 = this.afh;
        a.l3 = this.agv;
        a.l2 = this.agu;
        if (a == this.yAxis) {
            a.lz = this.agt;
        }
        var c = a == this.zoomSliderAxis;
        if (c) {
            this.aal(a, function (d) { return d.visibility = 1; });
        }
        a.b0 = this.afi;
    };
    FinancialChart.prototype.akv = function (a) {
        a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
        a.fz = XYChart.ya(a, this.bb.dataSeries);
        if (this.bb.dataSeries.count > 0) {
            var b = this.bb.dataSeries._inner[0].getMemberPathFor(17);
            a.hx(b);
        }
    };
    FinancialChart.prototype.rs = function (a, b) {
        _super.prototype.rs.call(this, a, b);
        if (a == null) {
            return;
        }
        var c = this.zoomSliderChart == a.cb;
        var d = this.dataChart != null && this.dataChart.series.contains(a);
        if ((d || c) && a.d4) {
            a.mq(this.acn != null ? ArrayExtension.getModulus$1(Brush.$, this.acn, b) : null, this.aco != null ? ArrayExtension.getModulus$1(Brush.$, this.aco, b) : null);
        }
        var e = this.ae7(a);
        if (this.ae9(a)) {
            a.o7 = this.acp != null ? ArrayExtension.getModulus$1(Brush.$, this.acp, b) : null;
            a.pc = this.acq != null ? ArrayExtension.getModulus$1(Brush.$, this.acq, b) : null;
            a.g1 = this.agj;
        }
        else if (e) {
            a.o7 = this.acl != null ? ArrayExtension.getModulus$1(Brush.$, this.acl, b) : null;
            a.g1 = this.agh;
        }
        else if (!a.dc && (d || c)) {
            a.o7 = this.aa != null ? ArrayExtension.getModulus$1(Brush.$, this.aa, b) : null;
            a.pc = this.ae != null ? ArrayExtension.getModulus$1(Brush.$, this.ae, b) : null;
        }
        var f = this.volumeChart != null && this.volumeChart == a.cb;
        if (f) {
            a.g1 = this.agl;
        }
        a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.ae8 ? this.adw : null;
    };
    FinancialChart.prototype.sd = function (a, b, c) {
        var e_19, _a, e_20, _b;
        var _this = this;
        _super.prototype.sd.call(this, a, b, c);
        switch (a) {
            case "YAxisIsLogarithmic":
                this.yAxis.lg = this.afj;
                if (this.volumeAxis != null) {
                    this.volumeAxis.lg = this.afj;
                }
                if (this.zoomSliderAxis != null) {
                    this.zoomSliderAxis.lg = this.afj;
                }
                break;
            case "YAxisLogarithmBase":
                this.yAxis.l7 = this.ahh;
                if (this.volumeAxis != null) {
                    this.volumeAxis.l7 = this.ahh;
                }
                if (this.zoomSliderAxis != null) {
                    this.zoomSliderAxis.l7 = this.ahh;
                }
                break;
            case "VolumeType":
                var d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                if (this.adj == 0) {
                    this.volumeChart = null;
                }
                else if (this.volumeChart == null) {
                    this.volumeChart = ((function () {
                        var $ret = new XamDataChart();
                        $ret.name = "VolumeChart";
                        return $ret;
                    })());
                }
                else {
                    this.ak2();
                }
                break;
            case "VolumeChart":
                this.alm(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                break;
            case "DataChart":
                if (typeCast(XamDataChart.$, b) !== null) {
                    var e = b;
                    e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.akh));
                    e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.ake));
                    e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.akm));
                }
                if (this.dataChart != null) {
                    var f = this.dataChart;
                    f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.akh));
                    var g = this.dataChart;
                    g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.ake));
                    var h = this.dataChart;
                    h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.akm));
                }
                this.all();
                break;
            case "XAxisMode":
                this.xAxis = this.acy(this.adl);
                this.xAxis.name = "xAxis";
                this.volumeXAxis = this.acy(this.adl);
                this.volumeXAxis.name = "volumeXAxis";
                this.indicatorXAxis = this.acy(this.adl);
                this.indicatorXAxis.name = "indicatorXAxis_0";
                this.zoomSliderXAxis = this.acy(this.adl);
                this.zoomSliderXAxis.name = "zoomSliderXAxis";
                this.aal(this.zoomSliderXAxis, function (i) { return i.visibility = 1; });
                this.aj5();
                if (this.adl == 1) {
                    this.alf();
                }
                break;
            case "YAxisMode":
                this.yAxis = this.aec(this.adn);
                this.yAxis.name = "yAxis";
                this.zoomSliderAxis = this.aec(this.adn);
                this.zoomSliderAxis.name = "zoomSliderAxis";
                this.volumeAxis = this.aec(this.adn);
                this.volumeAxis.name = "volumeAxis";
                break;
            case "Toolbar":
                var i = typeCast(FinancialChartToolbar.$, b);
                if (i != null) {
                    i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.akl));
                    i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.ako));
                    i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.akp));
                }
                if (this.adc != null) {
                    this.adc.ae = this.ads;
                    this.adc.ag = this.adu;
                    this.adc.u = this.ac9;
                    this.alj(true);
                    var j = this.adc;
                    j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.akl));
                    var k = this.adc;
                    k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.ako));
                    var l = this.adc;
                    l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.akp));
                }
                break;
            case "XAxis":
                var m = typeCast(CategoryAxisBase.$, b);
                if (m != null) {
                    if (this.dataChart != null) {
                        this.dataChart.axes.remove(m);
                    }
                }
                var n = typeCast(ITimeRangeSelectorAxis_$type, b);
                if (n != null) {
                    n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.aks));
                }
                if (this.dataChart != null) {
                    this.dataChart.axes.add(this.xAxis);
                }
                if (this.e9) {
                    this.aan(this.xAxis);
                    this.ra();
                }
                this.alj(false);
                this.alk();
                this.ak6();
                var o = this.xAxis;
                o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.aks));
                break;
            case "XAxisZoomMaximumCategoryRange":
                this.akz(function (p) { return p.zoomMaximumCategoryRange = _this.agm; });
                break;
            case "XAxisZoomMaximumItemSpan":
                this.akz(function (p) { return p.zoomMaximumItemSpan = _this.agn; });
                break;
            case "XAxisZoomToCategoryRange":
                this.akz(function (p) { return p.zoomToCategoryRange = _this.ago; });
                break;
            case "XAxisZoomToCategoryStart":
                this.akz(function (p) { return p.zoomToCategoryStart = _this.agp; });
                break;
            case "XAxisZoomToItemSpan":
                this.akz(function (p) { return p.zoomToItemSpan = _this.agq; });
                break;
            case "ChartType":
                this.sx();
                break;
            case "VolumeXAxis":
                this.alc(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                break;
            case "ZoomSliderXAxis":
                this.alc(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                break;
            case "IndicatorXAxis":
                this.alg();
                break;
            case "YAxis":
                var p = typeCast(NumericYAxis.$, b);
                if (p != null) {
                    if (this.dataChart != null) {
                        this.dataChart.axes.remove(p);
                    }
                }
                if (this.dataChart != null) {
                    this.dataChart.axes.add(this.yAxis);
                }
                if (this.e9) {
                    this.aap(this.yAxis);
                    this.aap(this.yAxis);
                }
                var q = this.yAxis;
                q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.akt));
                break;
            case "VolumeAxis":
                var r = typeCast(Axis.$, b);
                if (this.volumeChart != null && r != null) {
                    this.volumeChart.axes.remove(r);
                }
                if (this.volumeChart != null && this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.ak2();
                }
                if (this.e9) {
                    this.aap(this.volumeAxis);
                }
                var s = this.volumeAxis;
                s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.akt));
                break;
            case "IndicatorAxis":
                if (this.indicatorCharts != null) {
                    for (var t = 0; t < this.indicatorCharts.count; t++) {
                        var u = this.indicatorCharts._inner[t];
                        var v = new List$1(Axis.$, 0);
                        try {
                            for (var _c = (e_19 = void 0, __values(fromEnum(u.axes))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var w = _d.value;
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                        }
                        catch (e_19_1) {
                            e_19 = { error: e_19_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            }
                            finally {
                                if (e_19)
                                    throw e_19.error;
                            }
                        }
                        try {
                            for (var _e = (e_20 = void 0, __values(fromEnum(v))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var x = _f.value;
                                u.axes.remove(x);
                            }
                        }
                        catch (e_20_1) {
                            e_20 = { error: e_20_1 };
                        }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return))
                                    _b.call(_e);
                            }
                            finally {
                                if (e_20)
                                    throw e_20.error;
                            }
                        }
                        var y = null;
                        if (t == 0) {
                            y = this.indicatorAxis;
                        }
                        else if (this.adn == 1) {
                            y = this.aec(this.adn);
                        }
                        else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                            y = new NumericYAxis();
                        }
                        if (y != null) {
                            u.axes.add(y);
                        }
                        if (this.e9) {
                            this.aap(y);
                        }
                    }
                }
                break;
            case "IsWindowSyncedToVisibleRange":
                if (this.dataChart != null) {
                    this.dataChart.un = this.fy && this.fx;
                }
                if (this.volumeChart != null) {
                    this.volumeChart.un = this.fy && this.fx;
                }
                if (this.afd) {
                    this.ald(this.dataChart);
                }
                else {
                    this.volumeChart.vu = 1;
                }
                break;
            case "IndicatorTypes":
                var z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                if (z != null) {
                    z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.aki));
                }
                var aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                if (aa != null) {
                    aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.aki));
                }
                this.alg();
                break;
            case "OverlayTypes":
                var ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                if (ab != null) {
                    ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.akj));
                }
                var ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                if (ac != null) {
                    ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.akj));
                }
                this.ali();
                break;
            case "YAxisAbbreviateLargeNumbers":
                this.aaw(function (ad) { return ad.k8 = _this.afh; });
                break;
            case "YAxisMinimumValue":
                this.aax(function (ad) { return ad.l3 = _this.agv; }, false);
                break;
            case "YAxisMaximumValue":
                this.aax(function (ad) { return ad.l2 = _this.agu; }, false);
                break;
            case "YAxisInterval":
                this.aax(function (ad) { return ad.lz = _this.agt; }, false);
                break;
            case "Thickness":
            case "ZoomSliderType":
                this.all();
                break;
            case "ZoomSliderChart":
                if (!this.afk) {
                    return;
                }
                this.alo(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                break;
            case "NegativeBrushes":
            case "NegativeOutlines":
                this.akb(function (ad, ae) {
                    if (ad.d4) {
                        ad.mq(_this.acn != null ? ArrayExtension.getModulus$1(Brush.$, _this.acn, ae) : null, _this.aco != null ? ArrayExtension.getModulus$1(Brush.$, _this.aco, ae) : null);
                    }
                }, true);
                break;
            case "OverlayBrushes":
                this.aka(function (ad, ae) { return ad.o7 = _this.acp != null ? ArrayExtension.getModulus$1(Brush.$, _this.acp, ae) : null; });
                break;
            case "OverlayOutlines":
                this.aka(function (ad, ae) { return ad.pc = _this.acq != null ? ArrayExtension.getModulus$1(Brush.$, _this.acq, ae) : null; });
                break;
            case "OverlayThickness":
                this.aka(function (ad, ae) { return ad.g1 = _this.agj; });
                break;
            case "OverlayMultiplier":
                this.aka(function (ad, ae) { return _this.ad7.setMultiplier(ad, _this.agi); });
                break;
            case "VolumeBrushes":
                this.akc(function (ad, ae) { return ad.o7 = ArrayExtension.getModulus$1(Brush.$, _this.acr, ae); });
                break;
            case "VolumeOutlines":
                this.akc(function (ad, ae) { return ad.pc = ArrayExtension.getModulus$1(Brush.$, _this.acs, ae); });
                break;
            case "VolumeThickness":
                this.akc(function (ad, ae) { return ad.g1 = _this.agl; });
                break;
            case "IndicatorNegativeBrushes":
                this.aj9(function (ad, ae) { return _this.ad2.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, _this.acm, ae)); });
                break;
            case "IndicatorBrushes":
                this.aj9(function (ad, ae) { return ad.o7 = ArrayExtension.getModulus$1(Brush.$, _this.acl, ae); });
                break;
            case "IndicatorThickness":
                this.aj9(function (ad, ae) { return ad.g1 = _this.agh; });
                break;
            case "IndicatorDisplayTypes":
                this.aj9(function (ad, ae) { return _this.ad2.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, _this.ad4, ae)); });
                break;
            case "IndicatorPeriod":
                this.aj9(function (ad, ae) {
                    if (_this.ahc == -2147483648) {
                        return;
                    }
                    _this.ad2.setPeriodOverride(ad, _this.ahc);
                });
                break;
            case "IndicatorMultiplier":
                this.aj9(function (ad, ae) { return _this.ad2.setMultiplier(ad, _this.agg); });
                break;
            case "IndicatorSmoothingPeriod":
                this.aj9(function (ad, ae) { return _this.ad2.setSmoothingPeriod(ad, _this.ahf); });
                break;
            case "IndicatorShortPeriod":
                this.aj9(function (ad, ae) { return _this.ad2.setShortPeriod(ad, _this.ahd); });
                break;
            case "IndicatorLongPeriod":
                this.aj9(function (ad, ae) { return _this.ad2.setLongPeriod(ad, _this.ahb); });
                break;
            case "IndicatorSignalPeriod":
                this.aj9(function (ad, ae) { return _this.ad2.setSignalPeriod(ad, _this.ahe); });
                break;
            case "RangeSelectorOptions":
                var ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                if (ad != null) {
                    ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.akk));
                }
                if (this.ada != null) {
                    var ae = this.ada;
                    ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.akk));
                }
                this.ak6();
                break;
            case "CustomIndicatorNames":
                var af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                if (af != null) {
                    af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.akg));
                }
                if (this.customIndicatorNames != null) {
                    var ag = this.customIndicatorNames;
                    ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.akg));
                }
                this.alg();
                break;
            case "Legend":
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.legend = null;
                }
                break;
            case "Brushes":
                this.akb(function (ah, ai) { return ah.o7 = _this.aa != null ? ArrayExtension.getModulus$1(Brush.$, _this.aa, ai) : null; }, true);
                break;
            case "Outlines":
                this.akb(function (ah, ai) { return ah.pc = _this.ae != null ? ArrayExtension.getModulus$1(Brush.$, _this.ae, ai) : null; }, true);
                break;
            case "XAxisLabelVisibility":
                if (this.acb == 0 && this.zoomSliderXAxis != null) {
                    this.aal(this.zoomSliderXAxis, function (ah) { return ah.visibility = 1; });
                }
                this.aj5();
                break;
            case "YAxisLabelVisibility":
                if (this.acc != 0 || this.zoomSliderAxis == null) {
                    break;
                }
                this.aal(this.zoomSliderAxis, function (ah) { return ah.visibility = 1; });
                break;
            case "ZoomSliderXAxisMajorStroke":
                this.zoomSliderXAxis.jv = this.alr;
                break;
            case "ZoomSliderXAxisMajorStrokeThickness":
                this.zoomSliderXAxis.eq = this.agx;
                break;
            case "FinancialChartLegend":
            case "IsLegendVisible":
                var ah_1 = this.ae8 && this.legend == null;
                {
                    var ai = function (aj, ak) {
                        if (aj.isUsableInLegend) {
                            aj.legend = ah_1 ? _this.adw : null;
                        }
                    };
                    this.akb(ai, false);
                    this.aka(ai);
                }
                break;
            case "ZoomSliderAxis":
                var aj = typeCast(Axis.$, b);
                if (aj != null && this.zoomSliderChart != null) {
                    this.zoomSliderChart.axes.remove(aj);
                }
                if (this.zoomSliderAxis != null) {
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                        this.ak3();
                        this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                    }
                    if (this.e9) {
                        this.aap(this.zoomSliderAxis);
                    }
                    this.aal(this.zoomSliderAxis, function (ak) { return ak.visibility = 1; });
                }
                break;
            case "XAxisMinimumValue":
                this.aar(function (ak) {
                    var al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                    if (al != null) {
                        al.minimumValue = _this.afy;
                    }
                });
                break;
            case "XAxisMaximumValue":
                this.aar(function (ak) {
                    var al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                    if (al != null) {
                        al.maximumValue = _this.afx;
                    }
                });
                break;
            case FinancialChart.ajc:
                this.aas(function (ak) { return ak.b0 = _this.afg; }, a);
                break;
            case FinancialChart.ajn:
                this.aaw(function (ak) { return ak.b0 = _this.afi; });
                break;
        }
    };
    FinancialChart.prototype.get_bz = function () {
        return 1;
    };
    Object.defineProperty(FinancialChart.prototype, "bz", {
        get: function () {
            return this.get_bz();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afj", {
        get: function () {
            return this.ae1;
        },
        set: function (a) {
            var b = this.afj;
            if (a != b) {
                this.ae1 = a;
                this.sd("YAxisIsLogarithmic", b, this.afj);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahh", {
        get: function () {
            return this.ag9;
        },
        set: function (a) {
            var b = this.ahh;
            if (a != b) {
                this.ag9 = a;
                this.sd("YAxisLogarithmBase", b, this.ahh);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agt", {
        get: function () {
            return this.aga;
        },
        set: function (a) {
            var b = this.agt;
            if (a != b) {
                this.aga = a;
                this.sd("YAxisInterval", b, this.agt);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agv", {
        get: function () {
            return this.agc;
        },
        set: function (a) {
            var b = this.agv;
            if (a != b) {
                this.agc = a;
                this.sd("YAxisMinimumValue", b, this.agv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agu", {
        get: function () {
            return this.agb;
        },
        set: function (a) {
            var b = this.agu;
            if (a != b) {
                this.agb = a;
                this.sd("YAxisMaximumValue", b, this.agu);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agw", {
        get: function () {
            return this.agd;
        },
        set: function (a) {
            var b = this.agw;
            if (a != b) {
                this.agd = a;
                this.sd("YAxisMinorInterval", b, this.agw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ags", {
        get: function () {
            return this.yAxis.lv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agr", {
        get: function () {
            return this.yAxis.lu;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adj", {
        get: function () {
            return this.adh;
        },
        set: function (a) {
            var b = this.adj;
            if (a != b) {
                this.adh = a;
                this.sd("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.adj));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adl", {
        get: function () {
            return this.adk;
        },
        set: function (a) {
            var b = this.adl;
            if (a != b) {
                this.adk = a;
                this.sd("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.adl));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agm", {
        get: function () {
            return this.af5;
        },
        set: function (a) {
            var b = this.agm;
            if (a != b) {
                this.af5 = a;
                this.sd("XAxisZoomMaximumCategoryRange", b, this.agm);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agp", {
        get: function () {
            return this.af8;
        },
        set: function (a) {
            var b = this.agp;
            if (a != b) {
                this.af8 = a;
                this.sd("XAxisZoomToCategoryStart", b, this.agp);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agn", {
        get: function () {
            return this.af6;
        },
        set: function (a) {
            var b = this.agn;
            if (a != b) {
                this.af6 = a;
                this.sd("XAxisZoomMaximumItemSpan", b, this.agn);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ago", {
        get: function () {
            return this.af7;
        },
        set: function (a) {
            var b = this.ago;
            if (a != b) {
                this.af7 = a;
                this.sd("XAxisZoomToCategoryRange", b, this.ago);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agq", {
        get: function () {
            return this.af9;
        },
        set: function (a) {
            var b = this.agq;
            if (a != b) {
                this.af9 = a;
                this.sd("XAxisZoomToItemSpan", b, this.agq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adn", {
        get: function () {
            return this.adm;
        },
        set: function (a) {
            var b = this.adn;
            if (a != b) {
                this.adm = a;
                this.sd("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.adn));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afc", {
        get: function () {
            return this.aew;
        },
        set: function (a) {
            var b = this.afc;
            if (a != b) {
                this.aew = a;
                this.sd("IsToolbarVisible", b, this.afc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ade", {
        get: function () {
            return this.add;
        },
        set: function (a) {
            var b = this.ade;
            if (a != b) {
                this.add = a;
                this.sd("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.ade));
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_aa6 = function () {
        return _super.prototype.get_aa6.call(this);
    };
    FinancialChart.prototype.set_aa6 = function (a) {
        _super.prototype.set_aa6.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "afd", {
        get: function () {
            return this.aex;
        },
        set: function (a) {
            var b = this.afd;
            if (a != b) {
                this.aex = a;
                this.sd("IsWindowSyncedToVisibleRange", b, this.afd);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ads", {
        get: function () {
            return this.adr;
        },
        set: function (a) {
            var b = this.ads;
            if (a != b) {
                this.adr = a;
                this.sd("IndicatorTypes", b, this.ads);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adu", {
        get: function () {
            return this.adt;
        },
        set: function (a) {
            var b = this.adu;
            if (a != b) {
                this.adt = a;
                this.sd("OverlayTypes", b, this.adu);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorCharts", {
        get: function () {
            return this.afo;
        },
        set: function (a) {
            var b = this.indicatorCharts;
            if (a != b) {
                this.afo = a;
                this.sd("IndicatorCharts", b, this.indicatorCharts);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afh", {
        get: function () {
            return this.aez;
        },
        set: function (a) {
            var b = this.afh;
            if (a != b) {
                this.aez = a;
                this.sd("YAxisAbbreviateLargeNumbers", b, this.afh);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_ih = function () {
        return _super.prototype.get_ih.call(this);
    };
    FinancialChart.prototype.set_ih = function (a) {
        _super.prototype.set_ih.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "afg", {
        get: function () {
            return this.aey;
        },
        set: function (a) {
            var b = this.afg;
            if (a != b) {
                this.aey = a;
                this.sd(FinancialChart.ajc, b, this.afg);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afi", {
        get: function () {
            return this.ae0;
        },
        set: function (a) {
            var b = this.afi;
            if (a != b) {
                this.ae0 = a;
                this.sd(FinancialChart.ajn, b, this.afi);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderChart", {
        get: function () {
            return this.aeq;
        },
        set: function (a) {
            var b = this.zoomSliderChart;
            if (a != b) {
                this.aeq = a;
                this.sd("ZoomSliderChart", b, this.zoomSliderChart);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderAxis", {
        get: function () {
            return this.aeb;
        },
        set: function (a) {
            var b = this.zoomSliderAxis;
            if (a != b) {
                this.aeb = a;
                this.sd("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderXAxis", {
        get: function () {
            return this.acw;
        },
        set: function (a) {
            var b = this.zoomSliderXAxis;
            if (a != b) {
                this.acw = a;
                this.sd("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adq", {
        get: function () {
            return this.ado;
        },
        set: function (a) {
            var b = this.adq;
            if (a != b) {
                this.ado = a;
                this.sd("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.adq));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acn", {
        get: function () {
            return this.acf;
        },
        set: function (a) {
            var b = this.acn;
            if (a != b) {
                this.acf = a;
                this.sd("NegativeBrushes", b, this.acn);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aco", {
        get: function () {
            return this.acg;
        },
        set: function (a) {
            var b = this.aco;
            if (a != b) {
                this.acg = a;
                this.sd("NegativeOutlines", b, this.aco);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acp", {
        get: function () {
            return this.ach;
        },
        set: function (a) {
            var b = this.acp;
            if (a != b) {
                this.ach = a;
                this.sd("OverlayBrushes", b, this.acp);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acq", {
        get: function () {
            return this.aci;
        },
        set: function (a) {
            var b = this.acq;
            if (a != b) {
                this.aci = a;
                this.sd("OverlayOutlines", b, this.acq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acs", {
        get: function () {
            return this.ack;
        },
        set: function (a) {
            var b = this.acs;
            if (a != b) {
                this.ack = a;
                this.sd("VolumeOutlines", b, this.acs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acr", {
        get: function () {
            return this.acj;
        },
        set: function (a) {
            var b = this.acr;
            if (a != b) {
                this.acj = a;
                this.sd("VolumeBrushes", b, this.acr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acm", {
        get: function () {
            return this.ace;
        },
        set: function (a) {
            var b = this.acm;
            if (a != b) {
                this.ace = a;
                this.sd("IndicatorNegativeBrushes", b, this.acm);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "acl", {
        get: function () {
            return this.acd;
        },
        set: function (a) {
            var b = this.acl;
            if (a != b) {
                this.acd = a;
                this.sd("IndicatorBrushes", b, this.acl);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agl", {
        get: function () {
            return this.af4;
        },
        set: function (a) {
            var b = this.agl;
            if (a != b) {
                this.af4 = a;
                this.sd("VolumeThickness", b, this.agl);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agj", {
        get: function () {
            return this.af2;
        },
        set: function (a) {
            var b = this.agj;
            if (a != b) {
                this.af2 = a;
                this.sd("OverlayThickness", b, this.agj);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agi", {
        get: function () {
            return this.af1;
        },
        set: function (a) {
            var b = this.agi;
            if (a != b) {
                this.af1 = a;
                this.sd("OverlayMultiplier", b, this.agi);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agh", {
        get: function () {
            return this.af0;
        },
        set: function (a) {
            var b = this.agh;
            if (a != b) {
                this.af0 = a;
                this.sd("IndicatorThickness", b, this.agh);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad4", {
        get: function () {
            return this.ad3;
        },
        set: function (a) {
            var b = this.ad4;
            if (a != b) {
                this.ad3 = a;
                this.sd("IndicatorDisplayTypes", b, this.ad4);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahc", {
        get: function () {
            return this.ag5;
        },
        set: function (a) {
            var b = this.ahc;
            if (a != b) {
                this.ag5 = a;
                this.sd("IndicatorPeriod", b, this.ahc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agg", {
        get: function () {
            return this.afz;
        },
        set: function (a) {
            var b = this.agg;
            if (a != b) {
                this.afz = a;
                this.sd("IndicatorMultiplier", b, this.agg);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahf", {
        get: function () {
            return this.ag8;
        },
        set: function (a) {
            var b = this.ahf;
            if (a != b) {
                this.ag8 = a;
                this.sd("IndicatorSmoothingPeriod", b, this.ahf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahd", {
        get: function () {
            return this.ag6;
        },
        set: function (a) {
            var b = this.ahd;
            if (a != b) {
                this.ag6 = a;
                this.sd("IndicatorShortPeriod", b, this.ahd);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahb", {
        get: function () {
            return this.ag4;
        },
        set: function (a) {
            var b = this.ahb;
            if (a != b) {
                this.ag4 = a;
                this.sd("IndicatorLongPeriod", b, this.ahb);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahe", {
        get: function () {
            return this.ag7;
        },
        set: function (a) {
            var b = this.ahe;
            if (a != b) {
                this.ag7 = a;
                this.sd("IndicatorSignalPeriod", b, this.ahe);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ada", {
        get: function () {
            return this.ac8;
        },
        set: function (a) {
            var b = this.ada;
            if (a != b) {
                this.ac8 = a;
                this.sd("RangeSelectorOptions", b, this.ada);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "customIndicatorNames", {
        get: function () {
            return this.ac4;
        },
        set: function (a) {
            var b = this.ac4;
            if (a != b) {
                this.ac4 = a;
                this.sd("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_fy = function () {
        return _super.prototype.get_fy.call(this);
    };
    FinancialChart.prototype.set_fy = function (a) {
        _super.prototype.set_fy.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "alr", {
        get: function () {
            return this.alq;
        },
        set: function (a) {
            var b = this.alr;
            if (a != b) {
                this.alq = a;
                this.sd("ZoomSliderXAxisMajorStroke", b, this.alr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agx", {
        get: function () {
            return this.age;
        },
        set: function (a) {
            var b = this.agx;
            if (a != b) {
                this.age = a;
                this.sd("ZoomSliderXAxisMajorStrokeThickness", b, this.agx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ae8", {
        get: function () {
            return this.aev;
        },
        set: function (a) {
            var b = this.ae8;
            if (a != b) {
                this.aev = a;
                this.sd("IsLegendVisible", b, this.ae8);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adw", {
        get: function () {
            return this.adv;
        },
        set: function (a) {
            var b = this.adw;
            if (a != b) {
                this.adv = a;
                this.sd("FinancialChartLegend", b, this.adw);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "xAxis", {
        get: function () {
            return this.acv;
        },
        set: function (a) {
            var b = this.xAxis;
            if (a != b) {
                this.acv = a;
                this.sd("XAxis", b, this.xAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "yAxis", {
        get: function () {
            return this.aea;
        },
        set: function (a) {
            var b = this.yAxis;
            if (a != b) {
                this.aea = a;
                this.sd("YAxis", b, this.yAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "volumeAxis", {
        get: function () {
            return this.ad9;
        },
        set: function (a) {
            var b = this.volumeAxis;
            if (a != b) {
                this.ad9 = a;
                this.sd("VolumeAxis", b, this.volumeAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "volumeXAxis", {
        get: function () {
            return this.acu;
        },
        set: function (a) {
            var b = this.volumeXAxis;
            if (a != b) {
                this.acu = a;
                this.sd("VolumeXAxis", b, this.volumeXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorAxis", {
        get: function () {
            return this.ad8;
        },
        set: function (a) {
            var b = this.indicatorAxis;
            if (a != b) {
                this.ad8 = a;
                this.sd("IndicatorAxis", b, this.indicatorAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorXAxis", {
        get: function () {
            return this.act;
        },
        set: function (a) {
            var b = this.indicatorXAxis;
            if (a != b) {
                this.act = a;
                this.sd("IndicatorXAxis", b, this.indicatorXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afq", {
        get: function () {
            return this.afn;
        },
        set: function (a) {
            var b = this.afq;
            if (a != b) {
                this.afn = a;
                this.sd("IndicatorAxes", b, this.afq);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afs", {
        get: function () {
            return this.afp;
        },
        set: function (a) {
            var b = this.afs;
            if (a != b) {
                this.afp = a;
                this.sd("IndicatorXAxes", b, this.afs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afy", {
        get: function () {
            return this.afw;
        },
        set: function (a) {
            var b = this.afy;
            if (+a != +b) {
                this.afw = a;
                this.sd("XAxisMinimumValue", b, this.afy);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afx", {
        get: function () {
            return this.afv;
        },
        set: function (a) {
            var b = this.afx;
            if (+a != +b) {
                this.afv = a;
                this.sd("XAxisMaximumValue", b, this.afx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "xAxisBreaks", {
        get: function () {
            return this.aft;
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.$t = markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.ahg = 0;
    FinancialChart.ajc = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.ajn = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
}(XYChart));
export { FinancialChart };
/**
 * @hidden
 */
var FinancialChartToolbar = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChartToolbar, _super);
    function FinancialChartToolbar(a, b) {
        var _this = _super.call(this, "financialChartToolbar", b, "") || this;
        _this.o = null;
        _this.r = null;
        _this.z = null;
        _this.p = null;
        _this.w = null;
        _this.aq = dateMaxValue();
        _this.ap = dateMinValue();
        _this.ao = dateMaxValue();
        _this.an = dateMinValue();
        _this.rangeChanged = null;
        _this.chartTypeChanged = null;
        _this.trendLineTypeChanged = null;
        _this.volumeTypeChanged = null;
        _this.indicatorTypesChanged = null;
        _this.overlayTypesChanged = null;
        _this.x = 0;
        _this.ah = 0;
        _this.ab = 0;
        _this.ad = null;
        _this.af = null;
        _this.t = null;
        _this.ak = false;
        _this.o = a;
        _this.w = new FinancialChartToolbarViewModel();
        _this.s = new FinancialChartRangeSelector(a != null ? a.ahs : null);
        _this.aa = new FinancialChartTypePicker(a != null ? a.ahp : null);
        _this.q = new FinancialChartIndicatorMenu(1, a != null ? a.ahq : null);
        return _this;
    }
    FinancialChartToolbar.prototype.bg = function (a) {
        var b = a.querySelectorAll(".financialChartToolbarArea");
        if (b != null && b.length > 0) {
            this.g = b[0];
            if (!this.al) {
                this.g.hide();
            }
        }
        var c = a.querySelectorAll(".financialChartIndicatorMenu");
        if (c != null && c.length > 0) {
            this.q.g = c[0];
        }
        var d = a.querySelectorAll(".financialChartRangeSelector");
        if (d != null && d.length > 0) {
            this.s.g = d[0];
        }
        var e = a.querySelectorAll(".financialChartTypePicker");
        if (e != null && e.length > 0) {
            this.aa.g = e[0];
        }
    };
    FinancialChartToolbar.prototype.bl = function (a) {
        this.q.u(a);
        this.aa.u(a);
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "s", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            var b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "aa", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            var b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "q", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            var b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.prototype.bm = function (a, b, c) {
        switch (a) {
            case "RangeStart":
                if (this.s != null) {
                    this.s.t = this.as;
                }
                break;
            case "RangeEnd":
                if (this.s != null) {
                    this.s.s = this.ar;
                }
                break;
            case "SelectionStart":
                if (this.s != null) {
                    this.s.v = this.au;
                }
                break;
            case "SelectionEnd":
                if (this.s != null) {
                    this.s.u = this.at;
                }
                break;
            case "RangeSelector":
                var d = b;
                if (d != null) {
                    d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                }
                if (this.s != null) {
                    this.s.t = this.as;
                    this.s.s = this.ar;
                    this.s.o = this.u;
                    this.s.v = this.au;
                    this.s.u = this.at;
                    var e = this.s;
                    e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                }
                break;
            case "ChartTypePicker":
                var f = b;
                if (f != null) {
                    f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                }
                if (this.aa != null) {
                    this.aa.w = this.y;
                    var g = this.aa;
                    g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                }
                break;
            case "ChartType":
                if (this.aa != null) {
                    this.aa.w = this.y;
                }
                break;
            case "RangeSelectorOptions":
                if (this.s != null) {
                    this.s.o = this.u;
                }
                break;
            case "IsToolbarVisible":
                if (this.g == null) {
                    break;
                }
                if (this.al) {
                    this.g.show();
                }
                else {
                    this.g.hide();
                }
                break;
            case "IndicatorMenu":
                var h = typeCast(FinancialChartIndicatorMenu.$, b);
                if (h != null) {
                    h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                }
                if (this.q != null) {
                    var i = this.q;
                    i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                }
                break;
            case "IndicatorTypes":
                if (this.indicatorTypesChanged != null) {
                    this.indicatorTypesChanged(this, EventArgs.empty);
                }
                break;
            case "OverlayTypes":
                if (this.overlayTypesChanged != null) {
                    this.overlayTypesChanged(this, EventArgs.empty);
                }
                break;
            case "TrendLineType":
                if (this.trendLineTypeChanged != null) {
                    this.trendLineTypeChanged(this, EventArgs.empty);
                }
                break;
            case "VolumeType":
                if (this.volumeTypeChanged != null) {
                    this.volumeTypeChanged(this, EventArgs.empty);
                }
                break;
        }
    };
    FinancialChartToolbar.prototype.bh = function (a, b) {
        this.ag = this.q.z;
        this.ae = this.q.y;
        this.ai = this.q.aa;
        this.ac = this.q.x;
    };
    FinancialChartToolbar.prototype.bi = function (a, b) {
        this.y = this.aa.w;
        if (this.chartTypeChanged != null) {
            this.chartTypeChanged(this, b);
        }
    };
    FinancialChartToolbar.prototype.bj = function (a, b) {
        this.au = this.s.v;
        this.at = this.s.u;
        if (this.rangeChanged != null) {
            this.rangeChanged(this, b);
        }
    };
    FinancialChartToolbar.prototype.v = function () {
        var _this = this;
        var a = new FinancialChartToolbarContext();
        a.container = this.d;
        a.vm = this.w;
        a.vm.financialChartIndicatorMenu = ((function () {
            var $ret = new FinancialChartIndicatorMenuContext();
            $ret.vm = _this.q.p;
            return $ret;
        })());
        a.vm.financialChartTypePicker = ((function () {
            var $ret = new FinancialChartTypePickerContext();
            $ret.vm = _this.aa.p;
            return $ret;
        })());
        a.vm.financialChartRangeSelector = ((function () {
            var $ret = new FinancialChartRangeSelectorContext();
            $ret.vm = _this.s.q;
            return $ret;
        })());
        return a;
    };
    FinancialChartToolbar.prototype.l = function (a) {
        _super.prototype.l.call(this, a);
        if (a == null) {
            return;
        }
        this.s.l(a);
        this.aa.l(a);
        this.q.l(a);
        this.bk();
    };
    FinancialChartToolbar.prototype.bk = function () {
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "au", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            var b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "at", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            var b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "as", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            var b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ar", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            var b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.prototype.bn = function () {
        if (this.s != null) {
            this.s.ab();
        }
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "y", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            var b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ai", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            var b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ac", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            var b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ae", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            var b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ag", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            var b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.am = function (a, b) {
        var e_21, _a;
        if (a == b) {
            return true;
        }
        if ((a == null && b != null) || (a != null && b == null)) {
            return false;
        }
        if (a.count != b.count) {
            return false;
        }
        try {
            for (var _b = __values(fromEn(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                if (!b.contains(c)) {
                    return false;
                }
            }
        }
        catch (e_21_1) {
            e_21 = { error: e_21_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_21)
                    throw e_21.error;
            }
        }
        return true;
    };
    FinancialChartToolbar.prototype.aj = function () {
        var _this = this;
        return ((function () {
            var $ret = new FinancialChartToolbarVisualData();
            $ret.rangeSelector = _this.s == null ? null : _this.s.r();
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "u", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            var b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "al", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            var b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.$t = markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
}(TemplatedHtmlControl));
export { FinancialChartToolbar };
/**
 * @hidden
 */
var FinancialChartRangeSelector = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChartRangeSelector, _super);
    function FinancialChartRangeSelector(a) {
        var _this = _super.call(this, "financialChartRangeSelector", a, "") || this;
        _this.q = null;
        _this.rangeChanged = null;
        _this.p = null;
        _this.p = new FinancialChartRangeSelectorView();
        _this.q = new FinancialChartRangeSelectorViewModel();
        _this.q.onRangeChanged = runOn(_this, _this.z);
        _this.p.c = _this.q;
        return _this;
    }
    Object.defineProperty(FinancialChartRangeSelector.prototype, "v", {
        get: function () {
            return this.q.selectionStart;
        },
        set: function (a) {
            this.q.selectionStart = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "u", {
        get: function () {
            return this.q.selectionEnd;
        },
        set: function (a) {
            this.q.selectionEnd = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "t", {
        get: function () {
            return this.q.rangeStart;
        },
        set: function (a) {
            this.q.rangeStart = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "s", {
        get: function () {
            return this.q.rangeEnd;
        },
        set: function (a) {
            this.q.rangeEnd = a;
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartRangeSelector.prototype.ab = function () {
        if (this.q.onPropertiesChanged()) {
            this.p.g(this.q);
        }
    };
    FinancialChartRangeSelector.prototype.l = function (a) {
        _super.prototype.l.call(this, a);
        this.p.f(this.d, this.q);
    };
    FinancialChartRangeSelector.prototype.z = function () {
        if (this.rangeChanged != null) {
            this.rangeChanged(this, EventArgs.empty);
        }
    };
    FinancialChartRangeSelector.prototype.r = function () {
        return this.p.d(this.g);
    };
    Object.defineProperty(FinancialChartRangeSelector.prototype, "o", {
        get: function () {
            return this.q.options;
        },
        set: function (a) {
            var b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartRangeSelector.prototype.aa = function () {
        if (this.q != null) {
            this.q.ao();
        }
        if (this.p != null) {
            this.p.i(this.o);
        }
    };
    FinancialChartRangeSelector.$t = markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
}(TemplatedHtmlControl));
export { FinancialChartRangeSelector };
