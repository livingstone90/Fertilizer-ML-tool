import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { YAxisLabelLocation } from "./YAxisLabelLocation";
import { XAxisLabelLocation } from "./XAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class XYChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected rr(): void;
    protected se(a: string, b: any, c: any): void;
    private vi;
    get vk(): (item: any) => string;
    set vk(a: (item: any) => string);
    private vj;
    get vl(): (item: any) => string;
    set vl(a: (item: any) => string);
    private vz;
    get w1(): number;
    set w1(a: number);
    private v1;
    get w3(): number;
    set w3(a: number);
    private v0;
    get w2(): number;
    set w2(a: number);
    private vy;
    get w0(): number;
    set w0(a: number);
    private wg;
    get xi(): number;
    set xi(a: number);
    private wi;
    get xk(): number;
    set xk(a: number);
    private wh;
    get xj(): number;
    set xj(a: number);
    private wf;
    get xh(): number;
    set xh(a: number);
    private aa9;
    get abp(): Brush;
    set abp(a: Brush);
    private abg;
    get abw(): Brush;
    set abw(a: Brush);
    private aa7;
    get abn(): Brush;
    set abn(a: Brush);
    private aa8;
    get abo(): Brush;
    set abo(a: Brush);
    private wa;
    get xc(): number;
    set xc(a: number);
    private wr;
    get xt(): number;
    set xt(a: number);
    private v9;
    get xb(): number;
    set xb(a: number);
    private wq;
    get xs(): number;
    set xs(a: number);
    private wc;
    get xe(): number;
    set xe(a: number);
    private wt;
    get xv(): number;
    set xv(a: number);
    private wb;
    get xd(): number;
    set xd(a: number);
    private ws;
    get xu(): number;
    set xu(a: number);
    private v8;
    get xa(): number;
    set xa(a: number);
    private wp;
    get xr(): number;
    set xr(a: number);
    private abf;
    get abv(): Brush;
    set abv(a: Brush);
    private abm;
    get ab2(): Brush;
    set ab2(a: Brush);
    protected sf(a: string, b: any, c: any): void;
    private x1;
    get yp(): string;
    set yp(a: string);
    private x5;
    get zu(): string;
    set zu(a: string);
    private x3;
    get zd(): string;
    set zd(a: string);
    private x7;
    get aai(): string;
    set aai(a: string);
    private aao;
    private aaq;
    protected sw(a: DataSeries): void;
    protected abstract vg(): Axis;
    protected abstract vh(): Axis;
    protected aar(a: (arg1: Axis) => void): void;
    protected aas(a: (arg1: Axis) => void, b: string): void;
    protected aax(a: (arg1: Axis) => void, b: boolean): void;
    protected aaw(a: (arg1: Axis) => void): void;
    protected rb(a: (arg1: Axis) => void, b: boolean): void;
    protected aav(a: (arg1: TitleSettings) => void): void;
    protected aa0(a: (arg1: TitleSettings) => void): void;
    protected aay(a: (arg1: AxisLabelSettings) => void): void;
    protected aat(a: (arg1: AxisLabelSettings) => void): void;
    wu(a: number): number;
    ww(a: number): number;
    wv(a: number): number;
    wx(a: number): number;
    protected st(a: XamDataChart): void;
    static ya(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected rm(a: XamDataChart): void;
    protected aan(a: Axis): void;
    protected aap(a: Axis): void;
    protected rj(): void;
    protected aal(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected aam(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected sd(a: string, b: any, c: any): void;
    aaz(): void;
    aau(): void;
    vn(a: YAxisLabelLocation): AxisLabelsLocation;
    vm(a: XAxisLabelLocation): AxisLabelsLocation;
    private xw;
    get xy(): any;
    set xy(a: any);
    private xx;
    get xz(): any;
    set xz(a: any);
    private aba;
    get abq(): Brush;
    set abq(a: Brush);
    private abh;
    get abx(): Brush;
    set abx(a: Brush);
    private v2;
    get w4(): number;
    set w4(a: number);
    private wj;
    get xl(): number;
    set xl(a: number);
    private v3;
    get w5(): number;
    set w5(a: number);
    private wk;
    get xm(): number;
    set xm(a: number);
    private abc;
    get abs(): Brush;
    set abs(a: Brush);
    private abj;
    get abz(): Brush;
    set abz(a: Brush);
    private abd;
    get abt(): Brush;
    set abt(a: Brush);
    private abk;
    get ab0(): Brush;
    set ab0(a: Brush);
    private v4;
    get w6(): number;
    set w6(a: number);
    private wl;
    get xn(): number;
    set xn(a: number);
    private v5;
    get w7(): number;
    set w7(a: number);
    private wm;
    get xo(): number;
    set xo(a: number);
    private abe;
    get abu(): Brush;
    set abu(a: Brush);
    private abl;
    get ab1(): Brush;
    set ab1(a: Brush);
    private v6;
    get w8(): number;
    set w8(a: number);
    private wn;
    get xp(): number;
    set xp(a: number);
    private x2;
    get y4(): string;
    set y4(a: string);
    private x6;
    get z9(): string;
    set z9(a: string);
    private abb;
    get abr(): Brush;
    set abr(a: Brush);
    private abi;
    get aby(): Brush;
    set aby(a: Brush);
    private vx;
    get wz(): number;
    set wz(a: number);
    private we;
    get xg(): number;
    set xg(a: number);
    private vw;
    get wy(): number;
    set wy(a: number);
    private wd;
    get xf(): number;
    set xf(a: number);
    private v7;
    get w9(): number;
    set w9(a: number);
    private wo;
    get xq(): number;
    set xq(a: number);
    private vs;
    get vu(): boolean;
    set vu(a: boolean);
    private vt;
    get vv(): boolean;
    set vv(a: boolean);
    private aa2;
    get aa5(): HorizontalAlignment;
    set aa5(a: HorizontalAlignment);
    private ab5;
    get ab8(): VerticalAlignment;
    set ab8(a: VerticalAlignment);
    private aa1;
    get aa4(): HorizontalAlignment;
    set aa4(a: HorizontalAlignment);
    private aa3;
    protected get_aa6(): HorizontalAlignment;
    protected set_aa6(a: HorizontalAlignment): void;
    get aa6(): HorizontalAlignment;
    set aa6(a: HorizontalAlignment);
    private ab3;
    get ab6(): VerticalAlignment;
    set ab6(a: VerticalAlignment);
    private ab4;
    get ab7(): VerticalAlignment;
    set ab7(a: VerticalAlignment);
    private ab9;
    get acb(): Visibility;
    set acb(a: Visibility);
    private aca;
    get acc(): Visibility;
    set acc(a: Visibility);
    private vq;
    protected get_vr(): YAxisLabelLocation;
    protected set_vr(a: YAxisLabelLocation): void;
    get vr(): YAxisLabelLocation;
    set vr(a: YAxisLabelLocation);
    private vo;
    protected get_vp(): XAxisLabelLocation;
    protected set_vp(a: XAxisLabelLocation): void;
    get vp(): XAxisLabelLocation;
    set vp(a: XAxisLabelLocation);
    private x0;
    get yg(): string;
    set yg(a: string);
    private vc;
    get ve(): any[];
    set ve(a: any[]);
    private x4;
    get zl(): string;
    set zl(a: string);
    private vd;
    get vf(): any[];
    set vf(a: any[]);
}
