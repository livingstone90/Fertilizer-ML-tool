import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { IZoomableCategoryAxis } from "./IZoomableCategoryAxis";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected sf(a: string, b: any, c: any): void;
    private akr;
    private akq;
    private akn;
    private ak0;
    private ad5;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private ag3;
    private ag1;
    private agy;
    private ag0;
    private ag2;
    private agz;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private alb;
    private alp;
    private aj7;
    private aln;
    setGridRows(): void;
    protected rr(): void;
    private ak7;
    private ak8;
    private alh;
    private aj6;
    private akx;
    protected ro(a: XamDataChart): void;
    private als;
    private alv;
    private alt;
    private alu;
    agf(): number;
    rz(source_: any, a: number, b: any): void;
    r0(source_: any, a: number, b: any): void;
    ry(source_: any): void;
    r2(source_: any, a: number, b: any, c: any): void;
    protected ru(a: Series, b: number): void;
    private adb;
    private get adc();
    private set adc(value);
    private ahl;
    get ahs(): any;
    set ahs(a: any);
    private ahm;
    get aht(): any;
    set aht(a: any);
    private ahi;
    get ahp(): any;
    set ahp(a: any);
    private ahn;
    get ahu(): any;
    set ahu(a: any);
    private aho;
    get ahv(): any;
    set ahv(a: any);
    private ahj;
    get ahq(): any;
    set ahq(a: any);
    private ahk;
    get ahr(): any;
    set ahr(a: any);
    private aet;
    get aeu(): IZoomSlider;
    set aeu(a: IZoomSlider);
    protected get_h8(): number;
    protected set_h8(a: number): void;
    protected get_fs(): boolean;
    protected set_fs(a: boolean): void;
    private af3;
    get agk(): number;
    set agk(a: number);
    constructor();
    protected vg(): Axis;
    protected vh(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected ba(a: DataSeries): DataSeriesType;
    protected get_gf(): List$1<DataSeriesType>;
    protected get gf(): List$1<DataSeriesType>;
    protected get_ge(): List$1<IDataSeriesAdapterRule>;
    protected get ge(): List$1<IDataSeriesAdapterRule>;
    private acy;
    private aec;
    private acx;
    protected q5(): void;
    protected q1(a: Series, b: number): void;
    protected cm(a: Series): MarkerType;
    protected sv(a: DataSeries): void;
    protected sy(): void;
    private adg;
    private adf;
    private adp;
    private adi;
    private ah4;
    private acz;
    private aed;
    private aej;
    private aek;
    private aei;
    private ael;
    private get ae2();
    private adz;
    private get ad0();
    private get ae5();
    private adx;
    private get ady();
    private get ae3();
    private ad1;
    private get ad2();
    private get ae4();
    private ad6;
    private get ad7();
    protected cw(a: DataSeries, b: DataSeriesType): Series;
    protected sx(): void;
    protected aas(a: (arg1: Axis) => void, b: string): void;
    protected aax(a: (arg1: Axis) => void, b: boolean): void;
    protected akz(a: (arg1: IZoomableCategoryAxis) => void): void;
    protected aav(a: (arg1: TitleSettings) => void): void;
    protected aa0(a: (arg1: TitleSettings) => void): void;
    protected aay(a: (arg1: AxisLabelSettings) => void): void;
    protected aat(a: (arg1: AxisLabelSettings) => void): void;
    protected rn(a: XamDataChart): void;
    private static ahg;
    private ahw;
    private aiz;
    private akh;
    private aj3;
    private aj4;
    private aj9;
    private akc;
    private aka;
    private akb;
    private akd;
    private aha;
    protected rd(a: (arg1: Series, arg2: number) => void): void;
    private aep;
    private get volumeChart();
    private set volumeChart(value);
    private ak2;
    private ae6;
    private afa;
    private ae7;
    private ae9;
    private ak1;
    private aem;
    private aeo;
    private alj;
    jv(): any;
    ah1(): string;
    private aen;
    private ali;
    private aff;
    private alg;
    protected rk(): void;
    protected get_fx(): boolean;
    protected get afl(): boolean;
    private alo;
    private ak3;
    protected r7(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private akf;
    private alc;
    private get afk();
    private akg;
    private afb;
    private ak6;
    private akk;
    private akp;
    private ako;
    private aki;
    private akj;
    private akt;
    private akw;
    private aku;
    private aj5;
    private ala;
    private alm;
    private akl;
    private alk;
    private afe;
    private aks;
    private ake;
    private ale;
    private ald;
    private ak5;
    private akm;
    private afm;
    private all;
    private aj8;
    private alf;
    protected s2(a: Series, b: Series, c: DataSeries): void;
    private ah3;
    protected aan(a: Axis): void;
    protected aap(a: Axis): void;
    private akv;
    protected rs(a: Series, b: number): void;
    protected sd(a: string, b: any, c: any): void;
    protected get_bz(): DomainType;
    get bz(): DomainType;
    private ae1;
    get afj(): boolean;
    set afj(a: boolean);
    private ag9;
    get ahh(): number;
    set ahh(a: number);
    private aga;
    get agt(): number;
    set agt(a: number);
    private agc;
    get agv(): number;
    set agv(a: number);
    private agb;
    get agu(): number;
    set agu(a: number);
    private agd;
    get agw(): number;
    set agw(a: number);
    get ags(): number;
    get agr(): number;
    private adh;
    get adj(): FinancialChartVolumeType;
    set adj(a: FinancialChartVolumeType);
    private adk;
    get adl(): FinancialChartXAxisMode;
    set adl(a: FinancialChartXAxisMode);
    private af5;
    get agm(): number;
    set agm(a: number);
    private af8;
    get agp(): number;
    set agp(a: number);
    private af6;
    get agn(): number;
    set agn(a: number);
    private af7;
    get ago(): number;
    set ago(a: number);
    private af9;
    get agq(): number;
    set agq(a: number);
    private adm;
    get adn(): FinancialChartYAxisMode;
    set adn(a: FinancialChartYAxisMode);
    private aew;
    get afc(): boolean;
    set afc(a: boolean);
    private add;
    get ade(): FinancialChartType;
    set ade(a: FinancialChartType);
    protected get_aa6(): HorizontalAlignment;
    protected set_aa6(a: HorizontalAlignment): void;
    private aex;
    get afd(): boolean;
    set afd(a: boolean);
    private adr;
    get ads(): FinancialIndicatorTypeCollection;
    set ads(a: FinancialIndicatorTypeCollection);
    private adt;
    get adu(): FinancialOverlayTypeCollection;
    set adu(a: FinancialOverlayTypeCollection);
    private afo;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private aez;
    get afh(): boolean;
    set afh(a: boolean);
    protected get_ih(): number;
    protected set_ih(a: number): void;
    private static readonly ajc;
    private aey;
    get afg(): boolean;
    set afg(a: boolean);
    private static readonly ajn;
    private ae0;
    get afi(): boolean;
    set afi(a: boolean);
    private aeq;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private aeb;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private acw;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private ado;
    get adq(): FinancialChartZoomSliderType;
    set adq(a: FinancialChartZoomSliderType);
    private acf;
    get acn(): BrushCollection;
    set acn(a: BrushCollection);
    private acg;
    get aco(): BrushCollection;
    set aco(a: BrushCollection);
    private ach;
    get acp(): BrushCollection;
    set acp(a: BrushCollection);
    private aci;
    get acq(): BrushCollection;
    set acq(a: BrushCollection);
    private ack;
    get acs(): BrushCollection;
    set acs(a: BrushCollection);
    private acj;
    get acr(): BrushCollection;
    set acr(a: BrushCollection);
    private ace;
    get acm(): BrushCollection;
    set acm(a: BrushCollection);
    private acd;
    get acl(): BrushCollection;
    set acl(a: BrushCollection);
    private af4;
    get agl(): number;
    set agl(a: number);
    private af2;
    get agj(): number;
    set agj(a: number);
    private af1;
    get agi(): number;
    set agi(a: number);
    private af0;
    get agh(): number;
    set agh(a: number);
    private ad3;
    get ad4(): IndicatorDisplayTypeCollection;
    set ad4(a: IndicatorDisplayTypeCollection);
    private ag5;
    get ahc(): number;
    set ahc(a: number);
    private afz;
    get agg(): number;
    set agg(a: number);
    private ag8;
    get ahf(): number;
    set ahf(a: number);
    private ag6;
    get ahd(): number;
    set ahd(a: number);
    private ag4;
    get ahb(): number;
    set ahb(a: number);
    private ag7;
    get ahe(): number;
    set ahe(a: number);
    private ac8;
    get ada(): FinancialChartRangeSelectorOptionCollection;
    set ada(a: FinancialChartRangeSelectorOptionCollection);
    ac9: FinancialChartRangeSelectorOptionCollection;
    private ac4;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_fy(): boolean;
    protected set_fy(a: boolean): void;
    private alq;
    get alr(): Brush;
    set alr(a: Brush);
    private age;
    get agx(): number;
    set agx(a: number);
    private aev;
    get ae8(): boolean;
    set ae8(a: boolean);
    private adv;
    get adw(): IChartLegend;
    set adw(a: IChartLegend);
    private acv;
    private get xAxis();
    private set xAxis(value);
    private aea;
    private get yAxis();
    private set yAxis(value);
    private ad9;
    private get volumeAxis();
    private set volumeAxis(value);
    private acu;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private ad8;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private act;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private afn;
    private get afq();
    private set afq(value);
    private afp;
    private get afs();
    private set afs(value);
    private afw;
    get afy(): Date;
    set afy(a: Date);
    private afv;
    get afx(): Date;
    set afx(a: Date);
    private aft;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
