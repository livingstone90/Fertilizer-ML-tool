import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected rr(): void;
    protected rt(a: Series, b: number): void;
    protected se(a: string, b: any, c: any): void;
    private aew;
    get aey(): number;
    set aey(a: number);
    private ac1;
    get ac2(): (time: number) => number;
    set ac2(a: (time: number) => number);
    ae4(): string;
    protected rm(a: XamDataChart): void;
    protected rs(a: Series, b: number): void;
    private acr;
    private acv;
    protected q5(): void;
    protected aap(a: Axis): void;
    protected aan(a: Axis): void;
    protected get_bz(): DomainType;
    get bz(): DomainType;
    private acl;
    get acm(): CategoryChartType;
    set acm(a: CategoryChartType);
    private acn;
    get aco(): CategorySeriesMarkerCollisionAvoidance;
    set aco(a: CategorySeriesMarkerCollisionAvoidance);
    private ac5;
    get adg(): boolean;
    set adg(a: boolean);
    private ac6;
    get adh(): boolean;
    set adh(a: boolean);
    private acp;
    get acq(): CategoryTransitionInMode;
    set acq(a: CategoryTransitionInMode);
    private acz;
    get ac0(): TransitionInSpeedType;
    set ac0(a: TransitionInSpeedType);
    private adt;
    get aeg(): number;
    set aeg(a: number);
    private adw;
    get aej(): number;
    set aej(a: number);
    private ads;
    get aef(): number;
    set aef(a: number);
    private adv;
    get aei(): number;
    set aei(a: number);
    private adu;
    get aeh(): number;
    set aeh(a: number);
    private adx;
    get aek(): number;
    set aek(a: number);
    private ad3;
    get aes(): number;
    set aes(a: number);
    private ach;
    get aci(): AutoMarginsAndAngleUpdateMode;
    set aci(a: AutoMarginsAndAngleUpdateMode);
    private ac7;
    af8(): void;
    get adi(): boolean;
    set adi(a: boolean);
    protected static readonly afd: string;
    private ac8;
    get adj(): boolean;
    set adj(a: boolean);
    private adq;
    get ad7(): number;
    set ad7(a: number);
    private adr;
    get ad8(): number;
    set ad8(a: number);
    private adc;
    get adn(): boolean;
    set adn(a: boolean);
    private static readonly afi;
    private ac9;
    get adk(): boolean;
    set adk(a: boolean);
    private static readonly afw;
    private adb;
    get adm(): boolean;
    set adm(a: boolean);
    private acj;
    get ack(): AxisRangeBufferMode;
    set ack(a: AxisRangeBufferMode);
    private add;
    get ado(): boolean;
    set ado(a: boolean);
    private aex;
    get aez(): number;
    set aez(a: number);
    private ad5;
    get aeu(): number;
    set aeu(a: number);
    private ad4;
    get aet(): number;
    set aet(a: number);
    private ad6;
    get aev(): number;
    set aev(a: number);
    get aee(): number;
    get aed(): number;
    aea(): number;
    aec(): number;
    ad9(): number;
    aeb(): number;
    get aer(): number;
    get aeq(): number;
    private acd;
    get acf(): BrushCollection;
    set acf(a: BrushCollection);
    private ace;
    get acg(): BrushCollection;
    set acg(a: BrushCollection);
    private ada;
    get adl(): boolean;
    set adl(a: boolean);
    private ady;
    get ael(): number;
    set ael(a: number);
    private adz;
    get aem(): number;
    set aem(a: number);
    private ad0;
    get aen(): number;
    set aen(a: number);
    private ad1;
    get aeo(): number;
    set aeo(a: number);
    private ad2;
    get aep(): number;
    set aep(a: number);
    private ac3;
    get ade(): boolean;
    set ade(a: boolean);
    private ac4;
    get adf(): boolean;
    set adf(a: boolean);
    constructor();
    protected get_gf(): List$1<DataSeriesType>;
    protected get gf(): List$1<DataSeriesType>;
    private adp;
    protected gj(): IEnumerable;
    protected cm(a: Series): MarkerType;
    protected get_f3(): boolean;
    private af6;
    private af7;
    protected sx(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private acu;
    private act;
    protected ba(a: DataSeries): DataSeriesType;
    protected cw(a: DataSeries, b: DataSeriesType): Series;
    protected sv(a: DataSeries): void;
    protected sy(): void;
    protected get_ge(): List$1<IDataSeriesAdapterRule>;
    protected get ge(): List$1<IDataSeriesAdapterRule>;
    protected q1(a: Series, b: number): void;
    private af4;
    private af5;
    protected vg(): Axis;
    protected vh(): Axis;
    private acx;
    private acy;
    protected gb(a: string, b: boolean): List$1<Series>;
    protected a5(): ComputedPlotAreaMarginMode;
    protected s2(a: Series, b: Series, c: DataSeries): void;
    protected fq(): boolean;
    protected sd(a: string, b: any, c: any): void;
}
