import { Base, INotifyPropertyChanged, IEnumerable, Type, PropertyChangedEventArgs } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { IDataLegend } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget {
    static $t: Type;
    protected ju: any;
    provideContainer(a: any): void;
    destroy(): void;
    private rq;
    protected rr(): void;
    protected rn(a: XamDataChart): void;
    protected rk(): void;
    protected rt(a: Series, b: number): void;
    protected se(a: string, b: any, c: any): void;
    private js;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private f9;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private g1;
    get ib(): number;
    set ib(a: number);
    private jr;
    private get toolTip();
    private set toolTip(value);
    private he;
    get iq(): number;
    set iq(a: number);
    private hf;
    get ir(): number;
    set ir(a: number);
    private hg;
    get is(): number;
    set is(a: number);
    private hd;
    get ip(): number;
    set ip(a: number);
    private g9;
    get ik(): number;
    set ik(a: number);
    private hb;
    get im(): number;
    set im(a: number);
    private ha;
    get il(): number;
    set il(a: number);
    private g8;
    get ij(): number;
    set ij(a: number);
    private ts;
    get uk(): Brush;
    set uk(a: Brush);
    private tt;
    get ul(): Brush;
    set ul(a: Brush);
    private gy;
    protected get_h8(): number;
    protected set_h8(a: number): void;
    get h8(): number;
    set h8(a: number);
    private hh;
    get it(): number;
    set it(a: number);
    private g7;
    get ii(): number;
    set ii(a: number);
    private gl;
    get hv(): number;
    set hv(a: number);
    private jf;
    get jn(): number;
    set jn(a: number);
    private du;
    get dv(): (time: number) => number;
    set dv(a: (time: number) => number);
    protected ro(a: XamDataChart): void;
    protected ru(a: Series, b: number): void;
    protected rl(): void;
    private rv;
    i6: (arg1: HTMLElement) => any[];
    private s3;
    private jw;
    private fz;
    private i7;
    protected sf(a: string, b: any, c: any): void;
    private b5;
    get b6(): IDomainChartWidget;
    set b6(a: IDomainChartWidget);
    private ko;
    get ps(): string;
    set ps(a: string);
    private kq;
    get p3(): string;
    set p3(a: string);
    private dm;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    bb: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected rp(): void;
    protected abstract get gf(): List$1<DataSeriesType>;
    protected abstract get ge(): List$1<IDataSeriesAdapterRule>;
    protected gd: List$1<MarkerType>;
    protected fv(a: DataSeriesType): boolean;
    notifyResized(): void;
    r3(): void;
    ra(): void;
    ri(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected sl(a: string): void;
    protected abstract rb(a: (arg1: Axis) => void, b: boolean): void;
    protected rc(a: (arg1: Series) => void): void;
    protected rd(a: (arg1: Series, arg2: number) => void): void;
    protected rg(a: (arg1: Series) => void): void;
    protected rh(a: (arg1: Series, arg2: number) => void): void;
    protected re(a: (arg1: Series) => void): void;
    protected rf(a: (arg1: Series, arg2: number) => void): void;
    su(): void;
    protected r5(a: (arg1: XamDataChart) => void): void;
    protected r6(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected r7(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected fw(a: DataSeries): boolean;
    protected fo(): boolean;
    private static readonly j4;
    private je;
    protected nz(a: DataSeries): string;
    private static j3;
    protected n0(a: DataSeries, b: DataSeriesType): string;
    protected abstract ba(a: DataSeries): DataSeriesType;
    protected abstract cw(a: DataSeries, b: DataSeriesType): Series;
    ny(): string;
    private ft;
    protected sx(): void;
    protected cx(seriesType_: DataSeriesType): Series;
    private cq;
    private cs;
    private cu;
    private cv;
    private cr;
    private ct;
    private b0;
    protected get b1(): IAnnotationLayerProxy;
    private get fk();
    private fm;
    private s4;
    protected fp(): boolean;
    protected fq(): boolean;
    protected get_fn(): boolean;
    protected get fn(): boolean;
    protected gb(a: string, b: boolean): List$1<Series>;
    protected q4(a: Series, b: boolean): void;
    protected s2(a: Series, b: Series, c: DataSeries): void;
    protected abstract sw(a: DataSeries): void;
    protected abstract sv(a: DataSeries): void;
    protected sz(): void;
    private s0;
    protected s1(a: Series): void;
    protected abstract sy(): void;
    private r8;
    protected q8(): void;
    protected ud(a: number): Brush;
    protected ug(a: number): Brush;
    protected ue(a: number): Brush;
    protected uf(a: number): Brush;
    protected uo(a: number): Color;
    protected ee(a: Color): ObservableColorCollection;
    protected ab(a: Color): BrushCollection;
    protected f8: List$1<Color>;
    protected get ga(): List$1<Color>;
    protected get_f3(): boolean;
    protected get f3(): boolean;
    jv(): any;
    rw(a: string, b: string): void;
    rx(a: string, b: string, c: Series): void;
    cl(a: DataSeriesMarker): MarkerType;
    private b4;
    private ev;
    attachDataLegend(a: IDataLegend): void;
    protected q3(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected q7(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    r2(source_: any, a: number, b: any, c: any): void;
    ry(source_: any): void;
    rz(source_: any, a: number, b: any): void;
    r0(source_: any, a: number, b: any): void;
    private bs;
    get bt(): DataToolTipLayerGroupingMode;
    set bt(a: DataToolTipLayerGroupingMode);
    private gp;
    get hz(): number;
    set hz(a: number);
    private gq;
    get h0(): number;
    set h0(a: number);
    private gn;
    get hx(): number;
    set hx(a: number);
    private go;
    get hy(): number;
    set hy(a: number);
    private bo;
    get bp(): DataTooltipGroupedPositionX;
    set bp(a: DataTooltipGroupedPositionX);
    private bq;
    get br(): DataTooltipGroupedPositionY;
    set br(a: DataTooltipGroupedPositionY);
    private eo;
    get ff(): boolean;
    set ff(a: boolean);
    static readonly mk: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get a9(): DataAbbreviationMode;
    set a9(a: DataAbbreviationMode);
    private a8;
    get jj(): number;
    set jj(a: number);
    private ja;
    get jk(): number;
    set jk(a: number);
    private jb;
    get bn(): DataLegendValueMode;
    set bn(a: DataLegendValueMode);
    private bm;
    get nc(): string;
    set nc(a: string);
    private kg;
    get fg(): boolean;
    set fg(a: boolean);
    private ep;
    get ni(): string;
    set ni(a: string);
    private kh;
    get n(): any[];
    set n(a: any[]);
    private f;
    get va(): Thickness;
    set va(a: Thickness);
    private u0;
    get fh(): boolean;
    set fh(a: boolean);
    private eq;
    get nr(): string;
    set nr(a: string);
    private ki;
    get fi(): boolean;
    set fi(a: boolean);
    private er;
    get vb(): Thickness;
    set vb(a: Thickness);
    private u1;
    get ua(): Brush;
    set ua(a: Brush);
    private tn;
    private d4;
    get ed(): FontInfo;
    set ed(a: FontInfo);
    get l2(): string;
    set l2(a: string);
    private ka;
    get k(): any[];
    set k(a: any[]);
    private c;
    get ly(): string;
    set ly(a: string);
    private j9;
    get bd(): DataLegendHeaderDateMode;
    set bd(a: DataLegendHeaderDateMode);
    private bc;
    get bf(): DataLegendHeaderTimeMode;
    set bf(a: DataLegendHeaderTimeMode);
    private be;
    get l7(): string;
    set l7(a: string);
    private kb;
    get t2(): Brush;
    set t2(a: Brush);
    private tf;
    get u4(): Thickness;
    set u4(a: Thickness);
    private uu;
    get u3(): Thickness;
    set u3(a: Thickness);
    private ut;
    get fe(): boolean;
    set fe(a: boolean);
    private en;
    private dw;
    get d5(): FontInfo;
    set d5(a: FontInfo);
    get t5(): Brush;
    set t5(a: Brush);
    private ti;
    private dz;
    get d8(): FontInfo;
    set d8(a: FontInfo);
    get bj(): DataLegendSummaryType;
    set bj(a: DataLegendSummaryType);
    private bi;
    get mq(): string;
    set mq(a: string);
    private kd;
    get u7(): Thickness;
    set u7(a: Thickness);
    private ux;
    get u6(): Thickness;
    set u6(a: Thickness);
    private uw;
    get t7(): Brush;
    set t7(a: Brush);
    private tk;
    private d1;
    get ea(): FontInfo;
    set ea(a: FontInfo);
    get ml(): string;
    set ml(a: string);
    private kc;
    get t4(): Brush;
    set t4(a: Brush);
    private th;
    private dy;
    get d7(): FontInfo;
    set d7(a: FontInfo);
    get mw(): string;
    set mw(a: string);
    private ke;
    get t6(): Brush;
    set t6(a: Brush);
    private tj;
    private d0;
    get d9(): FontInfo;
    set d9(a: FontInfo);
    get u2(): Thickness;
    set u2(a: Thickness);
    private us;
    get cd(): LegendItemBadgeShape;
    set cd(a: LegendItemBadgeShape);
    private cb;
    get bl(): DataLegendUnitsMode;
    set bl(a: DataLegendUnitsMode);
    private bk;
    get m6(): string;
    set m6(a: string);
    private kf;
    get t9(): Brush;
    set t9(a: Brush);
    private tm;
    get u9(): Thickness;
    set u9(a: Thickness);
    private uz;
    private d3;
    get ec(): FontInfo;
    set ec(a: FontInfo);
    get u8(): Thickness;
    set u8(a: Thickness);
    private uy;
    get t8(): Brush;
    set t8(a: Brush);
    private tl;
    private d2;
    get eb(): FontInfo;
    set eb(a: FontInfo);
    get bh(): DataLegendLabelMode;
    set bh(a: DataLegendLabelMode);
    private bg;
    get t3(): Brush;
    set t3(a: Brush);
    private tg;
    get u5(): Thickness;
    set u5(a: Thickness);
    private uv;
    private dx;
    get d6(): FontInfo;
    set d6(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    sm(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    ss(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    so(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sp(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sq(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sn(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    sr(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    sk(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    sj(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    private gc;
    sh(a: () => void): void;
    private ef;
    si(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_fx(): boolean;
    protected get fx(): boolean;
    protected rm(a: XamDataChart): void;
    protected af(a: BrushCollection): BrushCollection;
    protected uj(a: Brush): Brush;
    protected rs(a: Series, b: number): void;
    protected abstract q5(): void;
    protected get e9(): boolean;
    private ei;
    protected q9(): void;
    protected rj(): void;
    protected st(a: XamDataChart): void;
    protected q2(a: Series, b: number): void;
    protected abstract q1(a: Series, b: number): void;
    protected cn(a: Series, b: number): MarkerType;
    protected cm(a: Series): MarkerType;
    protected jz(): any;
    protected get_fr(): boolean;
    protected get fr(): boolean;
    protected gj(): IEnumerable;
    protected sd(a: string, b: any, c: any): void;
    private f6;
    private f7;
    private r9;
    private q0;
    private sb;
    abstract get bz(): DomainType;
    private as;
    private ao;
    private an;
    private dp;
    private a0;
    private ds;
    private dt;
    private e3;
    private e2;
    private e4;
    private e1;
    private ar;
    private aq;
    private ap;
    private dq;
    private az;
    get ay(): ChartSortDescriptionCollection;
    get au(): ChartSortDescriptionCollection;
    get at(): ChartSortDescriptionCollection;
    get dr(): FilterExpressionCollection;
    get a2(): ChartSummaryDescriptionCollection;
    get ax(): ChartSortDescriptionCollection;
    get aw(): ChartSortDescriptionCollection;
    get av(): ChartSortDescriptionCollection;
    get a1(): ChartSummaryDescriptionCollection;
    private kl;
    get ok(): string;
    set ok(a: string);
    private kj;
    get n1(): string;
    set n1(a: string);
    private kk;
    get oi(): string;
    set oi(a: string);
    private km;
    get om(): string;
    set om(a: string);
    private jq;
    get itemsSource(): any;
    set itemsSource(a: any);
    private jp;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private w;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private r;
    get y(): BrushCollection;
    set y(a: BrushCollection);
    private s;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private b2;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private eu;
    protected get_fs(): boolean;
    protected set_fs(a: boolean): void;
    get fs(): boolean;
    set fs(a: boolean);
    private ex;
    protected get_fy(): boolean;
    protected set_fy(a: boolean): void;
    get fy(): boolean;
    set fy(a: boolean);
    private ez;
    protected get_f1(): boolean;
    protected set_f1(a: boolean): void;
    get f1(): boolean;
    set f1(a: boolean);
    private e5;
    protected get_f4(): boolean;
    protected set_f4(a: boolean): void;
    get f4(): boolean;
    set f4(a: boolean);
    private ew;
    protected get_fu(): boolean;
    protected set_fu(a: boolean): void;
    get fu(): boolean;
    set fu(a: boolean);
    private up;
    get ur(): Rect;
    set ur(a: Rect);
    get uq(): Rect;
    private kp;
    get pw(): string;
    set pw(a: string);
    private kn;
    get pl(): string;
    set pl(a: string);
    private s6;
    get s8(): HorizontalAlignment;
    set s8(a: HorizontalAlignment);
    private s5;
    get s7(): HorizontalAlignment;
    set s7(a: HorizontalAlignment);
    private dk;
    get dl(): UnknownValuePlotting;
    set dl(a: UnknownValuePlotting);
    private g6;
    protected get_ih(): number;
    protected set_ih(a: number): void;
    get ih(): number;
    set ih(a: number);
    private hc;
    get io(): number;
    set io(a: number);
    private c2;
    get c3(): SeriesOutlineMode;
    set c3(a: SeriesOutlineMode);
    private cj;
    get ck(): MarkerOutlineMode;
    set ck(a: MarkerOutlineMode);
    private ch;
    get ci(): MarkerFillMode;
    set ci(a: MarkerFillMode);
    private gz;
    get h9(): number;
    set h9(a: number);
    private g0;
    get ia(): number;
    set ia(a: number);
    private co;
    get cp(): MarkerTypeCollection;
    set cp(a: MarkerTypeCollection);
    private cf;
    get cg(): MarkerAutomaticBehavior;
    set cg(a: MarkerAutomaticBehavior);
    private u;
    get ac(): BrushCollection;
    set ac(a: BrushCollection);
    private v;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private jd;
    get jm(): number;
    set jm(a: number);
    private gk;
    get hu(): number;
    set hu(a: number);
    private eh;
    get e8(): boolean;
    set e8(a: boolean);
    private x;
    get ag(): BrushCollection;
    set ag(a: BrushCollection);
    private di;
    get dj(): TrendLineType;
    set dj(a: TrendLineType);
    private hi;
    get iu(): number;
    set iu(a: number);
    private eg;
    get e7(): boolean;
    set e7(a: boolean);
    private g3;
    get id(): number;
    set id(a: number);
    private g5;
    get ig(): number;
    set ig(a: number);
    private g4;
    get ie(): number;
    set ie(a: number);
    private g2;
    get ic(): number;
    set ic(a: number);
    protected sc(): void;
    private a3;
    get a4(): ComputedPlotAreaMarginMode;
    set a4(a: ComputedPlotAreaMarginMode);
    protected a5(): ComputedPlotAreaMarginMode;
    private c4;
    get c5(): SeriesPlotAreaMarginHorizontalMode;
    set c5(a: SeriesPlotAreaMarginHorizontalMode);
    private c6;
    get c7(): SeriesPlotAreaMarginVerticalMode;
    set c7(a: SeriesPlotAreaMarginVerticalMode);
    private c0;
    get c1(): SeriesHighlightingMode;
    set c1(a: SeriesHighlightingMode);
    private cy;
    get cz(): SeriesHighlightingBehavior;
    set cz(a: SeriesHighlightingBehavior);
    private b7;
    get b8(): LegendHighlightingMode;
    set b8(a: LegendHighlightingMode);
    private cc;
    get ce(): LegendItemBadgeShape;
    set ce(a: LegendItemBadgeShape);
    private b9;
    get ca(): LegendItemBadgeMode;
    set ca(a: LegendItemBadgeMode);
    private jg;
    get jo(): number;
    set jo(a: number);
    private dg;
    get dh(): ToolTipType;
    set dh(a: ToolTipType);
    private a6;
    get a7(): CrosshairsDisplayMode;
    set a7(a: CrosshairsDisplayMode);
    private em;
    get fd(): boolean;
    set fd(a: boolean);
    private te;
    get t1(): Brush;
    set t1(a: Brush);
    private gm;
    get hw(): number;
    set hw(a: number);
    private td;
    get t0(): Brush;
    set t0(a: Brush);
    private el;
    get fc(): boolean;
    set fc(a: boolean);
    private s9;
    get tw(): Brush;
    set tw(a: Brush);
    private tb;
    get ty(): Brush;
    set ty(a: Brush);
    private ta;
    get tx(): Brush;
    set tx(a: Brush);
    private tc;
    get tz(): Brush;
    set tz(a: Brush);
    private i8;
    get jh(): number;
    set jh(a: number);
    private i9;
    get ji(): number;
    set ji(a: number);
    private ey;
    get f0(): boolean;
    set f0(a: boolean);
    private e0;
    get f2(): boolean;
    set f2(a: boolean);
    private es;
    get fj(): boolean;
    set fj(a: boolean);
    private to;
    get ub(): Brush;
    set ub(a: Brush);
    private tp;
    get uc(): Brush;
    set uc(a: Brush);
    private jc;
    get jl(): number;
    set jl(a: number);
    private ek;
    get fb(): boolean;
    set fb(a: boolean);
    private ej;
    get fa(): boolean;
    set fa(a: boolean);
    private gh;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private ah;
    get ai(): CalloutPlacementPositionsCollection;
    set ai(a: CalloutPlacementPositionsCollection);
    private j7;
    get k7(): string;
    set k7(a: string);
    private j8;
    get k9(): string;
    set k9(a: string);
    private j6;
    get k3(): string;
    set k3(a: string);
    private j5;
    get k0(): string;
    set k0(a: string);
    get dc(): SeriesViewerScrollbarMode;
    set dc(a: SeriesViewerScrollbarMode);
    private da;
    get dd(): SeriesViewerScrollbarMode;
    set dd(a: SeriesViewerScrollbarMode);
    private db;
    get c9(): SeriesViewerHorizontalScrollbarPosition;
    set c9(a: SeriesViewerHorizontalScrollbarPosition);
    private c8;
    get df(): SeriesViewerVerticalScrollbarPosition;
    set df(a: SeriesViewerVerticalScrollbarPosition);
    private de;
    get uh(): Brush;
    set uh(a: Brush);
    private tq;
    get ui(): Brush;
    set ui(a: Brush);
    private tr;
    get h5(): number;
    set h5(a: number);
    private gv;
    get h4(): number;
    set h4(a: number);
    private gu;
    get h1(): number;
    set h1(a: number);
    private gr;
    get h2(): number;
    set h2(a: number);
    private gs;
    get h3(): number;
    set h3(a: number);
    private gt;
    get h7(): number;
    set h7(a: number);
    private gx;
    get h6(): number;
    set h6(a: number);
    private gw;
    get fl(): boolean;
    set fl(a: boolean);
    private et;
    static readonly od: string;
    get um(): Brush;
    set um(a: Brush);
    private tu;
    get un(): Brush;
    set un(a: Brush);
    private tv;
    get iy(): number;
    set iy(a: number);
    private hm;
    get ix(): number;
    set ix(a: number);
    private hl;
    get iv(): number;
    set iv(a: number);
    private hj;
    get i1(): number;
    set i1(a: number);
    private hp;
    get iw(): number;
    set iw(a: number);
    private hk;
    get i0(): number;
    set i0(a: number);
    private ho;
    get iz(): number;
    set iz(a: number);
    private hn;
    get f5(): boolean;
    set f5(a: boolean);
    private e6;
    static readonly qp: string;
    get i3(): number;
    set i3(a: number);
    private hr;
    get i2(): number;
    set i2(a: number);
    private hq;
    get i5(): number;
    set i5(a: number);
    private ht;
    get i4(): number;
    set i4(a: number);
    private hs;
}
