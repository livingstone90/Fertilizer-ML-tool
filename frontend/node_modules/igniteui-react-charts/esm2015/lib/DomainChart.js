/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, PropertyChangedEventArgs, Delegate_$type, fromEnum, String_$type, runOn, delegateCombine, EnumUtil, enumGetBox, typeCast, delegateRemove, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SortGroupParser } from "igniteui-react-core";
import { SummaryParser } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { DeviceUtils } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ChartSortDescription } from "./ChartSortDescription";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        constructor() {
            super();
            this.ju = null;
            this.js = null;
            this.f9 = null;
            this.g1 = NaN;
            this.jr = null;
            this.he = 0;
            this.hf = 0;
            this.hg = 0;
            this.hd = 0;
            this.g9 = 0;
            this.hb = 0;
            this.ha = 0;
            this.g8 = 0;
            this.ts = null;
            this.tt = null;
            this.gy = NaN;
            this.hh = NaN;
            this.g7 = NaN;
            this.gl = NaN;
            this.jf = 0;
            this.du = null;
            this.i6 = null;
            this.fz = false;
            this.b5 = null;
            this.ko = null;
            this.kq = null;
            this.dm = null;
            this.gd = null;
            this.propertyChanged = null;
            this.je = 0;
            this.ft = false;
            this.b0 = null;
            this.f8 = null;
            this.b4 = null;
            this.ev = false;
            this.bs = 0;
            this.gp = NaN;
            this.gq = NaN;
            this.gn = DeviceUtils.g(10);
            this.go = DeviceUtils.g(10);
            this.bo = 0;
            this.bq = 0;
            this.eo = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.a8 = 0;
            this.ja = -1;
            this.jb = -1;
            this.bm = 0;
            this.kg = stringEmpty();
            this.ep = true;
            this.kh = null;
            this.f = null;
            this.u0 = new Thickness(0, DeviceUtils.g(5));
            this.eq = true;
            this.ki = "N/A";
            this.er = false;
            this.u1 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.tn = null;
            this.d4 = null;
            this.ka = null;
            this.c = null;
            this.j9 = stringEmpty();
            this.bc = 0;
            this.be = 0;
            this.kb = null;
            this.tf = null;
            this.uu = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.ut = new Thickness(0, DeviceUtils.g(5));
            this.en = true;
            this.dw = null;
            this.ti = null;
            this.dz = null;
            this.bi = 0;
            this.kd = null;
            this.ux = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.uw = new Thickness(0, DeviceUtils.g(5));
            this.tk = null;
            this.d1 = null;
            this.kc = null;
            this.th = null;
            this.dy = null;
            this.ke = null;
            this.tj = null;
            this.d0 = null;
            this.us = new Thickness(0, DeviceUtils.g(0));
            this.cb = 0;
            this.bk = 0;
            this.kf = null;
            this.tm = null;
            this.uz = new Thickness(0, DeviceUtils.g(0));
            this.d3 = null;
            this.uy = new Thickness(0, DeviceUtils.g(0));
            this.tl = null;
            this.d2 = null;
            this.bg = 0;
            this.tg = null;
            this.uv = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.dx = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.gc = null;
            this.ef = null;
            this.ei = false;
            this.f6 = new Dictionary$2(String_$type, Base.$, 0);
            this.f7 = new List$1(String_$type, 0);
            this.as = null;
            this.ao = null;
            this.an = null;
            this.dp = null;
            this.a0 = null;
            this.ds = null;
            this.dt = null;
            this.e3 = true;
            this.e2 = true;
            this.e4 = true;
            this.e1 = true;
            this.ar = null;
            this.aq = null;
            this.ap = null;
            this.dq = null;
            this.az = null;
            this.kl = null;
            this.kj = null;
            this.kk = null;
            this.km = null;
            this.jq = null;
            this.jp = null;
            this.h = null;
            this.g = null;
            this.t = null;
            this.w = null;
            this.r = null;
            this.s = null;
            this.b2 = null;
            this.eu = true;
            this.ex = true;
            this.ez = false;
            this.e5 = false;
            this.ew = false;
            this.up = new Rect(0, 0, 0, 1, 1);
            this.kp = null;
            this.kn = null;
            this.s6 = 1;
            this.s5 = 1;
            this.dk = 0;
            this.g6 = NaN;
            this.hc = NaN;
            this.c2 = 0;
            this.cj = 0;
            this.ch = 0;
            this.gz = NaN;
            this.g0 = NaN;
            this.co = null;
            this.cf = 4;
            this.u = null;
            this.v = null;
            this.jd = 400;
            this.gk = NaN;
            this.eh = false;
            this.x = null;
            this.di = 0;
            this.hi = DeviceUtils.g(1.5);
            this.eg = true;
            this.g3 = NaN;
            this.g5 = NaN;
            this.g4 = NaN;
            this.g2 = NaN;
            this.a3 = 0;
            this.c4 = 0;
            this.c6 = 0;
            this.c0 = 0;
            this.cy = 0;
            this.b7 = 0;
            this.cc = 0;
            this.b9 = 0;
            this.jg = 7;
            this.dg = 4;
            this.a6 = 0;
            this.em = false;
            this.te = null;
            this.gm = NaN;
            this.td = null;
            this.el = true;
            this.s9 = null;
            this.tb = null;
            this.ta = null;
            this.tc = null;
            this.i8 = -1;
            this.i9 = -1;
            this.ey = false;
            this.e0 = true;
            this.es = false;
            this.to = null;
            this.tp = null;
            this.jc = -1;
            this.ek = false;
            this.ej = false;
            this.gh = null;
            this.ah = null;
            this.j7 = null;
            this.j8 = null;
            this.j6 = "CalloutLabel";
            this.j5 = "CalloutContent";
            this.da = 0;
            this.db = 0;
            this.c8 = 0;
            this.de = 0;
            this.tq = null;
            this.tr = null;
            this.gv = NaN;
            this.gu = NaN;
            this.gr = NaN;
            this.gs = NaN;
            this.gt = NaN;
            this.gx = NaN;
            this.gw = NaN;
            this.et = true;
            this.tu = null;
            this.tv = null;
            this.hm = NaN;
            this.hl = NaN;
            this.hj = NaN;
            this.hp = NaN;
            this.hk = NaN;
            this.ho = NaN;
            this.hn = NaN;
            this.e6 = true;
            this.hr = NaN;
            this.hq = NaN;
            this.ht = NaN;
            this.hs = NaN;
            this.gc = new List$1(Delegate_$type, 0);
            this.rp();
            this.q5();
        }
        provideContainer(a) {
            if (a == null) {
                this.r5((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.ju;
            this.ju = a;
            if (this.ef != null && this.ju != null && b == null) {
                this.ju.setTimeout(this.ef, 0);
                this.ef = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.ef = true;
                return $ret;
            })());
            c.provideContainer(a);
            this.dataChart = c;
            this.rq();
        }
        destroy() {
            this.provideContainer(null);
        }
        rq() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cu.j.e();
            this.aa = a.a;
            this.ae = a.f;
            this.ac = a.b;
            this.ad = a.c;
            this.ag = a.g;
            this.hw = Defaults.j;
            this.rr();
        }
        rr() {
        }
        rn(a) {
            if (a == null) {
                return;
            }
            a.g9 = this.is;
            a.g7 = this.iq;
            a.g8 = this.ir;
            a.g6 = this.ip;
            a.sv = this.ul;
            a.g3 = this.ik;
            a.g5 = this.im;
            a.g4 = this.il;
            a.g2 = this.ij;
            a.su = this.uk;
            if (!isNaN_(this.ib)) {
                a.gx = this.ib;
            }
        }
        rk() {
        }
        rt(a, b) {
            a.ho = this.jn;
            a.cf = this.dv;
        }
        se(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g9 = this.is;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g7 = this.iq;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.r5((d) => d.gx = this.ib);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g8 = this.ir;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g6 = this.ip;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.sv = this.ul;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g3 = this.ik;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g5 = this.im;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g4 = this.il;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g2 = this.ij;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.su = this.uk;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gw = this.h8;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ha = this.it;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g1 = this.ii;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gj = this.hv;
                    }
                    break;
                case "TransitionDuration":
                    this.rg((d) => d.ho = this.jn);
                    break;
                case "TransitionEasingFunction":
                    this.rg((d) => d.cf = this.dv);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.f9;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.f9 = a;
                this.sd("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get ib() {
            return this.g1;
        }
        set ib(a) {
            let b = this.g1;
            if (a != b) {
                this.g1 = a;
                this.sd("PixelScalingRatio", b, this.ib);
            }
        }
        get toolTip() {
            return this.jr;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.jr = a;
                this.sd("ToolTip", b, this.toolTip);
            }
        }
        get iq() {
            return this.he;
        }
        set iq(a) {
            let b = this.iq;
            if (a != b) {
                this.he = a;
                this.sd("TitleLeftMargin", b, this.iq);
            }
        }
        get ir() {
            return this.hf;
        }
        set ir(a) {
            let b = this.ir;
            if (a != b) {
                this.hf = a;
                this.sd("TitleRightMargin", b, this.ir);
            }
        }
        get is() {
            return this.hg;
        }
        set is(a) {
            let b = this.is;
            if (a != b) {
                this.hg = a;
                this.sd("TitleTopMargin", b, this.is);
            }
        }
        get ip() {
            return this.hd;
        }
        set ip(a) {
            let b = this.ip;
            if (a != b) {
                this.hd = a;
                this.sd("TitleBottomMargin", b, this.ip);
            }
        }
        get ik() {
            return this.g9;
        }
        set ik(a) {
            let b = this.ik;
            if (a != b) {
                this.g9 = a;
                this.sd("SubtitleLeftMargin", b, this.ik);
            }
        }
        get im() {
            return this.hb;
        }
        set im(a) {
            let b = this.im;
            if (a != b) {
                this.hb = a;
                this.sd("SubtitleTopMargin", b, this.im);
            }
        }
        get il() {
            return this.ha;
        }
        set il(a) {
            let b = this.il;
            if (a != b) {
                this.ha = a;
                this.sd("SubtitleRightMargin", b, this.il);
            }
        }
        get ij() {
            return this.g8;
        }
        set ij(a) {
            let b = this.ij;
            if (a != b) {
                this.g8 = a;
                this.sd("SubtitleBottomMargin", b, this.ij);
            }
        }
        get uk() {
            return this.ts;
        }
        set uk(a) {
            let b = this.uk;
            if (a != b) {
                this.ts = a;
                this.sd("SubtitleTextColor", b, this.uk);
            }
        }
        get ul() {
            return this.tt;
        }
        set ul(a) {
            let b = this.ul;
            if (a != b) {
                this.tt = a;
                this.sd("TitleTextColor", b, this.ul);
            }
        }
        get_h8() {
            return this.gy;
        }
        set_h8(a) {
            let b = this.h8;
            if (a != b) {
                this.gy = a;
                this.sd("LeftMargin", b, this.h8);
            }
        }
        get h8() {
            return this.get_h8();
        }
        set h8(a) {
            this.set_h8(a);
        }
        get it() {
            return this.hh;
        }
        set it(a) {
            let b = this.it;
            if (a != b) {
                this.hh = a;
                this.sd("TopMargin", b, this.it);
            }
        }
        get ii() {
            return this.g7;
        }
        set ii(a) {
            let b = this.ii;
            if (a != b) {
                this.g7 = a;
                this.sd("RightMargin", b, this.ii);
            }
        }
        get hv() {
            return this.gl;
        }
        set hv(a) {
            let b = this.hv;
            if (a != b) {
                this.gl = a;
                this.sd("BottomMargin", b, this.hv);
            }
        }
        get jn() {
            return this.jf;
        }
        set jn(a) {
            let b = this.jn;
            if (a != b) {
                this.jf = a;
                this.sd("TransitionDuration", b, this.jn);
            }
        }
        get dv() {
            return this.du;
        }
        set dv(a) {
            let b = this.dv;
            if (a != b) {
                this.du = a;
                this.sd("TransitionEasingFunction", b, this.dv);
            }
        }
        ro(a) {
            if (this.dataChart == null) {
                return;
            }
            a.kn = this.p3;
            a.kb = this.ps;
        }
        ru(a, b) {
            this.rv(a, b);
        }
        rl() {
        }
        rv(a, b) {
            if (a == null) {
                return;
            }
            if (this.dh == 3) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.et = true;
            }
            else {
                let series_ = a;
                a.et = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        s3(a, b, c) {
        }
        jw(a) {
            return a;
            return null;
        }
        i7(a) {
            return null;
        }
        sf(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.kb = this.ps;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.kn = this.p3;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.fz) {
                        return;
                    }
                    this.fz = true;
                    this.tooltipTemplate = this.jw(this.tooltipTemplate);
                    this.fz = false;
                    if (this.dataChart != null) {
                        this.dataChart.h0 = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.rh((d, e) => this.rv(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.fz = true;
                    this.rh((d, e) => {
                        let f = this.jw(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.fz = false;
                    break;
            }
        }
        get b6() {
            return this.b5;
        }
        set b6(a) {
            let b = this.b6;
            if (a != b) {
                this.b5 = a;
                this.sd("Widget", b, this.b6);
            }
        }
        get ps() {
            return this.ko;
        }
        set ps(a) {
            let b = this.ps;
            if (a != b) {
                this.ko = a;
                this.sd("SubtitleTextStyle", b, this.ps);
            }
        }
        get p3() {
            return this.kq;
        }
        set p3(a) {
            let b = this.p3;
            if (a != b) {
                this.kq = a;
                this.sd("TitleTextStyle", b, this.p3);
            }
        }
        get dataChart() {
            return this.dm;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.dm = a;
                this.sd("DataChart", b, this.dataChart);
            }
        }
        onDetachedFromUI() {
            this.r5((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.r5((a) => a.onAttachedToUI());
        }
        rp() {
            this.gd = new List$1(MarkerType_$type, 0);
            this.bb = new DataSeriesAdapter().e;
            this.as = new ChartSortDescriptionCollection();
            this.ao = new ChartSortDescriptionCollection();
            this.an = new ChartSortDescriptionCollection();
            this.a0 = new ChartSummaryDescriptionCollection();
            this.dp = new FilterExpressionCollection();
            this.ay.e = this.bb.sortDescriptions;
            this.at.e = this.bb.groupDescriptions;
            this.dr.syncTarget = this.bb.filterExpressions;
            this.a2.e = this.bb.summaryDescriptions;
            this.au.e = this.bb.postSortDescriptions;
            this.ds = new SortGroupParser();
            this.dt = new SummaryParser();
            this.ar = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.aq = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.ap = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.az = ((() => {
                let $ret = new ChartSummaryDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.dq = ((() => {
                let $ret = new FilterExpressionCollection();
                $ret.shouldDetachOnTargetChange = true;
                return $ret;
            })());
            if (this.e3) {
                if (this.ay.j.count == 0) {
                    this.ar.e = this.bb.sortDescriptions;
                }
                if (this.au.j.count == 0) {
                    this.aq.e = this.bb.postSortDescriptions;
                }
                this.e3 = false;
            }
            if (this.e2) {
                if (this.at.j.count == 0) {
                    this.ap.e = this.bb.groupDescriptions;
                }
                this.e2 = false;
            }
            if (this.e4) {
                if (this.a2.j.count == 0) {
                    this.az.e = this.bb.summaryDescriptions;
                }
                this.e4 = false;
            }
            if (this.q != null) {
                this.bb.includedProperties = this.q;
            }
            if (this.o != null) {
                this.bb.excludedProperties = this.o;
            }
            this.bb.supportedSeriesTypes = this.gf.toArray();
            this.bb.rules.clear();
            for (let a of fromEnum(this.ge)) {
                this.bb.rules.add(a);
            }
            let b = new List$1(String_$type, 0);
            for (let c of fromEnum(this.bb.rules)) {
                b.add(getInstanceType(c).typeName);
            }
            let d = this.bb.dataSeries;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.r8));
        }
        fv(a) {
            return a != 24 && this.gf.contains(a);
        }
        notifyResized() {
            this.r5((a) => a.notifyContainerResized());
        }
        r3() {
            this.r5((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].lu();
                }
            });
        }
        ra() {
            if (this.dataChart == null) {
                return;
            }
            if (this.ft) {
                this.sx();
            }
            this.dataChart.flush();
        }
        ri() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.l0();
        }
        sl(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        rc(a) {
            this.rd((b, c) => a(b));
        }
        rd(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        rg(a) {
            this.rh((b, c) => a(b));
        }
        rh(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.db) {
                    a(c, b);
                }
            }
        }
        re(a) {
            this.rf((b, c) => a(b));
        }
        rf(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.dc) {
                    a(c, b);
                }
            }
        }
        su() {
            this.rc((a) => a.mo());
        }
        r5(a) {
            this.r6(a, true);
        }
        r6(a, b) {
            this.r7(a, b, null);
        }
        r7(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        fw(a) {
            if (!this.fv(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        fo() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        nz(a) {
            let b = "series_" + (this.dataChart.series.count + 1) + "_" + EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            return b;
        }
        n0(a, b) {
            if (this.fr && this.f4) {
                let c = "";
                let d = 5 + Math.round(DomainChart.j3.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        ny() {
            return stringEmpty();
        }
        sx() {
            if (this.dataChart == null) {
                return;
            }
            this.ft = false;
            this.sz();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.bb.dataSeries)) {
                a.add(this.cl(b.suggestedMarker));
            }
            this.gd = a;
            let c = 0;
            for (let d of fromEnum(this.bb.dataSeries)) {
                if (!this.fw(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.sv(d);
                this.sw(d);
                c++;
            }
            this.s4();
            this.rd(runOn(this, this.rs));
        }
        cx(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        cq() {
            return this.cx(28);
        }
        cs() {
            return this.cx(27);
        }
        cu() {
            return this.cx(29);
        }
        cv() {
            return this.cx(25);
        }
        cr() {
            return this.cx(26);
        }
        ct() {
            return this.cx(32);
        }
        get b1() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get fk() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        fm(a) {
            if (!this.fk) {
                return false;
            }
            return this.b1.matchesType(a);
        }
        s4() {
            let a = this.gb("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        fp() {
            return this.a7 == 0 || this.a7 == 4 || this.a7 == 2;
        }
        fq() {
            return this.a7 == 0 || this.a7 == 4 || this.a7 == 3;
        }
        get_fn() {
            return this.gh == null && this.ek && (this.j7 == null || this.j8 == null);
        }
        get fn() {
            return this.get_fn();
        }
        gb(a, b) {
            if (!this.fk) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                if (this.ek) {
                    let d = 1;
                    if (this.gh == null) {
                        if (this.j7 != null || this.j8 != null || this.j6 != null || this.j5 != null) {
                            for (let e of fromEnum(this.dataChart.series)) {
                                let f = this.cq();
                                this.b1.setTargetSeries(f, e);
                                this.b1.setCollisionChannel(f, "MainChartCollisionChannel");
                                this.s2(f, e, this.bb.dataSeries._inner[d - 1]);
                                f.name = a + getInstanceType(f).typeName + d.toString();
                                c.add(f);
                                d++;
                            }
                            ;
                        }
                        else {
                            let g = this.cq();
                            this.q4(g, this.f3);
                            g.name = a + getInstanceType(g).typeName + d.toString();
                            c.add(g);
                        }
                    }
                    else {
                        let h = this.cq();
                        this.s2(h, null, this.bb.dataSeries._inner[d - 1]);
                        h.name = a + getInstanceType(h).typeName + d.toString();
                        c.add(h);
                    }
                }
            }
            switch (this.a6) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let i = this.cs();
                        this.b1.setCrosshairThickness(i, this.gm);
                        this.b1.setCrosshairUseInterpolation(i, !this.em);
                        this.b1.setCrosshairHorizontalLineVisibility(i, this.fp() ? 0 : 1);
                        this.b1.setCrosshairHorizontalLineStroke(i, this.td);
                        this.b1.setCrosshairVerticalLineVisibility(i, this.fq() ? 0 : 1);
                        this.b1.setCrosshairVerticalLineStroke(i, this.te);
                        this.b1.setCrosshairOnAxesEnabled(i, this.el);
                        this.b1.setCrosshairXAxisBackground(i, this.s9);
                        this.b1.setCrosshairXAxisForeground(i, this.ta);
                        this.b1.setCrosshairYAxisBackground(i, this.tb);
                        this.b1.setCrosshairYAxisForeground(i, this.tc);
                        this.b1.setCrosshairXAxisPrecision(i, this.i8);
                        this.b1.setCrosshairYAxisPrecision(i, this.i9);
                        c.add(i);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.es) {
                let j = this.cu();
                this.b1.setFinalValueBackground(j, this.to);
                this.b1.setFinalValueForeground(j, this.tp);
                this.b1.setFinalValuePrecision(j, this.jc);
                c.add(j);
            }
            if (b) {
                switch (this.dg) {
                    case 1:
                        {
                            let k = this.cv();
                            c.add(k);
                            break;
                        }
                    case 2:
                        {
                            let l = this.cr();
                            c.add(l);
                            break;
                        }
                    case 4:
                        {
                            let m = this.ct();
                            c.add(m);
                            break;
                        }
                    case 3:
                        {
                            this.rc((n) => n.et = false);
                            break;
                        }
                    case 0:
                        {
                            this.rc((n) => n.et = true);
                            break;
                        }
                }
            }
            for (let n of fromEnum(c)) {
                if (stringIsNullOrEmpty(n.name) == false) {
                    continue;
                }
                n.name = a + getInstanceType(n).typeName;
            }
            return c;
        }
        q4(a, b) {
            this.b1.setIsAutoCalloutBehaviorEnabled(a, true);
            this.b1.setGreedyCollisionMode(a, true);
            this.b1.setUseDedicatedLanes(a, b);
        }
        s2(a, b, c) {
            a.itemsSource = this.gh != null ? this.gh : b.itemsSource;
            this.b1.setXMemberPath(a, this.j7);
            this.b1.setYMemberPath(a, this.j8);
            this.b1.setLabelMemberPath(a, this.j6);
            this.b1.setContentMemberPath(a, this.j5);
            if (this.ah != null) {
                this.b1.setCalloutsAllowedPositions(a, this.ah);
            }
        }
        sz() {
            this.s0(this.dataChart);
        }
        s0(a) {
            if (a != null && a == this.dataChart) {
                this.sy();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.rc((b) => {
                if (this.fm(b) && this.b1.isCalloutLayer(b)) {
                    this.b1.removeCalloutStyleUpdating(b, runOn(this, this.sk));
                }
                if (this.fm(b) && this.b1.isCalloutLayer(b)) {
                    this.b1.removeCalloutRenderStyleUpdating(b, runOn(this, this.sj));
                }
                this.ss(b);
            });
            for (let b of fromEnum(a.series)) {
                this.s1(b);
            }
            a.series.clear();
        }
        s1(a) {
            a.itemsSource = null;
            a.legend = null;
            a.kx();
        }
        r8(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.ft) {
                return;
            }
            let e = this.si(runOn(this, this.q8), this.ft);
            this.ft = e.p1;
        }
        q8() {
            this.sx();
        }
        ud(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.y, a);
        }
        ug(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.z, a);
        }
        ue(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ac, a);
        }
        uf(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ad, a);
        }
        uo(a) {
            let b = new Color();
            if (this.y == null || this.y.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.ga, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.y, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.ga, a);
                }
                else {
                    b = ColorUtil.q(c);
                }
            }
            return b;
        }
        ee(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.v(a, 0.5));
            b.add(a);
            return b;
        }
        ab(a) {
            let b = this.ee(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get ga() {
            if (this.f8 != null) {
                return this.f8;
            }
            this.f8 = new List$1(Color.$, 0);
            this.f8.add(ColorUtil.r("#8BDC5C"));
            this.f8.add(ColorUtil.r("#8961A9"));
            this.f8.add(ColorUtil.r("#6DB1FF"));
            this.f8.add(ColorUtil.r("#82E9D9"));
            this.f8.add(ColorUtil.r("#EA3C63"));
            this.f8.add(ColorUtil.r("#735656"));
            this.f8.add(ColorUtil.r("#F8CE4F"));
            this.f8.add(ColorUtil.r("#A8A8B7"));
            this.f8.add(ColorUtil.r("#E051A9"));
            this.f8.add(ColorUtil.r("#FF903B"));
            return this.f8;
        }
        get_f3() {
            return false;
        }
        get f3() {
            return this.get_f3();
        }
        jv() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.vw();
        }
        rw(a, b) {
        }
        rx(a, b, c) {
        }
        cl(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.q3(a);
        }
        q3(a) {
            this.b4 = a;
            if (this.dataChart != null) {
                if (!this.ev) {
                    this.ev = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.q7(a);
        }
        q7(a) {
            if (this.dataChart != null) {
                this.ev = false;
                this.dataChart.detachDataLegend(a);
            }
            this.b4 = null;
        }
        getDataLegendSeries() {
            return this.p();
        }
        p() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        r2(source_, a, b, c) {
            if (this.bb != null) {
                this.bb.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.mi(source_, a, b, c);
            }
        }
        ry(source_) {
            if (this.bb != null) {
                this.bb.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.l9(source_);
            }
        }
        rz(source_, a, b) {
            if (this.bb != null) {
                this.bb.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.mg(source_, a, b);
            }
        }
        r0(source_, a, b) {
            if (this.bb != null) {
                this.bb.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.mh(source_, a, b);
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.sd("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.bs));
            }
        }
        get hz() {
            return this.gp;
        }
        set hz(a) {
            let b = this.gp;
            this.gp = a;
            if (b != this.gp) {
                this.sd("DataToolTipPositionOffsetX", b, this.gp);
            }
        }
        get h0() {
            return this.gq;
        }
        set h0(a) {
            let b = this.gq;
            this.gq = a;
            if (b != this.gq) {
                this.sd("DataToolTipPositionOffsetY", b, this.gq);
            }
        }
        get hx() {
            return this.gn;
        }
        set hx(a) {
            let b = this.gn;
            this.gn = a;
            if (b != this.gn) {
                this.sd("DataToolTipDefaultPositionOffsetX", b, this.gn);
            }
        }
        get hy() {
            return this.go;
        }
        set hy(a) {
            let b = this.go;
            this.go = a;
            if (b != this.go) {
                this.sd("DataToolTipDefaultPositionOffsetY", b, this.go);
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.sd("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.bo));
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.sd("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.bq));
            }
        }
        get ff() {
            return this.eo;
        }
        set ff(a) {
            let b = this.eo;
            this.eo = a;
            if (b != this.eo) {
                this.sd(DomainChart.mk, b, this.eo);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.sd("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.sd("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.sd("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.sd("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get a9() {
            return this.a8;
        }
        set a9(a) {
            let b = this.a8;
            this.a8 = a;
            if (b != this.a8) {
                this.sd("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.a8));
            }
        }
        get jj() {
            return this.ja;
        }
        set jj(a) {
            let b = this.ja;
            this.ja = a;
            if (b != this.ja) {
                this.sd("DataToolTipValueFormatMaxFractions", b, this.ja);
            }
        }
        get jk() {
            return this.jb;
        }
        set jk(a) {
            let b = this.jb;
            this.jb = a;
            if (b != this.jb) {
                this.sd("DataToolTipValueFormatMinFractions", b, this.jb);
            }
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.sd("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.bm));
            }
        }
        get nc() {
            return this.kg;
        }
        set nc(a) {
            let b = this.kg;
            this.kg = a;
            if (b != this.kg) {
                this.sd("DataToolTipValueFormatCulture", b, this.kg);
            }
        }
        get fg() {
            return this.ep;
        }
        set fg(a) {
            let b = this.ep;
            this.ep = a;
            if (b != this.ep) {
                this.sd("DataToolTipValueFormatUseGrouping", b, this.ep);
            }
        }
        get ni() {
            return this.kh;
        }
        set ni(a) {
            let b = this.kh;
            this.kh = a;
            if (b != this.kh) {
                this.sd("DataToolTipValueFormatString", b, this.kh);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.sd("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get va() {
            return this.u0;
        }
        set va(a) {
            let b = this.u0;
            this.u0 = a;
            if (b != this.u0) {
                this.sd("DataToolTipValueRowMargin", b, this.u0);
            }
        }
        get fh() {
            return this.eq;
        }
        set fh(a) {
            let b = this.eq;
            this.eq = a;
            if (b != this.eq) {
                this.sd("DataToolTipValueRowVisible", b, this.eq);
            }
        }
        get nr() {
            return this.ki;
        }
        set nr(a) {
            let b = this.ki;
            this.ki = a;
            if (b != this.ki) {
                this.sd("DataToolTipValueTextWhenMissingData", b, this.ki);
            }
        }
        get fi() {
            return this.er;
        }
        set fi(a) {
            let b = this.er;
            this.er = a;
            if (b != this.er) {
                this.sd("DataToolTipValueTextUseSeriesColors", b, this.er);
            }
        }
        get vb() {
            return this.u1;
        }
        set vb(a) {
            let b = this.u1;
            this.u1 = a;
            if (b != this.u1) {
                this.sd("DataToolTipValueTextMargin", b, this.u1);
            }
        }
        get ua() {
            return this.tn;
        }
        set ua(a) {
            let b = this.tn;
            this.tn = a;
            if (b != this.tn) {
                this.sd("DataToolTipValueTextColor", b, this.tn);
            }
        }
        get ed() {
            return this.d4;
        }
        set ed(a) {
            let b = this.d4;
            this.d4 = a;
            if (b != this.d4) {
                this.sd("DataToolTipValueTextStyle", b, this.d4);
            }
        }
        get l2() {
            return this.ka;
        }
        set l2(a) {
            let b = this.ka;
            this.ka = a;
            if (b != this.ka) {
                this.sd("DataToolTipHeaderFormatString", b, this.ka);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.sd("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get ly() {
            return this.j9;
        }
        set ly(a) {
            let b = this.j9;
            this.j9 = a;
            if (b != this.j9) {
                this.sd("DataToolTipHeaderFormatCulture", b, this.j9);
            }
        }
        get bd() {
            return this.bc;
        }
        set bd(a) {
            let b = this.bc;
            this.bc = a;
            if (b != this.bc) {
                this.sd("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.bc));
            }
        }
        get bf() {
            return this.be;
        }
        set bf(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.sd("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.be));
            }
        }
        get l7() {
            return this.kb;
        }
        set l7(a) {
            let b = this.kb;
            this.kb = a;
            if (b != this.kb) {
                this.sd("DataToolTipHeaderText", b, this.kb);
            }
        }
        get t2() {
            return this.tf;
        }
        set t2(a) {
            let b = this.tf;
            this.tf = a;
            if (b != this.tf) {
                this.sd("DataToolTipHeaderTextColor", b, this.tf);
            }
        }
        get u4() {
            return this.uu;
        }
        set u4(a) {
            let b = this.uu;
            this.uu = a;
            if (b != this.uu) {
                this.sd("DataToolTipHeaderTextMargin", b, this.uu);
            }
        }
        get u3() {
            return this.ut;
        }
        set u3(a) {
            let b = this.ut;
            this.ut = a;
            if (b != this.ut) {
                this.sd("DataToolTipHeaderRowMargin", b, this.ut);
            }
        }
        get fe() {
            return this.en;
        }
        set fe(a) {
            let b = this.en;
            this.en = a;
            if (b != this.en) {
                this.sd("DataToolTipHeaderRowVisible", b, this.en);
            }
        }
        get d5() {
            return this.dw;
        }
        set d5(a) {
            let b = this.dw;
            this.dw = a;
            if (b != this.dw) {
                this.sd("DataToolTipHeaderTextStyle", b, this.dw);
            }
        }
        get t5() {
            return this.ti;
        }
        set t5(a) {
            let b = this.ti;
            this.ti = a;
            if (b != this.ti) {
                this.sd("DataToolTipSummaryTitleTextColor", b, this.ti);
            }
        }
        get d8() {
            return this.dz;
        }
        set d8(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.sd("DataToolTipSummaryTitleTextStyle", b, this.dz);
            }
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.sd("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.bi));
            }
        }
        get mq() {
            return this.kd;
        }
        set mq(a) {
            let b = this.kd;
            this.kd = a;
            if (b != this.kd) {
                this.sd("DataToolTipSummaryTitleText", b, this.kd);
            }
        }
        get u7() {
            return this.ux;
        }
        set u7(a) {
            let b = this.ux;
            this.ux = a;
            if (b != this.ux) {
                this.sd("DataToolTipSummaryTitleTextMargin", b, this.ux);
            }
        }
        get u6() {
            return this.uw;
        }
        set u6(a) {
            let b = this.uw;
            this.uw = a;
            if (b != this.uw) {
                this.sd("DataToolTipSummaryRowMargin", b, this.uw);
            }
        }
        get t7() {
            return this.tk;
        }
        set t7(a) {
            let b = this.tk;
            this.tk = a;
            if (b != this.tk) {
                this.sd("DataToolTipSummaryValueTextColor", b, this.tk);
            }
        }
        get ea() {
            return this.d1;
        }
        set ea(a) {
            let b = this.d1;
            this.d1 = a;
            if (b != this.d1) {
                this.sd("DataToolTipSummaryValueTextStyle", b, this.d1);
            }
        }
        get ml() {
            return this.kc;
        }
        set ml(a) {
            let b = this.kc;
            this.kc = a;
            if (b != this.kc) {
                this.sd("DataToolTipSummaryLabelText", b, this.kc);
            }
        }
        get t4() {
            return this.th;
        }
        set t4(a) {
            let b = this.th;
            this.th = a;
            if (b != this.th) {
                this.sd("DataToolTipSummaryLabelTextColor", b, this.th);
            }
        }
        get d7() {
            return this.dy;
        }
        set d7(a) {
            let b = this.dy;
            this.dy = a;
            if (b != this.dy) {
                this.sd("DataToolTipSummaryLabelTextStyle", b, this.dy);
            }
        }
        get mw() {
            return this.ke;
        }
        set mw(a) {
            let b = this.ke;
            this.ke = a;
            if (b != this.ke) {
                this.sd("DataToolTipSummaryUnitsText", b, this.ke);
            }
        }
        get t6() {
            return this.tj;
        }
        set t6(a) {
            let b = this.tj;
            this.tj = a;
            if (b != this.tj) {
                this.sd("DataToolTipSummaryUnitsTextColor", b, this.tj);
            }
        }
        get d9() {
            return this.d0;
        }
        set d9(a) {
            let b = this.d0;
            this.d0 = a;
            if (b != this.d0) {
                this.sd("DataToolTipSummaryUnitsTextStyle", b, this.d0);
            }
        }
        get u2() {
            return this.us;
        }
        set u2(a) {
            let b = this.us;
            this.us = a;
            if (b != this.us) {
                this.sd("DataToolTipBadgeMargin", b, this.us);
            }
        }
        get cd() {
            return this.cb;
        }
        set cd(a) {
            let b = this.cb;
            this.cb = a;
            if (b != this.cb) {
                this.sd("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cb));
            }
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.sd("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.bk));
            }
        }
        get m6() {
            return this.kf;
        }
        set m6(a) {
            let b = this.kf;
            this.kf = a;
            if (b != this.kf) {
                this.sd("DataToolTipUnitsText", b, this.kf);
            }
        }
        get t9() {
            return this.tm;
        }
        set t9(a) {
            let b = this.tm;
            this.tm = a;
            if (b != this.tm) {
                this.sd("DataToolTipUnitsTextColor", b, this.tm);
            }
        }
        get u9() {
            return this.uz;
        }
        set u9(a) {
            let b = this.uz;
            this.uz = a;
            if (b != this.uz) {
                this.sd("DataToolTipUnitsTextMargin", b, this.uz);
            }
        }
        get ec() {
            return this.d3;
        }
        set ec(a) {
            let b = this.d3;
            this.d3 = a;
            if (b != this.d3) {
                this.sd("DataToolTipUnitsTextStyle", b, this.d3);
            }
        }
        get u8() {
            return this.uy;
        }
        set u8(a) {
            let b = this.uy;
            this.uy = a;
            if (b != this.uy) {
                this.sd("DataToolTipTitleTextMargin", b, this.uy);
            }
        }
        get t8() {
            return this.tl;
        }
        set t8(a) {
            let b = this.tl;
            this.tl = a;
            if (b != this.tl) {
                this.sd("DataToolTipTitleTextColor", b, this.tl);
            }
        }
        get eb() {
            return this.d2;
        }
        set eb(a) {
            let b = this.d2;
            this.d2 = a;
            if (b != this.d2) {
                this.sd("DataToolTipTitleTextStyle", b, this.d2);
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.sd("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.bg));
            }
        }
        get t3() {
            return this.tg;
        }
        set t3(a) {
            let b = this.tg;
            this.tg = a;
            if (b != this.tg) {
                this.sd("DataToolTipLabelTextColor", b, this.tg);
            }
        }
        get u5() {
            return this.uv;
        }
        set u5(a) {
            let b = this.uv;
            this.uv = a;
            if (b != this.uv) {
                this.sd("DataToolTipLabelTextMargin", b, this.uv);
            }
        }
        get d6() {
            return this.dx;
        }
        set d6(a) {
            let b = this.dx;
            this.dx = a;
            if (b != this.dx) {
                this.sd("DataToolTipLabelTextStyle", b, this.dx);
            }
        }
        sm(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        ss(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        so(a, b) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        sp(a, b) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        sq(a, b) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        sn(a, b) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        sr(a, b) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        sk(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        sj(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        sh(a) {
            if (!this.gc.contains(a)) {
                this.gc.add(a);
                let b = false;
                let c = this.si(() => {
                    a();
                    this.gc.remove(a);
                }, b);
                b = c.p1;
            }
        }
        si(a, b) {
            if (!b) {
                b = true;
                if (this.ju != null) {
                    this.ju.setTimeout(a, 0);
                }
                else {
                    this.ef = a;
                }
            }
            return {
                p1: b
            };
        }
        get_fx() {
            return true;
        }
        get fx() {
            return this.get_fx();
        }
        rm(a) {
            let b = a == this.dataChart;
            if (b) {
                a.ag = this.y;
            }
            if (b) {
                a.aj = this.z;
            }
            a.ah = this.ac;
            a.ai = this.ad;
            a.be = this.cg;
            a.legend = this.legend;
            a.uk = this.fs;
            a.un = this.fy && this.fx;
            a.e9 = this.f2;
            if (b) {
                a.b5 = this.dc;
                a.b6 = this.dd;
                a.go = this.h1;
                a.so = this.uh;
                a.gp = this.h2;
                a.gq = this.h3;
                a.gr = this.h4;
                a.sp = this.ui;
                a.b2 = this.c9;
                a.d5 = this.fl;
                a.gs = this.h5;
                a.gt = this.h6;
                a.gu = this.h7;
                a.hb = this.iv;
                a.sx = this.um;
                a.hh = this.i1;
                a.hc = this.iw;
                a.hd = this.ix;
                a.sy = this.un;
                a.b7 = this.df;
                a.fj = this.f5;
                a.he = this.iy;
                a.hf = this.iz;
                a.hg = this.i0;
                a.hk = this.i2;
                a.hl = this.i3;
                a.hn = this.i5;
                a.hm = this.i4;
            }
            a.t5 = this.c5;
            a.t8 = this.c7;
            if (this.b4 != null) {
                if (!this.ev) {
                    this.q3(this.b4);
                }
            }
            if (a.bv != this.c1 || a.bt != this.cz) {
                a.cu.b4(this.ju);
                a.bv = this.c1;
                a.bt = this.cz;
            }
            a.ty = this.a5();
            if (!isNaN_(this.id)) {
                a.vp = this.id;
            }
            if (!isNaN_(this.ig)) {
                a.vr = this.ig;
            }
            if (!isNaN_(this.ie)) {
                a.vq = this.ie;
            }
            if (!isNaN_(this.ic)) {
                a.vo = this.ic;
            }
            a.bb = this.b8;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (c, d) => this.so(d.series, d.item));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (c, d) => this.sp(d.series, d.item));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (c, d) => this.sq(d.series, d.item));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (c, d) => this.sn(d.series, d.item));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (c, d) => this.sr(d.series, d.item));
            if (b) {
                a.tp = this.ur;
            }
            if (b) {
                a.kg = this.pw;
            }
            a.r8 = this.s8;
            if (b) {
                a.j4 = this.pl;
            }
            a.r7 = this.s7;
            a.ug = this.e7;
            a.ds = this.e8;
            a.gw = this.h8;
            a.g1 = this.ii;
            a.ha = this.it;
            a.gj = this.hv;
            if (a == this.dataChart) {
                this.sx();
            }
            this.rn(a);
            this.ro(a);
        }
        af(a) {
            if (!this.f1 || !this.f4 || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.r(c);
                b.add(d);
            }
            return b;
        }
        uj(a) {
            if (!this.f1 || !this.f4 || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.g(0, 0, 0, 0);
            return b;
        }
        rs(a, b) {
            if (!isNaN_(this.ih)) {
                a.gv = this.ih;
            }
            if (!isNaN_(this.io) && !a.dc) {
                a.g1 = this.io;
            }
            if (!isNaN_(this.hw) && a.dc) {
                a.g1 = this.hw;
            }
            a.legendItemBadgeShape = this.ce;
            a.a9 = this.ca;
            a.bt = this.c3;
            a.m3(this.ck);
            a.m2(this.ci);
            a.gs = this.h9;
            if (!isNaN_(this.ia)) {
                a.m4(this.ia);
            }
            if (!isNaN_(this.hu)) {
                a.f1 = this.hu;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                a.unknownValuePlotting = this.dl;
            }
            a.dx = this.fu;
            if (this.fm(a) && this.b1.isCalloutLayer(a)) {
                this.b1.setCalloutStyleUpdatingEventEnabled(a, this.fa);
                this.b1.addCalloutStyleUpdating(a, runOn(this, this.sk));
            }
            if (this.fm(a) && this.b1.isCalloutLayer(a)) {
                this.b1.setCalloutRenderStyleUpdatingEventEnabled(a, this.fa);
                this.b1.addCalloutRenderStyleUpdating(a, runOn(this, this.sj));
            }
            if (this.fm(a) && this.b1.isDataToolTipLayer(a)) {
                this.q0(a);
            }
            this.q1(a, b);
            this.q2(a, b);
            this.rt(a, b);
            this.ru(a, b);
            this.sm(a);
        }
        get e9() {
            return this.ei;
        }
        q9() {
            if (!this.ei) {
                this.ei = true;
                this.rj();
            }
        }
        rj() {
            this.rk();
            this.rl();
        }
        st(a) {
            if (this.ev && this.b4 != null) {
                this.ev = false;
                if (a != null) {
                    a.detachDataLegend(this.b4);
                }
            }
            this.s0(a);
        }
        q2(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ag, b);
                c.trendLineThickness = this.iu;
                c.trendLineType = this.dj;
                c.trendLinePeriod = this.jo;
            }
        }
        cn(a, b) {
            if (this.cp == null || this.cp.count == 0) {
                if (this.gd == null || this.gd.count == 0) {
                    return a != null && a.d3 ? 1 : 2;
                }
                let c = ArrayExtension.getModulus$1(MarkerType_$type, this.gd, b);
                if (c == 0 && a != null) {
                    c = a.d3 ? 1 : 2;
                    if (c == 2) {
                        c = this.cm(a);
                    }
                }
                if (c == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return c;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.cp, b);
        }
        cm(a) {
            return 2;
        }
        jz() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.f1) {
                return this.gj();
            }
            return null;
        }
        get_fr() {
            if (this.itemsSource == null && this.f1) {
                if (this.gj() != null) {
                    return true;
                }
            }
            return false;
        }
        get fr() {
            return this.get_fr();
        }
        gj() {
            return null;
        }
        sd(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.st(typeCast(XamDataChart.$, b));
                    this.rm(typeCast(XamDataChart.$, c));
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.jz();
                    this.y = this.af(this.aa);
                    this.z = this.af(this.ae);
                    break;
                case "ActualBrushes":
                    this.r7((d) => d.ag = this.y, true, a);
                    break;
                case "ActualOutlines":
                    this.r7((d) => d.aj = this.z, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.f1) {
                        this.y = this.af(this.aa);
                        this.z = this.af(this.ae);
                    }
                    this.bb.itemsSource = this.actualItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.jz();
                    break;
                case "IncludedProperties":
                    this.bb.includedProperties = this.q;
                    break;
                case "ExcludedProperties":
                    this.bb.excludedProperties = this.o;
                    break;
                case "Brushes":
                    this.y = this.af(this.aa);
                    break;
                case "Outlines":
                    this.z = this.af(this.ae);
                    break;
                case "Legend":
                    this.r5((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.r5((d) => d.bv = this.c1);
                    break;
                case "HighlightingBehavior":
                    this.r5((d) => d.bt = this.cz);
                    break;
                case "LegendHighlightingMode":
                    this.r5((d) => d.bb = this.b8);
                    break;
                case "LegendItemBadgeShape":
                    this.r5((d) => d.bd = this.ce);
                    break;
                case "LegendItemBadgeMode":
                    this.r5((d) => d.bc = this.ca);
                    break;
                case "PlotAreaMarginLeft":
                    this.r5((d) => d.vp = this.id);
                    break;
                case "PlotAreaMarginTop":
                    this.r5((d) => d.vr = this.ig);
                    break;
                case "PlotAreaMarginRight":
                    this.r5((d) => d.vq = this.ie);
                    break;
                case "PlotAreaMarginBottom":
                    this.r5((d) => d.vo = this.ic);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.r5((d) => d.ty = this.a5());
                    break;
                case "IsHorizontalZoomEnabled":
                    this.r5((d) => d.uk = this.fs);
                    break;
                case "IsVerticalZoomEnabled":
                    this.r5((d) => d.un = this.fy);
                    break;
                case "WindowRect":
                    this.r6((d) => d.tp = this.ur, false);
                    break;
                case "WindowRectMinWidth":
                    this.r6((d) => d.hl = this.i3, false);
                    break;
                case "WindowRectMinHeight":
                    this.r6((d) => d.hk = this.i2, false);
                    break;
                case "WindowSizeMinWidth":
                    this.r6((d) => d.hn = this.i5, false);
                    break;
                case "WindowSizeMinHeight":
                    this.r6((d) => d.hm = this.i4, false);
                    break;
                case "Title":
                    this.r6((d) => d.kg = this.pw, false);
                    break;
                case "Subtitle":
                    this.r6((d) => d.j4 = this.pl, false);
                    break;
                case "TitleAlignment":
                    this.r5((d) => d.r8 = this.s8);
                    break;
                case "SubtitleAlignment":
                    this.r5((d) => d.r7 = this.s7);
                    break;
                case "UnknownValuePlotting":
                    this.rc((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            d.unknownValuePlotting = this.dl;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.rc((d) => d.dx = this.fu);
                    break;
                case "Thickness":
                    if (!isNaN_(this.io)) {
                        this.rg((d) => d.g1 = this.io);
                    }
                    break;
                case "OutlineMode":
                    this.rg((d) => d.bt = this.c3);
                    break;
                case "MarkerFillOpacity":
                    this.rg((d) => d.gs = this.h9);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.ia)) {
                        this.rg((d) => d.m4(this.ia));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.rg((d) => d.m3(this.ck));
                    break;
                case "MarkerFillMode":
                    this.rg((d) => d.m2(this.ci));
                    break;
                case "Resolution":
                    if (!isNaN_(this.ih)) {
                        this.rc((d) => d.gv = this.ih);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.hu)) {
                        this.rc((d) => d.f1 = this.hu);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.rb((d) => {
                        d.ct = this.f0;
                        d.cv = this.f0;
                    }, true);
                    break;
                case "ShouldPanOnMaximumZoom":
                    this.r5((d) => d.e9 = this.f2);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.rd((d, e) => this.q2(d, e));
                    break;
                case "MarkerMaxCount":
                    this.rh((d, e) => this.q1(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.sb));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.sb));
                    }
                    this.rh((f, g) => this.q1(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.r5((f) => f.be = this.cg);
                    this.rh((f, g) => this.q1(f, g));
                    break;
                case "MarkerBrushes":
                    this.r5((f) => f.ah = this.ac);
                    break;
                case "MarkerOutlines":
                    this.r5((f) => f.ai = this.ad);
                    break;
                case "AlignsGridLinesToPixels":
                    this.r5((f) => f.ug = this.e7);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.r5((f) => f.ds = this.e8);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                    let f = this.si(runOn(this, this.q8), this.ft);
                    this.ft = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.mk:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.r9(a, b, c);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.r5((g) => g.b5 = this.dc);
                    break;
                case "VerticalViewScrollbarMode":
                    this.r5((g) => g.b6 = this.dd);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.r5((g) => g.go = this.h1);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.r5((g) => g.so = this.uh);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.r5((g) => g.gr = this.h4);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.r5((g) => g.sp = this.ui);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.r5((g) => g.gs = this.h5);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.r5((g) => g.hb = this.iv);
                    break;
                case "VerticalViewScrollbarFill":
                    this.r5((g) => g.sx = this.um);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.r5((g) => g.hd = this.ix);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.r5((g) => g.sy = this.un);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.r5((g) => g.he = this.iy);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.r5((g) => g.gp = this.h2);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.r5((g) => g.gq = this.h3);
                    break;
                case DomainChart.od:
                    this.r5((g) => g.d5 = this.fl);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.r5((g) => g.gu = this.h7);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.r5((g) => g.gt = this.h6);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.r5((g) => g.b7 = this.df);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.r5((g) => g.b2 = this.c9);
                    break;
            }
            this.se(a, b, c);
            this.sf(a, b, c);
        }
        r9(a, b, c) {
            if (!this.f6.containsKey(a)) {
                this.f7.add(a);
                this.f6.addItem(a, c);
            }
            else {
                this.f6.item(a, c);
            }
            this.re((d) => {
                if (this.b1.isDataToolTipLayer(d)) {
                    this.q0(d);
                }
            });
        }
        q0(a) {
            for (let b = 0; b < this.f7.count; b++) {
                let c = this.f7._inner[b];
                let d = this.f6.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.b1.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        sb(a, b) {
            this.rh((c, d) => this.q1(c, d));
        }
        get ay() {
            return this.as;
        }
        get au() {
            return this.ao;
        }
        get at() {
            return this.an;
        }
        get dr() {
            return this.dp;
        }
        get a2() {
            return this.a0;
        }
        get ax() {
            return this.ar;
        }
        get aw() {
            return this.aq;
        }
        get av() {
            return this.ap;
        }
        get a1() {
            return this.az;
        }
        get ok() {
            return this.kl;
        }
        set ok(a) {
            let b = this.kl;
            this.kl = a;
            if (b != a) {
                this.ar.n();
                this.ds.b(this.kl, (c, d, e) => this.ar.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get n1() {
            return this.kj;
        }
        set n1(a) {
            let b = this.kj;
            this.kj = a;
            if (b != a) {
                this.aq.n();
                this.ds.b(this.kj, (c, d, e) => this.aq.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get oi() {
            return this.kk;
        }
        set oi(a) {
            let b = this.kk;
            this.kk = a;
            if (b != a) {
                this.ap.n();
                this.ds.b(this.kk, (c, d, e) => this.ap.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get om() {
            return this.km;
        }
        set om(a) {
            let b = this.km;
            this.km = a;
            if (b != a) {
                this.az.n();
                this.dt.a(this.km, (c, d, e) => this.az.j.add(((() => {
                    let $ret = new ChartSummaryDescription(2, c, d);
                    $ret.n = e;
                    return $ret;
                })())));
            }
        }
        get itemsSource() {
            return this.jq;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.jq = a;
                this.sd("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.jp;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.jp = a;
                this.sd("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get q() {
            return this.h;
        }
        set q(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.sd("IncludedProperties", b, this.h);
            }
        }
        get o() {
            return this.g;
        }
        set o(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.sd("ExcludedProperties", b, this.g);
            }
        }
        get aa() {
            return this.t;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.t = a;
                this.sd("Brushes", b, this.aa);
            }
        }
        get ae() {
            return this.w;
        }
        set ae(a) {
            let b = this.ae;
            if (a != b) {
                this.w = a;
                this.sd("Outlines", b, this.ae);
            }
        }
        get y() {
            return this.r;
        }
        set y(a) {
            let b = this.r;
            if (a != b) {
                this.r = a;
                this.sd("ActualBrushes", b, this.y);
            }
        }
        get z() {
            return this.s;
        }
        set z(a) {
            let b = this.s;
            if (a != b) {
                this.s = a;
                this.sd("ActualOutlines", b, this.z);
            }
        }
        get legend() {
            return this.b2;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.b2 = a;
                this.sd("Legend", b, this.legend);
            }
        }
        get_fs() {
            return this.eu;
        }
        set_fs(a) {
            let b = this.fs;
            if (a != b) {
                this.eu = a;
                this.sd("IsHorizontalZoomEnabled", b, this.fs);
            }
        }
        get fs() {
            return this.get_fs();
        }
        set fs(a) {
            this.set_fs(a);
        }
        get_fy() {
            return this.ex;
        }
        set_fy(a) {
            let b = this.fy;
            if (a != b) {
                this.ex = a;
                this.sd("IsVerticalZoomEnabled", b, this.fy);
            }
        }
        get fy() {
            return this.get_fy();
        }
        set fy(a) {
            this.set_fy(a);
        }
        get_f1() {
            return this.ez;
        }
        set_f1(a) {
            let b = this.f1;
            if (a != b) {
                this.ez = a;
                this.sd("ShouldDisplayMockData", b, this.f1);
            }
        }
        get f1() {
            return this.get_f1();
        }
        set f1(a) {
            this.set_f1(a);
        }
        get_f4() {
            return this.e5;
        }
        set_f4(a) {
            let b = this.f4;
            if (a != b) {
                this.e5 = a;
                this.sd("ShouldUseSkeletonStyleForMockData", b, this.f4);
            }
        }
        get f4() {
            return this.get_f4();
        }
        set f4(a) {
            this.set_f4(a);
        }
        get_fu() {
            return this.ew;
        }
        set_fu(a) {
            let b = this.fu;
            if (a != b) {
                this.ew = a;
                this.sd("IsSeriesHighlightingEnabled", b, this.fu);
            }
        }
        get fu() {
            return this.get_fu();
        }
        set fu(a) {
            this.set_fu(a);
        }
        get ur() {
            return this.up;
        }
        set ur(a) {
            let b = this.ur;
            if (Rect.l_op_Inequality(a, b)) {
                this.up = a;
                this.sd("WindowRect", b, this.ur);
            }
        }
        get uq() {
            return this.dataChart != null ? this.dataChart.to : Rect.empty;
        }
        get pw() {
            return this.kp;
        }
        set pw(a) {
            let b = this.pw;
            if (a != b) {
                this.kp = a;
                this.sd("Title", b, this.pw);
            }
        }
        get pl() {
            return this.kn;
        }
        set pl(a) {
            let b = this.pl;
            if (a != b) {
                this.kn = a;
                this.sd("Subtitle", b, this.pl);
            }
        }
        get s8() {
            return this.s6;
        }
        set s8(a) {
            let b = this.s8;
            if (b != a) {
                this.s6 = a;
                this.sd("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.s8));
            }
        }
        get s7() {
            return this.s5;
        }
        set s7(a) {
            let b = this.s7;
            if (b != a) {
                this.s5 = a;
                this.sd("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.s7));
            }
        }
        get dl() {
            return this.dk;
        }
        set dl(a) {
            let b = this.dl;
            if (a != b) {
                this.dk = a;
                this.sd("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.dl));
            }
        }
        get_ih() {
            return this.g6;
        }
        set_ih(a) {
            let b = this.ih;
            if (a != b) {
                this.g6 = a;
                this.sd("Resolution", b, this.ih);
            }
        }
        get ih() {
            return this.get_ih();
        }
        set ih(a) {
            this.set_ih(a);
        }
        get io() {
            return this.hc;
        }
        set io(a) {
            let b = this.io;
            if (a != b) {
                this.hc = a;
                this.sd("Thickness", b, this.io);
            }
        }
        get c3() {
            return this.c2;
        }
        set c3(a) {
            let b = this.c3;
            if (a != b) {
                this.c2 = a;
                this.sd("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.c3));
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            let b = this.ck;
            if (a != b) {
                this.cj = a;
                this.sd("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.ck));
            }
        }
        get ci() {
            return this.ch;
        }
        set ci(a) {
            let b = this.ci;
            if (a != b) {
                this.ch = a;
                this.sd("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.ci));
            }
        }
        get h9() {
            return this.gz;
        }
        set h9(a) {
            let b = this.h9;
            if (a != b) {
                this.gz = a;
                this.sd("MarkerFillOpacity", b, this.h9);
            }
        }
        get ia() {
            return this.g0;
        }
        set ia(a) {
            let b = this.ia;
            if (a != b) {
                this.g0 = a;
                this.sd("MarkerThickness", b, this.ia);
            }
        }
        get cp() {
            return this.co;
        }
        set cp(a) {
            let b = this.cp;
            if (a != b) {
                this.co = a;
                this.sd("MarkerTypes", b, this.cp);
            }
        }
        get cg() {
            return this.cf;
        }
        set cg(a) {
            let b = this.cg;
            if (a != b) {
                this.cf = a;
                this.sd("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.cg));
            }
        }
        get ac() {
            return this.u;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.u = a;
                this.sd("MarkerBrushes", b, this.ac);
            }
        }
        get ad() {
            return this.v;
        }
        set ad(a) {
            let b = this.ad;
            if (!Base.equalsStatic(a, b)) {
                this.v = a;
                this.sd("MarkerOutlines", b, this.ad);
            }
        }
        get jm() {
            return this.jd;
        }
        set jm(a) {
            let b = this.jd;
            if (a != b) {
                this.jd = a;
                this.sd("MarkerMaxCount", b, this.jd);
            }
        }
        get hu() {
            return this.gk;
        }
        set hu(a) {
            let b = this.hu;
            if (a != b) {
                this.gk = a;
                this.sd("AreaFillOpacity", b, this.hu);
            }
        }
        get e8() {
            return this.eh;
        }
        set e8(a) {
            let b = this.eh;
            if (a != b) {
                this.eh = a;
                this.sd("AnimateSeriesWhenAxisRangeChanges", b, this.eh);
            }
        }
        get ag() {
            return this.x;
        }
        set ag(a) {
            let b = this.ag;
            if (a != b) {
                this.x = a;
                this.sd("TrendLineBrushes", b, this.ag);
            }
        }
        get dj() {
            return this.di;
        }
        set dj(a) {
            let b = this.dj;
            if (a != b) {
                this.di = a;
                this.sd("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.dj));
            }
        }
        get iu() {
            return this.hi;
        }
        set iu(a) {
            let b = this.iu;
            if (a != b) {
                this.hi = a;
                this.sd("TrendLineThickness", b, this.iu);
            }
        }
        get e7() {
            return this.eg;
        }
        set e7(a) {
            let b = this.e7;
            if (a != b) {
                this.eg = a;
                this.sd("AlignsGridLinesToPixels", b, this.e7);
            }
        }
        get id() {
            return this.g3;
        }
        set id(a) {
            let b = this.g3;
            this.g3 = a;
            if (a != b) {
                this.sd("PlotAreaMarginLeft", b, a);
            }
        }
        get ig() {
            return this.g5;
        }
        set ig(a) {
            let b = this.g5;
            this.g5 = a;
            if (a != b) {
                this.sd("PlotAreaMarginTop", b, a);
            }
        }
        get ie() {
            return this.g4;
        }
        set ie(a) {
            let b = this.g4;
            this.g4 = a;
            if (a != b) {
                this.sd("PlotAreaMarginRight", b, a);
            }
        }
        get ic() {
            return this.g2;
        }
        set ic(a) {
            let b = this.g2;
            this.g2 = a;
            if (a != b) {
                this.sd("PlotAreaMarginBottom", b, a);
            }
        }
        sc() {
        }
        get a4() {
            return this.a3;
        }
        set a4(a) {
            let b = this.a4;
            if (a != b) {
                this.a3 = a;
                this.sd("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.a4));
            }
        }
        a5() {
            return this.a4;
        }
        get c5() {
            return this.c4;
        }
        set c5(a) {
            let b = this.c5;
            if (a != b) {
                this.c4 = a;
                this.sd("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.c5));
            }
        }
        get c7() {
            return this.c6;
        }
        set c7(a) {
            let b = this.c7;
            if (a != b) {
                this.c6 = a;
                this.sd("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.c7));
            }
        }
        get c1() {
            return this.c0;
        }
        set c1(a) {
            let b = this.c1;
            if (a != b) {
                this.c0 = a;
                this.sd("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.c1));
            }
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cz;
            if (a != b) {
                this.cy = a;
                this.sd("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.cz));
            }
        }
        get b8() {
            return this.b7;
        }
        set b8(a) {
            let b = this.b8;
            if (a != b) {
                this.b7 = a;
                this.sd("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.b8));
            }
        }
        get ce() {
            return this.cc;
        }
        set ce(a) {
            let b = this.ce;
            if (a != b) {
                this.cc = a;
                this.sd("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.ce));
            }
        }
        get ca() {
            return this.b9;
        }
        set ca(a) {
            let b = this.ca;
            if (a != b) {
                this.b9 = a;
                this.sd("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.ca));
            }
        }
        get jo() {
            return this.jg;
        }
        set jo(a) {
            let b = this.jo;
            if (a != b) {
                this.jg = a;
                this.sd("TrendLinePeriod", b, this.jo);
            }
        }
        get dh() {
            return this.dg;
        }
        set dh(a) {
            let b = this.dh;
            if (a != b) {
                this.dg = a;
                this.sd("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.dh));
            }
        }
        get a7() {
            return this.a6;
        }
        set a7(a) {
            let b = this.a7;
            if (a != b) {
                this.a6 = a;
                this.sd("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.a7));
            }
        }
        get fd() {
            return this.em;
        }
        set fd(a) {
            let b = this.fd;
            if (a != b) {
                this.em = a;
                this.sd("CrosshairsSnapToData", b, this.fd);
            }
        }
        get t1() {
            return this.te;
        }
        set t1(a) {
            let b = this.t1;
            if (a != b) {
                this.te = a;
                this.sd("CrosshairsLineVerticalStroke", b, this.t1);
            }
        }
        get hw() {
            return this.gm;
        }
        set hw(a) {
            let b = this.hw;
            if (a != b) {
                this.gm = a;
                this.sd("CrosshairsLineThickness", b, this.hw);
            }
        }
        get t0() {
            return this.td;
        }
        set t0(a) {
            let b = this.t0;
            if (a != b) {
                this.td = a;
                this.sd("CrosshairsLineHorizontalStroke", b, this.t0);
            }
        }
        get fc() {
            return this.el;
        }
        set fc(a) {
            let b = this.fc;
            if (a != b) {
                this.el = a;
                this.sd("CrosshairsAnnotationEnabled", b, this.fc);
            }
        }
        get tw() {
            return this.s9;
        }
        set tw(a) {
            let b = this.tw;
            if (a != b) {
                this.s9 = a;
                this.sd("CrosshairsAnnotationXAxisBackground", b, this.tw);
            }
        }
        get ty() {
            return this.tb;
        }
        set ty(a) {
            let b = this.ty;
            if (a != b) {
                this.tb = a;
                this.sd("CrosshairsAnnotationYAxisBackground", b, this.ty);
            }
        }
        get tx() {
            return this.ta;
        }
        set tx(a) {
            let b = this.tx;
            if (a != b) {
                this.ta = a;
                this.sd("CrosshairsAnnotationXAxisTextColor", b, this.tx);
            }
        }
        get tz() {
            return this.tc;
        }
        set tz(a) {
            let b = this.tz;
            if (a != b) {
                this.tc = a;
                this.sd("CrosshairsAnnotationYAxisTextColor", b, this.tz);
            }
        }
        get jh() {
            return this.i8;
        }
        set jh(a) {
            let b = this.jh;
            if (a != b) {
                this.i8 = a;
                this.sd("CrosshairsAnnotationXAxisPrecision", b, this.jh);
            }
        }
        get ji() {
            return this.i9;
        }
        set ji(a) {
            let b = this.ji;
            if (a != b) {
                this.i9 = a;
                this.sd("CrosshairsAnnotationYAxisPrecision", b, this.ji);
            }
        }
        get f0() {
            return this.ey;
        }
        set f0(a) {
            let b = this.f0;
            if (a != b) {
                this.ey = a;
                this.sd("ShouldAvoidAxisAnnotationCollisions", b, this.f0);
            }
        }
        get f2() {
            return this.e0;
        }
        set f2(a) {
            let b = this.e0;
            if (a != b) {
                this.e0 = a;
                this.sd("ShouldPanOnMaximumZoom", b, this.e0);
            }
        }
        get fj() {
            return this.es;
        }
        set fj(a) {
            let b = this.fj;
            if (a != b) {
                this.es = a;
                this.sd("FinalValueAnnotationsVisible", b, this.fj);
            }
        }
        get ub() {
            return this.to;
        }
        set ub(a) {
            let b = this.ub;
            if (a != b) {
                this.to = a;
                this.sd("FinalValueAnnotationsBackground", b, this.ub);
            }
        }
        get uc() {
            return this.tp;
        }
        set uc(a) {
            let b = this.uc;
            if (a != b) {
                this.tp = a;
                this.sd("FinalValueAnnotationsTextColor", b, this.uc);
            }
        }
        get jl() {
            return this.jc;
        }
        set jl(a) {
            let b = this.jl;
            if (a != b) {
                this.jc = a;
                this.sd("FinalValueAnnotationsPrecision", b, this.jl);
            }
        }
        get fb() {
            return this.ek;
        }
        set fb(a) {
            let b = this.fb;
            if (a != b) {
                this.ek = a;
                this.sd("CalloutsVisible", b, this.fb);
            }
        }
        get fa() {
            return this.ej;
        }
        set fa(a) {
            let b = this.fa;
            if (a != b) {
                this.ej = a;
                this.sd("CalloutStyleUpdatingEventEnabled", b, this.fa);
            }
        }
        get calloutsItemsSource() {
            return this.gh;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.gh = a;
                this.sd("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.sd("CalloutsAllowedPositions", b, this.ai);
            }
        }
        get k7() {
            return this.j7;
        }
        set k7(a) {
            let b = this.k7;
            if (a != b) {
                this.j7 = a;
                this.sd("CalloutsXMemberPath", b, this.k7);
            }
        }
        get k9() {
            return this.j8;
        }
        set k9(a) {
            let b = this.k9;
            if (a != b) {
                this.j8 = a;
                this.sd("CalloutsYMemberPath", b, this.k9);
            }
        }
        get k3() {
            return this.j6;
        }
        set k3(a) {
            let b = this.k3;
            if (a != b) {
                this.j6 = a;
                this.sd("CalloutsLabelMemberPath", b, this.k3);
            }
        }
        get k0() {
            return this.j5;
        }
        set k0(a) {
            let b = this.k0;
            if (a != b) {
                this.j5 = a;
                this.sd("CalloutsContentMemberPath", b, this.k0);
            }
        }
        get dc() {
            return this.da;
        }
        set dc(a) {
            let b = this.da;
            this.da = a;
            if (b != this.da) {
                this.sd("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.da));
            }
        }
        get dd() {
            return this.db;
        }
        set dd(a) {
            let b = this.db;
            this.db = a;
            if (b != this.db) {
                this.sd("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.db));
            }
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            let b = this.c8;
            this.c8 = a;
            if (b != this.c8) {
                this.sd("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.c8));
            }
        }
        get df() {
            return this.de;
        }
        set df(a) {
            let b = this.de;
            this.de = a;
            if (b != this.de) {
                this.sd("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.de));
            }
        }
        get uh() {
            return this.tq;
        }
        set uh(a) {
            let b = this.tq;
            this.tq = a;
            if (b != this.tq) {
                this.sd("HorizontalViewScrollbarFill", b, this.tq);
            }
        }
        get ui() {
            return this.tr;
        }
        set ui(a) {
            let b = this.tr;
            this.tr = a;
            if (b != this.tr) {
                this.sd("HorizontalViewScrollbarOutline", b, this.tr);
            }
        }
        get h5() {
            return this.gv;
        }
        set h5(a) {
            let b = this.gv;
            this.gv = a;
            if (b != this.gv) {
                this.sd("HorizontalViewScrollbarStrokeThickness", b, this.gv);
            }
        }
        get h4() {
            return this.gu;
        }
        set h4(a) {
            let b = this.gu;
            this.gu = a;
            if (b != this.gu) {
                this.sd("HorizontalViewScrollbarMaxOpacity", b, this.gu);
            }
        }
        get h1() {
            return this.gr;
        }
        set h1(a) {
            let b = this.gr;
            this.gr = a;
            if (b != this.gr) {
                this.sd("HorizontalViewScrollbarCornerRadius", b, this.gr);
            }
        }
        get h2() {
            return this.gs;
        }
        set h2(a) {
            let b = this.gs;
            this.gs = a;
            if (b != this.gs) {
                this.sd("HorizontalViewScrollbarHeight", b, this.gs);
            }
        }
        get h3() {
            return this.gt;
        }
        set h3(a) {
            let b = this.gt;
            this.gt = a;
            if (b != this.gt) {
                this.sd("HorizontalViewScrollbarInset", b, this.gt);
            }
        }
        get h7() {
            return this.gx;
        }
        set h7(a) {
            let b = this.gx;
            this.gx = a;
            if (b != this.gx) {
                this.sd("HorizontalViewScrollbarTrackStartInset", b, this.gx);
            }
        }
        get h6() {
            return this.gw;
        }
        set h6(a) {
            let b = this.gw;
            this.gw = a;
            if (b != this.gw) {
                this.sd("HorizontalViewScrollbarTrackEndInset", b, this.gw);
            }
        }
        get fl() {
            return this.et;
        }
        set fl(a) {
            let b = this.et;
            this.et = a;
            if (b != this.et) {
                this.sd(DomainChart.od, b, this.et);
            }
        }
        get um() {
            return this.tu;
        }
        set um(a) {
            let b = this.tu;
            this.tu = a;
            if (b != this.tu) {
                this.sd("VerticalViewScrollbarFill", b, this.tu);
            }
        }
        get un() {
            return this.tv;
        }
        set un(a) {
            let b = this.tv;
            this.tv = a;
            if (b != this.tv) {
                this.sd("VerticalViewScrollbarOutline", b, this.tv);
            }
        }
        get iy() {
            return this.hm;
        }
        set iy(a) {
            let b = this.hm;
            this.hm = a;
            if (b != this.hm) {
                this.sd("VerticalViewScrollbarStrokeThickness", b, this.hm);
            }
        }
        get ix() {
            return this.hl;
        }
        set ix(a) {
            let b = this.hl;
            this.hl = a;
            if (b != this.hl) {
                this.sd("VerticalViewScrollbarMaxOpacity", b, this.hl);
            }
        }
        get iv() {
            return this.hj;
        }
        set iv(a) {
            let b = this.hj;
            this.hj = a;
            if (b != this.hj) {
                this.sd("VerticalViewScrollbarCornerRadius", b, this.hj);
            }
        }
        get i1() {
            return this.hp;
        }
        set i1(a) {
            let b = this.hp;
            this.hp = a;
            if (b != this.hp) {
                this.sd("VerticalViewScrollbarWidth", b, this.hp);
            }
        }
        get iw() {
            return this.hk;
        }
        set iw(a) {
            let b = this.hk;
            this.hk = a;
            if (b != this.hk) {
                this.sd("VerticalViewScrollbarInset", b, this.hk);
            }
        }
        get i0() {
            return this.ho;
        }
        set i0(a) {
            let b = this.ho;
            this.ho = a;
            if (b != this.ho) {
                this.sd("VerticalViewScrollbarTrackStartInset", b, this.ho);
            }
        }
        get iz() {
            return this.hn;
        }
        set iz(a) {
            let b = this.hn;
            this.hn = a;
            if (b != this.hn) {
                this.sd("VerticalViewScrollbarTrackEndInset", b, this.hn);
            }
        }
        get f5() {
            return this.e6;
        }
        set f5(a) {
            let b = this.e6;
            this.e6 = a;
            if (b != this.e6) {
                this.sd(DomainChart.qp, b, this.e6);
            }
        }
        get i3() {
            return this.hr;
        }
        set i3(a) {
            let b = this.hr;
            this.hr = a;
            if (b != this.hr) {
                this.sd("WindowRectMinWidth", b, this.hr);
            }
        }
        get i2() {
            return this.hq;
        }
        set i2(a) {
            let b = this.hq;
            this.hq = a;
            if (b != this.hq) {
                this.sd("WindowRectMinHeight", b, this.hq);
            }
        }
        get i5() {
            return this.ht;
        }
        set i5(a) {
            let b = this.ht;
            this.ht = a;
            if (b != this.ht) {
                this.sd("WindowSizeMinWidth", b, this.ht);
            }
        }
        get i4() {
            return this.hs;
        }
        set i4(a) {
            let b = this.hs;
            this.hs = a;
            if (b != this.hs) {
                this.sd("WindowSizeMinHeight", b, this.hs);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type]);
    DomainChart.j4 = /*@__PURE__*/ new Random(0);
    DomainChart.j3 = /*@__PURE__*/ new Random(0);
    DomainChart.mk = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.od = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.qp = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
