/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebPivotDimensionDescriptionMetadata } from "./WebPivotDimensionDescriptionMetadata";
import { WebFilteringExpressionsTreeDescriptionMetadata } from "./WebFilteringExpressionsTreeDescriptionMetadata";
import { WebPivotDimensionDetailDescription } from "./WebPivotDimensionDetailDescription";
/**
 * @hidden
 */
export let WebPivotDimensionDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebPivotDimensionDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebPivotDimensionDetailDescriptionMetadata.a == null) {
                WebPivotDimensionDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebPivotDimensionDetailDescriptionMetadata.c(WebPivotDimensionDetailDescriptionMetadata.a);
            }
            if (a.j(WebPivotDimensionDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebPivotDimensionDetailDescriptionMetadata.a);
            WebPivotDimensionDescriptionMetadata.d(a);
            WebFilteringExpressionsTreeDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:PivotDimensionDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("ChildLevel", "ExportedType:WebPivotDimension");
            a.item("MemberName", "String");
            a.item("Enabled", "Boolean");
            a.item("Filter", "ExportedType:WebFilteringExpressionsTree");
            a.item("SortDirection", "ExportedType:string:SortingDirection");
            a.item("SortDirection@names", "None;Asc;Desc");
            a.item("DataType", "ExportedType:string:GridColumnDataType");
            a.item("DataType@names", "String;Number;Boolean;Date;DateTime;Time;Currency;Percent;Image");
            a.item("Width", "String");
            a.item("Level", "Number:double");
            a.item("MemberFunctionRef", "EventRef::memberFunction");
        }
        static d(a) {
            WebPivotDimensionDetailDescriptionMetadata.b(a);
            a.aa("WebPivotDimensionDetail", () => new WebPivotDimensionDetailDescription());
            a.z("WebPivotDimensionDetail", WebPivotDimensionDetailDescriptionMetadata.a);
        }
    }
    WebPivotDimensionDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebPivotDimensionDetailDescriptionMetadata, 'WebPivotDimensionDetailDescriptionMetadata');
    WebPivotDimensionDetailDescriptionMetadata.a = null;
    return WebPivotDimensionDetailDescriptionMetadata;
})();
