/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.uy = null;
            this.u2 = null;
            this.uw = null;
            this.uu = null;
            this.up = 0;
            this.uz = null;
            this.uv = null;
            this.ux = null;
            this.s7 = false;
            this.s8 = false;
            this.u0 = null;
            this.u1 = null;
            this.tu = 0;
            this.tx = 0;
            this.tt = 0;
            this.tw = 0;
            this.tv = 0;
            this.ty = 0;
            this.t4 = 0;
            this.ut = null;
            this.s9 = false;
            this.ta = false;
            this.tr = 0;
            this.ts = 0;
            this.te = false;
            this.tb = false;
            this.td = false;
            this.u3 = null;
            this.tf = false;
            this.uq = 0;
            this.t6 = 0;
            this.t5 = 0;
            this.t7 = 0;
            this.s1 = null;
            this.s2 = null;
            this.tc = false;
            this.tz = 0;
            this.t0 = 0;
            this.t1 = 0;
            this.t2 = 0;
            this.t3 = 0;
            this.s5 = false;
            this.s6 = false;
        }
        get tooltipTemplateRef() {
            return this.uy;
        }
        set tooltipTemplateRef(a) {
            this.uy = a;
            this.e("TooltipTemplateRef");
        }
        get width() {
            return this.u2;
        }
        set width(a) {
            this.u2 = a;
            this.e("Width");
        }
        get height() {
            return this.uw;
        }
        set height(a) {
            this.uw = a;
            this.e("Height");
        }
        get background() {
            return this.uu;
        }
        set background(a) {
            this.uu = a;
            this.e("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.up;
        }
        set transitionInDuration(a) {
            this.up = a;
            this.e("TransitionInDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.uz;
        }
        set transitionInEasingFunctionRef(a) {
            this.uz = a;
            this.e("TransitionInEasingFunctionRef");
        }
        get chartType() {
            return this.uv;
        }
        set chartType(a) {
            this.uv = a;
            this.e("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.ux;
        }
        set markerCollisionAvoidance(a) {
            this.ux = a;
            this.e("MarkerCollisionAvoidance");
        }
        get isSplineShapePartOfRange() {
            return this.s7;
        }
        set isSplineShapePartOfRange(a) {
            this.s7 = a;
            this.e("IsSplineShapePartOfRange");
        }
        get isTransitionInEnabled() {
            return this.s8;
        }
        set isTransitionInEnabled(a) {
            this.s8 = a;
            this.e("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.u0;
        }
        set transitionInMode(a) {
            this.u0 = a;
            this.e("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.u1;
        }
        set transitionInSpeedType(a) {
            this.u1 = a;
            this.e("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.tu;
        }
        set xAxisInterval(a) {
            this.tu = a;
            this.e("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.tx;
        }
        set xAxisMinorInterval(a) {
            this.tx = a;
            this.e("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.tt;
        }
        set xAxisGap(a) {
            this.tt = a;
            this.e("XAxisGap");
        }
        get xAxisMinimumGapSize() {
            return this.tw;
        }
        set xAxisMinimumGapSize(a) {
            this.tw = a;
            this.e("XAxisMinimumGapSize");
        }
        get xAxisMaximumGap() {
            return this.tv;
        }
        set xAxisMaximumGap(a) {
            this.tv = a;
            this.e("XAxisMaximumGap");
        }
        get xAxisOverlap() {
            return this.ty;
        }
        set xAxisOverlap(a) {
            this.ty = a;
            this.e("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.t4;
        }
        set yAxisInterval(a) {
            this.t4 = a;
            this.e("YAxisInterval");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.ut;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.ut = a;
            this.e("AutoMarginAndAngleUpdateMode");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.s9;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.s9 = a;
            this.e("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.ta;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.ta = a;
            this.e("ShouldConsiderAutoRotationForInitialLabels");
        }
        get autoExpandMarginExtraPadding() {
            return this.tr;
        }
        set autoExpandMarginExtraPadding(a) {
            this.tr = a;
            this.e("AutoExpandMarginExtraPadding");
        }
        get autoExpandMarginMaximumValue() {
            return this.ts;
        }
        set autoExpandMarginMaximumValue(a) {
            this.ts = a;
            this.e("AutoExpandMarginMaximumValue");
        }
        get yAxisFavorLabellingScaleEnd() {
            return this.te;
        }
        set yAxisFavorLabellingScaleEnd(a) {
            this.te = a;
            this.e("YAxisFavorLabellingScaleEnd");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.tb;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.tb = a;
            this.e("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.td;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.td = a;
            this.e("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisAutoRangeBufferMode() {
            return this.u3;
        }
        set yAxisAutoRangeBufferMode(a) {
            this.u3 = a;
            this.e("YAxisAutoRangeBufferMode");
        }
        get yAxisIsLogarithmic() {
            return this.tf;
        }
        set yAxisIsLogarithmic(a) {
            this.tf = a;
            this.e("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.uq;
        }
        set yAxisLogarithmBase(a) {
            this.uq = a;
            this.e("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.t6;
        }
        set yAxisMinimumValue(a) {
            this.t6 = a;
            this.e("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.t5;
        }
        set yAxisMaximumValue(a) {
            this.t5 = a;
            this.e("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.t7;
        }
        set yAxisMinorInterval(a) {
            this.t7 = a;
            this.e("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.s1;
        }
        set negativeBrushes(a) {
            this.s1 = a;
            this.e("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.s2;
        }
        set negativeOutlines(a) {
            this.s2 = a;
            this.e("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.tc;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.tc = a;
            this.e("YAxisAbbreviateLargeNumbers");
        }
        get xAxisZoomMaximumCategoryRange() {
            return this.tz;
        }
        set xAxisZoomMaximumCategoryRange(a) {
            this.tz = a;
            this.e("XAxisZoomMaximumCategoryRange");
        }
        get xAxisZoomMaximumItemSpan() {
            return this.t0;
        }
        set xAxisZoomMaximumItemSpan(a) {
            this.t0 = a;
            this.e("XAxisZoomMaximumItemSpan");
        }
        get xAxisZoomToCategoryRange() {
            return this.t1;
        }
        set xAxisZoomToCategoryRange(a) {
            this.t1 = a;
            this.e("XAxisZoomToCategoryRange");
        }
        get xAxisZoomToCategoryStart() {
            return this.t2;
        }
        set xAxisZoomToCategoryStart(a) {
            this.t2 = a;
            this.e("XAxisZoomToCategoryStart");
        }
        get xAxisZoomToItemSpan() {
            return this.t3;
        }
        set xAxisZoomToItemSpan(a) {
            this.t3 = a;
            this.e("XAxisZoomToItemSpan");
        }
        get isCategoryHighlightingEnabled() {
            return this.s5;
        }
        set isCategoryHighlightingEnabled(a) {
            this.s5 = a;
            this.e("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.s6;
        }
        set isItemHighlightingEnabled(a) {
            this.s6 = a;
            this.e("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = /*@__PURE__*/ markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
