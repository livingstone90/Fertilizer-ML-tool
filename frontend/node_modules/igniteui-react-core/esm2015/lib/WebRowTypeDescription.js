/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebRowTypeDescription = /*@__PURE__*/ (() => {
    class WebRowTypeDescription extends Description {
        constructor() {
            super();
            this.aq = 0;
            this.ar = 0;
            this.ab = false;
            this.ac = false;
            this.n = null;
            this.av = null;
            this.l = null;
            this.au = null;
            this.f = null;
            this.w = false;
            this.ad = false;
            this.ae = false;
            this.x = false;
            this.v = false;
            this.aa = false;
            this.g = null;
            this.p = null;
            this.z = false;
            this.r = null;
            this.u = false;
            this.y = false;
            this.j = null;
        }
        get_type() {
            return "WebRowType";
        }
        get type() {
            return this.get_type();
        }
        get index() {
            return this.aq;
        }
        set index(a) {
            this.aq = a;
            this.e("Index");
        }
        get viewIndex() {
            return this.ar;
        }
        set viewIndex(a) {
            this.ar = a;
            this.e("ViewIndex");
        }
        get isGroupByRow() {
            return this.ab;
        }
        set isGroupByRow(a) {
            this.ab = a;
            this.e("IsGroupByRow");
        }
        get isSummaryRow() {
            return this.ac;
        }
        set isSummaryRow(a) {
            this.ac = a;
            this.e("IsSummaryRow");
        }
        get groupRow() {
            return this.n;
        }
        set groupRow(a) {
            this.n = a;
            this.e("GroupRow");
        }
        get key() {
            return this.av;
        }
        set key(a) {
            this.av = a;
            this.e("Key");
        }
        get validation() {
            return this.l;
        }
        set validation(a) {
            this.l = a;
            this.e("Validation");
        }
        get data() {
            return this.au;
        }
        set data(a) {
            this.au = a;
            this.e("Data");
        }
        get cells() {
            return this.f;
        }
        set cells(a) {
            this.f = a;
            this.e("Cells");
        }
        get disabled() {
            return this.w;
        }
        set disabled(a) {
            this.w = a;
            this.e("Disabled");
        }
        get pinned() {
            return this.ad;
        }
        set pinned(a) {
            this.ad = a;
            this.e("Pinned");
        }
        get selected() {
            return this.ae;
        }
        set selected(a) {
            this.ae = a;
            this.e("Selected");
        }
        get expanded() {
            return this.x;
        }
        set expanded(a) {
            this.x = a;
            this.e("Expanded");
        }
        get deleted() {
            return this.v;
        }
        set deleted(a) {
            this.v = a;
            this.e("Deleted");
        }
        get inEditMode() {
            return this.aa;
        }
        set inEditMode(a) {
            this.aa = a;
            this.e("InEditMode");
        }
        get children() {
            return this.g;
        }
        set children(a) {
            this.g = a;
            this.e("Children");
        }
        get rowParent() {
            return this.p;
        }
        set rowParent(a) {
            this.p = a;
            this.e("RowParent");
        }
        get hasChildren() {
            return this.z;
        }
        set hasChildren(a) {
            this.z = a;
            this.e("HasChildren");
        }
        get treeRow() {
            return this.r;
        }
        set treeRow(a) {
            this.r = a;
            this.e("TreeRow");
        }
        get addRowUI() {
            return this.u;
        }
        set addRowUI(a) {
            this.u = a;
            this.e("AddRowUI");
        }
        get focused() {
            return this.y;
        }
        set focused(a) {
            this.y = a;
            this.e("Focused");
        }
        get grid() {
            return this.j;
        }
        set grid(a) {
            this.j = a;
            this.e("Grid");
        }
    }
    WebRowTypeDescription.$t = /*@__PURE__*/ markType(WebRowTypeDescription, 'WebRowTypeDescription', Description.$);
    WebRowTypeDescription.__marshalByValue = true;
    WebRowTypeDescription.__marshalByValueAlias = "RowType";
    return WebRowTypeDescription;
})();
