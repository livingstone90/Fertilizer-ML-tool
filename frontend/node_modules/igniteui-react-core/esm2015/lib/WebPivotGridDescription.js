/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { WebGridBaseDirectiveDescription } from "./WebGridBaseDirectiveDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebPivotGridDescription = /*@__PURE__*/ (() => {
    class WebPivotGridDescription extends WebGridBaseDirectiveDescription {
        constructor() {
            super();
            this.hm = null;
            this.g5 = null;
            this.g8 = false;
            this.g9 = false;
            this.hd = null;
            this.g7 = false;
            this.hh = null;
            this.he = null;
            this.hl = null;
            this.hj = null;
            this.hi = null;
            this.hn = null;
            this.hk = null;
            this.ho = null;
        }
        get_type() {
            return "WebPivotGrid";
        }
        get valueChipTemplateRef() {
            return this.hm;
        }
        set valueChipTemplateRef(a) {
            this.hm = a;
            this.e("ValueChipTemplateRef");
        }
        get pivotConfiguration() {
            return this.g5;
        }
        set pivotConfiguration(a) {
            this.g5 = a;
            this.e("PivotConfiguration");
        }
        get showPivotConfigurationUI() {
            return this.g8;
        }
        set showPivotConfigurationUI(a) {
            this.g8 = a;
            this.e("ShowPivotConfigurationUI");
        }
        get superCompactMode() {
            return this.g9;
        }
        set superCompactMode(a) {
            this.g9 = a;
            this.e("SuperCompactMode");
        }
        get dimensionDataColumns() {
            return this.hd;
        }
        set dimensionDataColumns(a) {
            this.hd = a;
            this.e("DimensionDataColumns");
        }
        get defaultExpandState() {
            return this.g7;
        }
        set defaultExpandState(a) {
            this.g7 = a;
            this.e("DefaultExpandState");
        }
        get dataRef() {
            return this.hh;
        }
        set dataRef(a) {
            this.hh = a;
            this.e("DataRef");
        }
        get filteredData() {
            return this.he;
        }
        set filteredData(a) {
            this.he = a;
            this.e("FilteredData");
        }
        get emptyPivotGridTemplateRef() {
            return this.hl;
        }
        set emptyPivotGridTemplateRef(a) {
            this.hl = a;
            this.e("EmptyPivotGridTemplateRef");
        }
        get dimensionsChangeRef() {
            return this.hj;
        }
        set dimensionsChangeRef(a) {
            this.hj = a;
            this.e("DimensionsChangeRef");
        }
        get dimensionInitRef() {
            return this.hi;
        }
        set dimensionInitRef(a) {
            this.hi = a;
            this.e("DimensionInitRef");
        }
        get valueInitRef() {
            return this.hn;
        }
        set valueInitRef(a) {
            this.hn = a;
            this.e("ValueInitRef");
        }
        get dimensionsSortingExpressionsChangeRef() {
            return this.hk;
        }
        set dimensionsSortingExpressionsChangeRef(a) {
            this.hk = a;
            this.e("DimensionsSortingExpressionsChangeRef");
        }
        get valuesChangeRef() {
            return this.ho;
        }
        set valuesChangeRef(a) {
            this.ho = a;
            this.e("ValuesChangeRef");
        }
    }
    WebPivotGridDescription.$t = /*@__PURE__*/ markType(WebPivotGridDescription, 'WebPivotGridDescription', WebGridBaseDirectiveDescription.$);
    return WebPivotGridDescription;
})();
