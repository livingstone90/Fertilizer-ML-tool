/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { WebBaseEventArgsDescriptionMetadata } from "./WebBaseEventArgsDescriptionMetadata";
import { WebRowExportingEventArgsDescriptionMetadata } from "./WebRowExportingEventArgsDescriptionMetadata";
import { WebColumnDescriptionMetadata } from "./WebColumnDescriptionMetadata";
import { WebGridCellIdentifierDescriptionMetadata } from "./WebGridCellIdentifierDescriptionMetadata";
import { WebGridValidationStateDescriptionMetadata } from "./WebGridValidationStateDescriptionMetadata";
import { WebCellTypeDescription } from "./WebCellTypeDescription";
import { WebColumnExportingEventArgsDescription } from "./WebColumnExportingEventArgsDescription";
import { WebBaseEventArgsDetailDescriptionMetadata } from "./WebBaseEventArgsDetailDescriptionMetadata";
import { WebColumnExportingEventArgsDetailDescription } from "./WebColumnExportingEventArgsDetailDescription";
import { WebDataCloneStrategyDescriptionMetadata } from "./WebDataCloneStrategyDescriptionMetadata";
import { WebGridClipboardOptionsDescriptionMetadata } from "./WebGridClipboardOptionsDescriptionMetadata";
import { WebActionStripDescriptionMetadata } from "./WebActionStripDescriptionMetadata";
import { WebGridResourceStringsDescriptionMetadata } from "./WebGridResourceStringsDescriptionMetadata";
import { WebFilteringExpressionsTreeDescriptionMetadata } from "./WebFilteringExpressionsTreeDescriptionMetadata";
import { WebPinningConfigDescriptionMetadata } from "./WebPinningConfigDescriptionMetadata";
import { WebFilteringStrategyDescriptionMetadata } from "./WebFilteringStrategyDescriptionMetadata";
import { WebGridSortingStrategyDescriptionMetadata } from "./WebGridSortingStrategyDescriptionMetadata";
import { WebSortingOptionsDescriptionMetadata } from "./WebSortingOptionsDescriptionMetadata";
import { WebSortingExpressionDescriptionMetadata } from "./WebSortingExpressionDescriptionMetadata";
import { WebOverlayOutletDirectiveDescriptionMetadata } from "./WebOverlayOutletDirectiveDescriptionMetadata";
import { WebFilteringExpressionsTreeEventArgsDescriptionMetadata } from "./WebFilteringExpressionsTreeEventArgsDescriptionMetadata";
import { WebGridScrollEventArgsDescriptionMetadata } from "./WebGridScrollEventArgsDescriptionMetadata";
import { VoidEventArgsDescriptionMetadata } from "./VoidEventArgsDescriptionMetadata";
import { WebRowSelectionEventArgsDescriptionMetadata } from "./WebRowSelectionEventArgsDescriptionMetadata";
import { WebColumnSelectionEventArgsDescriptionMetadata } from "./WebColumnSelectionEventArgsDescriptionMetadata";
import { WebPinColumnCancellableEventArgsDescriptionMetadata } from "./WebPinColumnCancellableEventArgsDescriptionMetadata";
import { WebPinColumnEventArgsDescriptionMetadata } from "./WebPinColumnEventArgsDescriptionMetadata";
import { WebColumnComponentEventArgsDescriptionMetadata } from "./WebColumnComponentEventArgsDescriptionMetadata";
import { WebSortingEventArgsDescriptionMetadata } from "./WebSortingEventArgsDescriptionMetadata";
import { WebSortingExpressionEventArgsDescriptionMetadata } from "./WebSortingExpressionEventArgsDescriptionMetadata";
import { WebFilteringEventArgsDescriptionMetadata } from "./WebFilteringEventArgsDescriptionMetadata";
import { WebPageEventArgsDescriptionMetadata } from "./WebPageEventArgsDescriptionMetadata";
import { WebColumnResizeEventArgsDescriptionMetadata } from "./WebColumnResizeEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangingEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangingEventArgsDescriptionMetadata";
import { WebColumnVisibilityChangedEventArgsDescriptionMetadata } from "./WebColumnVisibilityChangedEventArgsDescriptionMetadata";
import { WebColumnMovingStartEventArgsDescriptionMetadata } from "./WebColumnMovingStartEventArgsDescriptionMetadata";
import { WebColumnMovingEventArgsDescriptionMetadata } from "./WebColumnMovingEventArgsDescriptionMetadata";
import { WebColumnMovingEndEventArgsDescriptionMetadata } from "./WebColumnMovingEndEventArgsDescriptionMetadata";
import { WebGridKeydownEventArgsDescriptionMetadata } from "./WebGridKeydownEventArgsDescriptionMetadata";
import { WebGridClipboardEventEventArgsDescriptionMetadata } from "./WebGridClipboardEventEventArgsDescriptionMetadata";
import { WebRowToggleEventArgsDescriptionMetadata } from "./WebRowToggleEventArgsDescriptionMetadata";
import { WebActiveNodeChangeEventArgsDescriptionMetadata } from "./WebActiveNodeChangeEventArgsDescriptionMetadata";
import { WebGridSelectionRangeEventArgsDescriptionMetadata } from "./WebGridSelectionRangeEventArgsDescriptionMetadata";
import { WebForOfDataChangingEventArgsDescriptionMetadata } from "./WebForOfDataChangingEventArgsDescriptionMetadata";
import { WebDisplayDensityBaseDescriptionMetadata } from "./WebDisplayDensityBaseDescriptionMetadata";
import { WebGridCellEventArgsDescription } from "./WebGridCellEventArgsDescription";
import { WebGridCellEventArgsDetailDescription } from "./WebGridCellEventArgsDetailDescription";
import { WebGridEditDoneEventArgsDescription } from "./WebGridEditDoneEventArgsDescription";
import { WebGridEditDoneEventArgsDetailDescription } from "./WebGridEditDoneEventArgsDetailDescription";
import { WebGridEditEventArgsDescription } from "./WebGridEditEventArgsDescription";
import { WebGridEditEventArgsDetailDescription } from "./WebGridEditEventArgsDetailDescription";
import { WebGridFormGroupCreatedEventArgsDescription } from "./WebGridFormGroupCreatedEventArgsDescription";
import { WebGridFormGroupCreatedEventArgsDetailDescription } from "./WebGridFormGroupCreatedEventArgsDetailDescription";
import { WebGridToolbarExportEventArgsDescription } from "./WebGridToolbarExportEventArgsDescription";
import { WebExporterOptionsBaseDescriptionMetadata } from "./WebExporterOptionsBaseDescriptionMetadata";
import { WebGridToolbarExportEventArgsDetailDescription } from "./WebGridToolbarExportEventArgsDetailDescription";
import { WebGridValidationStatusEventArgsDescription } from "./WebGridValidationStatusEventArgsDescription";
import { WebGridValidationStatusEventArgsDetailDescription } from "./WebGridValidationStatusEventArgsDetailDescription";
import { WebPinRowEventArgsDescription } from "./WebPinRowEventArgsDescription";
import { WebCancelableEventArgsDetailDescriptionMetadata } from "./WebCancelableEventArgsDetailDescriptionMetadata";
import { WebPinRowEventArgsDetailDescription } from "./WebPinRowEventArgsDetailDescription";
import { WebRowDataEventArgsDescription } from "./WebRowDataEventArgsDescription";
import { WebRowDataEventArgsDetailDescription } from "./WebRowDataEventArgsDetailDescription";
import { WebRowDragEndEventArgsDescription } from "./WebRowDragEndEventArgsDescription";
import { WebRowDragEndEventArgsDetailDescription } from "./WebRowDragEndEventArgsDetailDescription";
import { WebRowDragStartEventArgsDescription } from "./WebRowDragStartEventArgsDescription";
import { WebRowDragStartEventArgsDetailDescription } from "./WebRowDragStartEventArgsDetailDescription";
import { WebGroupByRecordDescriptionMetadata } from "./WebGroupByRecordDescriptionMetadata";
import { WebTreeGridRecordDescriptionMetadata } from "./WebTreeGridRecordDescriptionMetadata";
import { WebRowTypeDescription } from "./WebRowTypeDescription";
/**
 * @hidden
 */
export let WebBaseExporterDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebBaseExporterDescriptionMetadata extends Base {
        static b(a) {
            if (WebBaseExporterDescriptionMetadata.a == null) {
                WebBaseExporterDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebBaseExporterDescriptionMetadata.c(WebBaseExporterDescriptionMetadata.a);
            }
            if (a.j(WebBaseExporterDescriptionMetadata.a)) {
                return;
            }
            a.y(WebBaseExporterDescriptionMetadata.a);
            WebBaseEventArgsDescriptionMetadata.d(a);
            WebRowExportingEventArgsDescriptionMetadata.d(a);
            WebColumnExportingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:BaseExporter");
            a.item("__packageNameWC", "String:grids");
            a.item("ExportEndedRef", "EventRef::exportEnded:customEvent");
            a.item("RowExportingRef", "EventRef::rowExporting:customEvent");
            a.item("ColumnExportingRef", "EventRef::columnExporting:customEvent");
        }
        static d(a) {
            WebBaseExporterDescriptionMetadata.b(a);
            a.z("WebBaseExporter", WebBaseExporterDescriptionMetadata.a);
        }
    }
    WebBaseExporterDescriptionMetadata.$t = /*@__PURE__*/ markType(WebBaseExporterDescriptionMetadata, 'WebBaseExporterDescriptionMetadata');
    WebBaseExporterDescriptionMetadata.a = null;
    return WebBaseExporterDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebCellTypeDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebCellTypeDescriptionMetadata extends Base {
        static b(a) {
            if (WebCellTypeDescriptionMetadata.a == null) {
                WebCellTypeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebCellTypeDescriptionMetadata.c(WebCellTypeDescriptionMetadata.a);
            }
            if (a.j(WebCellTypeDescriptionMetadata.a)) {
                return;
            }
            a.y(WebCellTypeDescriptionMetadata.a);
            WebColumnDescriptionMetadata.d(a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
            WebGridCellIdentifierDescriptionMetadata.d(a);
            WebGridValidationStateDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:CellType");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("__manageCollectionInMarkup", "Boolean");
            a.item("Value", "Unknown");
            a.item("EditValue", "Unknown");
            a.item("Selected", "Boolean");
            a.item("Active", "Boolean");
            a.item("Editable", "Boolean");
            a.item("EditMode", "Boolean");
            a.item("Column", "ExportedType:WebColumn");
            a.item("Grid", "ExportedType:WebGridBaseDirective");
            a.item("Id", "ExportedType:WebGridCellIdentifier");
            a.item("CellID", "Unknown");
            a.item("Validation", "ExportedType:WebGridValidationState");
            a.item("Readonly", "Boolean");
            a.item("Title", "Unknown");
            a.item("Width", "String");
            a.item("VisibleColumnIndex", "Number:double");
        }
        static d(a) {
            WebCellTypeDescriptionMetadata.b(a);
            a.aa("WebCellType", () => new WebCellTypeDescription());
            a.z("WebCellType", WebCellTypeDescriptionMetadata.a);
        }
    }
    WebCellTypeDescriptionMetadata.$t = /*@__PURE__*/ markType(WebCellTypeDescriptionMetadata, 'WebCellTypeDescriptionMetadata');
    WebCellTypeDescriptionMetadata.a = null;
    return WebCellTypeDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebColumnExportingEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebColumnExportingEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebColumnExportingEventArgsDescriptionMetadata.a == null) {
                WebColumnExportingEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebColumnExportingEventArgsDescriptionMetadata.c(WebColumnExportingEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebColumnExportingEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebColumnExportingEventArgsDescriptionMetadata.a);
            WebColumnExportingEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:ColumnExportingEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebColumnExportingEventArgsDetail");
        }
        static d(a) {
            WebColumnExportingEventArgsDescriptionMetadata.b(a);
            a.aa("WebColumnExportingEventArgs", () => new WebColumnExportingEventArgsDescription());
            a.z("WebColumnExportingEventArgs", WebColumnExportingEventArgsDescriptionMetadata.a);
        }
    }
    WebColumnExportingEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebColumnExportingEventArgsDescriptionMetadata, 'WebColumnExportingEventArgsDescriptionMetadata');
    WebColumnExportingEventArgsDescriptionMetadata.a = null;
    return WebColumnExportingEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebColumnExportingEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebColumnExportingEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebColumnExportingEventArgsDetailDescriptionMetadata.a == null) {
                WebColumnExportingEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebColumnExportingEventArgsDetailDescriptionMetadata.c(WebColumnExportingEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebColumnExportingEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebColumnExportingEventArgsDetailDescriptionMetadata.a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:ColumnExportingEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Header", "String");
            a.item("Field", "String");
            a.item("ColumnIndex", "Number:double");
            a.item("Cancel", "Boolean");
            a.item("SkipFormatter", "Boolean");
            a.item("Grid", "ExportedType:WebGridBaseDirective");
        }
        static d(a) {
            WebColumnExportingEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebColumnExportingEventArgsDetail", () => new WebColumnExportingEventArgsDetailDescription());
            a.z("WebColumnExportingEventArgsDetail", WebColumnExportingEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebColumnExportingEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebColumnExportingEventArgsDetailDescriptionMetadata, 'WebColumnExportingEventArgsDetailDescriptionMetadata');
    WebColumnExportingEventArgsDetailDescriptionMetadata.a = null;
    return WebColumnExportingEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridBaseDirectiveDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridBaseDirectiveDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridBaseDirectiveDescriptionMetadata.a == null) {
                WebGridBaseDirectiveDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridBaseDirectiveDescriptionMetadata.c(WebGridBaseDirectiveDescriptionMetadata.a);
            }
            if (a.j(WebGridBaseDirectiveDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridBaseDirectiveDescriptionMetadata.a);
            WebDataCloneStrategyDescriptionMetadata.d(a);
            WebGridClipboardOptionsDescriptionMetadata.d(a);
            WebActionStripDescriptionMetadata.d(a);
            WebGridResourceStringsDescriptionMetadata.d(a);
            WebFilteringExpressionsTreeDescriptionMetadata.d(a);
            WebPinningConfigDescriptionMetadata.d(a);
            WebFilteringStrategyDescriptionMetadata.d(a);
            WebGridSortingStrategyDescriptionMetadata.d(a);
            WebSortingOptionsDescriptionMetadata.d(a);
            WebSortingExpressionDescriptionMetadata.d(a);
            WebOverlayOutletDirectiveDescriptionMetadata.d(a);
            WebFilteringExpressionsTreeEventArgsDescriptionMetadata.d(a);
            WebGridScrollEventArgsDescriptionMetadata.d(a);
            VoidEventArgsDescriptionMetadata.d(a);
            WebGridCellEventArgsDescriptionMetadata.d(a);
            WebGridFormGroupCreatedEventArgsDescriptionMetadata.d(a);
            WebGridValidationStatusEventArgsDescriptionMetadata.d(a);
            WebRowSelectionEventArgsDescriptionMetadata.d(a);
            WebColumnSelectionEventArgsDescriptionMetadata.d(a);
            WebPinColumnCancellableEventArgsDescriptionMetadata.d(a);
            WebPinColumnEventArgsDescriptionMetadata.d(a);
            WebGridEditEventArgsDescriptionMetadata.d(a);
            WebGridEditDoneEventArgsDescriptionMetadata.d(a);
            WebColumnComponentEventArgsDescriptionMetadata.d(a);
            WebSortingEventArgsDescriptionMetadata.d(a);
            WebSortingExpressionEventArgsDescriptionMetadata.d(a);
            WebFilteringEventArgsDescriptionMetadata.d(a);
            WebPageEventArgsDescriptionMetadata.d(a);
            WebRowDataEventArgsDescriptionMetadata.d(a);
            WebColumnResizeEventArgsDescriptionMetadata.d(a);
            WebColumnVisibilityChangingEventArgsDescriptionMetadata.d(a);
            WebColumnVisibilityChangedEventArgsDescriptionMetadata.d(a);
            WebColumnMovingStartEventArgsDescriptionMetadata.d(a);
            WebColumnMovingEventArgsDescriptionMetadata.d(a);
            WebColumnMovingEndEventArgsDescriptionMetadata.d(a);
            WebGridKeydownEventArgsDescriptionMetadata.d(a);
            WebRowDragStartEventArgsDescriptionMetadata.d(a);
            WebRowDragEndEventArgsDescriptionMetadata.d(a);
            WebGridClipboardEventEventArgsDescriptionMetadata.d(a);
            WebRowToggleEventArgsDescriptionMetadata.d(a);
            WebPinRowEventArgsDescriptionMetadata.d(a);
            WebActiveNodeChangeEventArgsDescriptionMetadata.d(a);
            WebGridToolbarExportEventArgsDescriptionMetadata.d(a);
            WebGridSelectionRangeEventArgsDescriptionMetadata.d(a);
            WebForOfDataChangingEventArgsDescriptionMetadata.d(a);
        }
        static c(a) {
            WebDisplayDensityBaseDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridBaseDirective");
            a.item("__packageNameWC", "String:grids");
            a.item("__skipModuleRegisterWebComponents", "Boolean");
            a.item("__importOverrideWebComponents", "String:igniteui-webcomponents-grids/grids/combined");
            a.item("__importTypesWebComponents", "String:igniteui-webcomponents-grids/grids");
            a.item("SnackbarDisplayTime", "Number:double");
            a.item("AutoGenerate", "Boolean");
            a.item("Moving", "Boolean");
            a.item("EmptyGridTemplateRef", "(w:EmptyGridTemplate,wf:EmptyGridTemplate)TemplateRef::object");
            a.item("AddRowEmptyTemplateRef", "(w:AddRowEmptyTemplate,wf:AddRowEmptyTemplate)TemplateRef::object");
            a.item("LoadingGridTemplateRef", "(w:LoadingGridTemplate,wf:LoadingGridTemplate)TemplateRef::object");
            a.item("SummaryRowHeight", "Number:double");
            a.item("DataCloneStrategy", "ExportedType:WebDataCloneStrategy");
            a.item("ClipboardOptions", "ExportedType:WebGridClipboardOptions");
            a.item("EvenRowCSS", "String");
            a.item("OddRowCSS", "String");
            a.item("RowClassesRef", "(w:RowClasses,wf:RowClasses)DataRef::object");
            a.item("RowStylesRef", "(w:RowStyles,wf:RowStyles)DataRef::object");
            a.item("PrimaryKey", "String");
            a.item("ActionStrip", "ExportedType:WebActionStrip");
            a.item("ActionStrip@ngQueryList", "actionStrip");
            a.item("EmptyFilteredGridTemplateRef", "(w:EmptyFilteredGridTemplate,wf:EmptyFilteredGridTemplate)TemplateRef::object");
            a.item("EmptyGridDefaultTemplateRef", "(w:EmptyGridDefaultTemplate,wf:EmptyGridDefaultTemplate)TemplateRef::object");
            a.item("DragGhostCustomTemplateRef", "(w:DragGhostCustomTemplate,wf:DragGhostCustomTemplate)TemplateRef::object");
            a.item("RowEditTextTemplateRef", "(w:RowEditTextTemplate,wf:RowEditTextTemplate)TemplateRef::object");
            a.item("RowAddTextTemplateRef", "(w:RowAddTextTemplate,wf:RowAddTextTemplate)TemplateRef::object");
            a.item("RowEditActionsTemplateRef", "(w:RowEditActionsTemplate,wf:RowEditActionsTemplate)TemplateRef::object");
            a.item("RowExpandedIndicatorTemplateRef", "(w:RowExpandedIndicatorTemplate,wf:RowExpandedIndicatorTemplate)TemplateRef::object");
            a.item("RowCollapsedIndicatorTemplateRef", "(w:RowCollapsedIndicatorTemplate,wf:RowCollapsedIndicatorTemplate)TemplateRef::object");
            a.item("HeaderExpandIndicatorTemplateRef", "(w:HeaderExpandIndicatorTemplate,wf:HeaderExpandIndicatorTemplate)TemplateRef::object");
            a.item("HeaderCollapseIndicatorTemplateRef", "(w:HeaderCollapseIndicatorTemplate,wf:HeaderCollapseIndicatorTemplate)TemplateRef::object");
            a.item("ExcelStyleHeaderIconDirectiveTemplateRef", "(w:ExcelStyleHeaderIconDirectiveTemplate,wf:ExcelStyleHeaderIconDirectiveTemplate)TemplateRef::object");
            a.item("ExcelStyleHeaderIconTemplateRef", "(w:ExcelStyleHeaderIconTemplate,wf:ExcelStyleHeaderIconTemplate)TemplateRef::object");
            a.item("SortAscendingHeaderIconTemplateRef", "(w:SortAscendingHeaderIconTemplate,wf:SortAscendingHeaderIconTemplate)TemplateRef::object");
            a.item("SortDescendingHeaderIconDirectiveTemplateRef", "(w:SortDescendingHeaderIconDirectiveTemplate,wf:SortDescendingHeaderIconDirectiveTemplate)TemplateRef::object");
            a.item("SortDescendingHeaderIconTemplateRef", "(w:SortDescendingHeaderIconTemplate,wf:SortDescendingHeaderIconTemplate)TemplateRef::object");
            a.item("SortHeaderIconTemplateRef", "(w:SortHeaderIconTemplate,wf:SortHeaderIconTemplate)TemplateRef::object");
            a.item("Toolbar", "Collection:WebGridToolbar:GridToolbarCollection:WebGridToolbar");
            a.item("Toolbar@ngQueryList", "toolbar");
            a.item("PaginationComponents", "Collection:WebPaginator:PaginatorCollection:WebPaginator");
            a.item("PaginationComponents@ngQueryList", "paginationComponents");
            a.item("ResourceStrings", "ExportedType:WebGridResourceStrings");
            a.item("FilteringLogic", "ExportedType:string:FilteringLogic");
            a.item("FilteringLogic@names", "And;Or");
            a.item("FilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
            a.item("FilteringExpressionsTree@mustSetInCode", "WebComponents;Blazor");
            a.item("AdvancedFilteringExpressionsTree", "ExportedType:WebFilteringExpressionsTree");
            a.item("Locale", "String");
            a.item("PagingMode", "ExportedType:string:GridPagingMode");
            a.item("PagingMode@names", "Local;Remote");
            a.item("Paging", "Boolean");
            a.item("Page", "Number:double");
            a.item("PerPage", "Number:double");
            a.item("HideRowSelectors", "Boolean");
            a.item("RowDraggable", "Boolean");
            a.item("ValidationTrigger", "ExportedType:string:GridValidationTrigger");
            a.item("ValidationTrigger@names", "Change;Blur");
            a.item("DragRowID", "Unknown");
            a.item("RowEditable", "Boolean");
            a.item("RowHeight", "Unknown");
            a.item("ColumnWidth", "String");
            a.item("EmptyGridMessage", "String");
            a.item("IsLoading", "Boolean");
            a.item("ShouldGenerate", "Boolean");
            a.item("EmptyFilteredGridMessage", "String");
            a.item("Pinning", "ExportedType:WebPinningConfig");
            a.item("AllowFiltering", "Boolean");
            a.item("AllowAdvancedFiltering", "Boolean");
            a.item("FilterMode", "ExportedType:string:FilterMode");
            a.item("FilterMode@names", "QuickFilter;ExcelStyleFilter");
            a.item("SummaryPosition", "ExportedType:string:GridSummaryPosition");
            a.item("SummaryPosition@names", "Top;Bottom");
            a.item("SummaryCalculationMode", "ExportedType:string:GridSummaryCalculationMode");
            a.item("SummaryCalculationMode@names", "RootLevelOnly;ChildLevelsOnly;RootAndChildLevels");
            a.item("ShowSummaryOnCollapse", "Boolean");
            a.item("FilterStrategy", "ExportedType:WebFilteringStrategy");
            a.item("SortStrategy", "ExportedType:WebGridSortingStrategy");
            a.item("SortingOptions", "ExportedType:WebSortingOptions");
            a.item("SelectedRowsRef", "(w:SelectedRows,wf:SelectedRows)DataRef:object");
            a.item("HeadSelectorTemplateRef", "(w:HeadSelectorTemplate,wf:HeadSelectorTemplate)TemplateRef::object");
            a.item("RowSelectorTemplateRef", "(w:RowSelectorTemplate,wf:RowSelectorTemplate)TemplateRef::object");
            a.item("DragIndicatorIconTemplateRef", "(w:DragIndicatorIconTemplate,wf:DragIndicatorIconTemplate)TemplateRef::object");
            a.item("SortingExpressions", "Array:WebSortingExpressionDescription:SortingExpression");
            a.item("SortingExpressions@mustSetInCode", "WebComponents;Blazor");
            a.item("BatchEditing", "Boolean");
            a.item("CellSelection", "ExportedType:string:GridSelectionMode");
            a.item("CellSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("RowSelection", "ExportedType:string:GridSelectionMode");
            a.item("RowSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("ColumnSelection", "ExportedType:string:GridSelectionMode");
            a.item("ColumnSelection@names", "None;Single;Multiple;MultipleCascade");
            a.item("IsPivot", "Boolean");
            a.item("Outlet", "ExportedType:WebOverlayOutletDirective");
            a.item("Columns", "Collection:WebColumn:ColumnCollection:WebColumn");
            a.item("Columns@ngQueryList", "columnList");
            a.item("TotalRecords", "Number:double");
            a.item("HasVisibleColumns", "Boolean");
            a.item("SelectRowOnClick", "Boolean");
            a.item("FilteringExpressionsTreeChangeRef", "EventRef::filteringExpressionsTreeChange:customEvent");
            a.item("AdvancedFilteringExpressionsTreeChangeRef", "EventRef::advancedFilteringExpressionsTreeChange:customEvent");
            a.item("GridScrollRef", "EventRef::gridScroll:customEvent");
            a.item("PageChangeRef", "EventRef::pageChange:customEvent");
            a.item("PerPageChangeRef", "EventRef::perPageChange:customEvent");
            a.item("CellClickRef", "EventRef::cellClick:customEvent");
            a.item("FormGroupCreatedRef", "EventRef::formGroupCreated:customEvent");
            a.item("ValidationStatusChangeRef", "EventRef::validationStatusChange:customEvent");
            a.item("SelectedRef", "EventRef::selected:customEvent");
            a.item("RowSelectionChangingRef", "EventRef::rowSelectionChanging:customEvent");
            a.item("ColumnSelectionChangingRef", "EventRef::columnSelectionChanging:customEvent");
            a.item("ColumnPinRef", "EventRef::columnPin:customEvent");
            a.item("ColumnPinnedRef", "EventRef::columnPinned:customEvent");
            a.item("CellEditEnterRef", "EventRef::cellEditEnter:customEvent");
            a.item("CellEditExitRef", "EventRef::cellEditExit:customEvent");
            a.item("CellEditRef", "EventRef::cellEdit:customEvent");
            a.item("CellEditDoneRef", "EventRef::cellEditDone:customEvent");
            a.item("RowEditEnterRef", "EventRef::rowEditEnter:customEvent");
            a.item("RowEditRef", "EventRef::rowEdit:customEvent");
            a.item("RowEditDoneRef", "EventRef::rowEditDone:customEvent");
            a.item("RowEditExitRef", "EventRef::rowEditExit:customEvent");
            a.item("ColumnInitRef", "EventRef::columnInit:customEvent");
            a.item("SortingRef", "EventRef::sorting:customEvent");
            a.item("SortingDoneRef", "EventRef::sortingDone:customEvent");
            a.item("FilteringRef", "EventRef::filtering:customEvent");
            a.item("FilteringDoneRef", "EventRef::filteringDone:customEvent");
            a.item("PagingDoneRef", "EventRef::pagingDone:customEvent");
            a.item("RowAddedRef", "EventRef::rowAdded:customEvent");
            a.item("RowDeletedRef", "EventRef::rowDeleted:customEvent");
            a.item("RowDeleteRef", "EventRef::rowDelete:customEvent");
            a.item("RowAddRef", "EventRef::rowAdd:customEvent");
            a.item("ColumnResizedRef", "EventRef::columnResized:customEvent");
            a.item("ContextMenuRef", "EventRef::contextMenu:customEvent");
            a.item("DoubleClickRef", "EventRef::doubleClick:customEvent");
            a.item("ColumnVisibilityChangingRef", "EventRef::columnVisibilityChanging:customEvent");
            a.item("ColumnVisibilityChangedRef", "EventRef::columnVisibilityChanged:customEvent");
            a.item("ColumnMovingStartRef", "EventRef::columnMovingStart:customEvent");
            a.item("ColumnMovingRef", "EventRef::columnMoving:customEvent");
            a.item("ColumnMovingEndRef", "EventRef::columnMovingEnd:customEvent");
            a.item("GridKeydownRef", "EventRef::gridKeydown:customEvent");
            a.item("RowDragStartRef", "EventRef::rowDragStart:customEvent");
            a.item("RowDragEndRef", "EventRef::rowDragEnd:customEvent");
            a.item("GridCopyRef", "EventRef::gridCopy:customEvent");
            a.item("RowToggleRef", "EventRef::rowToggle:customEvent");
            a.item("RowPinningRef", "EventRef::rowPinning:customEvent");
            a.item("RowPinnedRef", "EventRef::rowPinned:customEvent");
            a.item("ActiveNodeChangeRef", "EventRef::activeNodeChange:customEvent");
            a.item("SortingExpressionsChangeRef", "EventRef::sortingExpressionsChange:customEvent");
            a.item("ToolbarExportingRef", "EventRef::toolbarExporting:customEvent");
            a.item("RangeSelectedRef", "EventRef::rangeSelected:customEvent");
            a.item("RenderedRef", "EventRef::rendered:customEvent");
            a.item("DataChangingRef", "EventRef::dataChanging:customEvent");
            a.item("DataChangedRef", "EventRef::dataChanged:customEvent");
            WebGridBaseDirectiveDescriptionMetadata.e(a);
        }
        static d(a) {
            WebGridBaseDirectiveDescriptionMetadata.b(a);
            a.z("WebGridBaseDirective", WebGridBaseDirectiveDescriptionMetadata.a);
        }
        static e(a) {
            a.item("AutoGenerate", "*Boolean");
        }
    }
    WebGridBaseDirectiveDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridBaseDirectiveDescriptionMetadata, 'WebGridBaseDirectiveDescriptionMetadata');
    WebGridBaseDirectiveDescriptionMetadata.a = null;
    return WebGridBaseDirectiveDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridCellEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridCellEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridCellEventArgsDescriptionMetadata.a == null) {
                WebGridCellEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridCellEventArgsDescriptionMetadata.c(WebGridCellEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridCellEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridCellEventArgsDescriptionMetadata.a);
            WebGridCellEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridCellEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridCellEventArgsDetail");
        }
        static d(a) {
            WebGridCellEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridCellEventArgs", () => new WebGridCellEventArgsDescription());
            a.z("WebGridCellEventArgs", WebGridCellEventArgsDescriptionMetadata.a);
        }
    }
    WebGridCellEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridCellEventArgsDescriptionMetadata, 'WebGridCellEventArgsDescriptionMetadata');
    WebGridCellEventArgsDescriptionMetadata.a = null;
    return WebGridCellEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridCellEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridCellEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridCellEventArgsDetailDescriptionMetadata.a == null) {
                WebGridCellEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridCellEventArgsDetailDescriptionMetadata.c(WebGridCellEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridCellEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridCellEventArgsDetailDescriptionMetadata.a);
            WebCellTypeDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridCellEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Cell", "ExportedType:WebCellType");
        }
        static d(a) {
            WebGridCellEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridCellEventArgsDetail", () => new WebGridCellEventArgsDetailDescription());
            a.z("WebGridCellEventArgsDetail", WebGridCellEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridCellEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridCellEventArgsDetailDescriptionMetadata, 'WebGridCellEventArgsDetailDescriptionMetadata');
    WebGridCellEventArgsDetailDescriptionMetadata.a = null;
    return WebGridCellEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridEditDoneEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridEditDoneEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridEditDoneEventArgsDescriptionMetadata.a == null) {
                WebGridEditDoneEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridEditDoneEventArgsDescriptionMetadata.c(WebGridEditDoneEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridEditDoneEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridEditDoneEventArgsDescriptionMetadata.a);
            WebGridEditDoneEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridEditDoneEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridEditDoneEventArgsDetail");
        }
        static d(a) {
            WebGridEditDoneEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridEditDoneEventArgs", () => new WebGridEditDoneEventArgsDescription());
            a.z("WebGridEditDoneEventArgs", WebGridEditDoneEventArgsDescriptionMetadata.a);
        }
    }
    WebGridEditDoneEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridEditDoneEventArgsDescriptionMetadata, 'WebGridEditDoneEventArgsDescriptionMetadata');
    WebGridEditDoneEventArgsDescriptionMetadata.a = null;
    return WebGridEditDoneEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridEditDoneEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridEditDoneEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridEditDoneEventArgsDetailDescriptionMetadata.a == null) {
                WebGridEditDoneEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridEditDoneEventArgsDetailDescriptionMetadata.c(WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridEditDoneEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
            WebGridCellIdentifierDescriptionMetadata.d(a);
            WebColumnDescriptionMetadata.d(a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridEditDoneEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("RowID", "Unknown");
            a.item("CellID", "ExportedType:WebGridCellIdentifier");
            a.item("RowData", "Unknown");
            a.item("OldValue", "Unknown");
            a.item("NewValue", "Unknown");
            a.item("Column", "ExportedType:WebColumn");
            a.item("Owner", "ExportedType:WebGridBaseDirective");
            a.item("IsAddRow", "Boolean");
            a.item("Valid", "Boolean");
        }
        static d(a) {
            WebGridEditDoneEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridEditDoneEventArgsDetail", () => new WebGridEditDoneEventArgsDetailDescription());
            a.z("WebGridEditDoneEventArgsDetail", WebGridEditDoneEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridEditDoneEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridEditDoneEventArgsDetailDescriptionMetadata, 'WebGridEditDoneEventArgsDetailDescriptionMetadata');
    WebGridEditDoneEventArgsDetailDescriptionMetadata.a = null;
    return WebGridEditDoneEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridEditEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridEditEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridEditEventArgsDescriptionMetadata.a == null) {
                WebGridEditEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridEditEventArgsDescriptionMetadata.c(WebGridEditEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridEditEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridEditEventArgsDescriptionMetadata.a);
            WebGridEditEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridEditEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridEditEventArgsDetail");
        }
        static d(a) {
            WebGridEditEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridEditEventArgs", () => new WebGridEditEventArgsDescription());
            a.z("WebGridEditEventArgs", WebGridEditEventArgsDescriptionMetadata.a);
        }
    }
    WebGridEditEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridEditEventArgsDescriptionMetadata, 'WebGridEditEventArgsDescriptionMetadata');
    WebGridEditEventArgsDescriptionMetadata.a = null;
    return WebGridEditEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridEditEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridEditEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridEditEventArgsDetailDescriptionMetadata.a == null) {
                WebGridEditEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridEditEventArgsDetailDescriptionMetadata.c(WebGridEditEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridEditEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridEditEventArgsDetailDescriptionMetadata.a);
        }
        static c(a) {
            WebGridEditDoneEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridEditEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
        }
        static d(a) {
            WebGridEditEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridEditEventArgsDetail", () => new WebGridEditEventArgsDetailDescription());
            a.z("WebGridEditEventArgsDetail", WebGridEditEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridEditEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridEditEventArgsDetailDescriptionMetadata, 'WebGridEditEventArgsDetailDescriptionMetadata');
    WebGridEditEventArgsDetailDescriptionMetadata.a = null;
    return WebGridEditEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridFormGroupCreatedEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridFormGroupCreatedEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridFormGroupCreatedEventArgsDescriptionMetadata.a == null) {
                WebGridFormGroupCreatedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridFormGroupCreatedEventArgsDescriptionMetadata.c(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
            WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridFormGroupCreatedEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridFormGroupCreatedEventArgsDetail");
        }
        static d(a) {
            WebGridFormGroupCreatedEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridFormGroupCreatedEventArgs", () => new WebGridFormGroupCreatedEventArgsDescription());
            a.z("WebGridFormGroupCreatedEventArgs", WebGridFormGroupCreatedEventArgsDescriptionMetadata.a);
        }
    }
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridFormGroupCreatedEventArgsDescriptionMetadata, 'WebGridFormGroupCreatedEventArgsDescriptionMetadata');
    WebGridFormGroupCreatedEventArgsDescriptionMetadata.a = null;
    return WebGridFormGroupCreatedEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a == null) {
                WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.c(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridFormGroupCreatedEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Owner", "ExportedType:WebGridBaseDirective");
        }
        static d(a) {
            WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridFormGroupCreatedEventArgsDetail", () => new WebGridFormGroupCreatedEventArgsDetailDescription());
            a.z("WebGridFormGroupCreatedEventArgsDetail", WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata, 'WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata');
    WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata.a = null;
    return WebGridFormGroupCreatedEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridToolbarExportEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridToolbarExportEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridToolbarExportEventArgsDescriptionMetadata.a == null) {
                WebGridToolbarExportEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridToolbarExportEventArgsDescriptionMetadata.c(WebGridToolbarExportEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridToolbarExportEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridToolbarExportEventArgsDescriptionMetadata.a);
            WebGridToolbarExportEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridToolbarExportEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridToolbarExportEventArgsDetail");
        }
        static d(a) {
            WebGridToolbarExportEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridToolbarExportEventArgs", () => new WebGridToolbarExportEventArgsDescription());
            a.z("WebGridToolbarExportEventArgs", WebGridToolbarExportEventArgsDescriptionMetadata.a);
        }
    }
    WebGridToolbarExportEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridToolbarExportEventArgsDescriptionMetadata, 'WebGridToolbarExportEventArgsDescriptionMetadata');
    WebGridToolbarExportEventArgsDescriptionMetadata.a = null;
    return WebGridToolbarExportEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridToolbarExportEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridToolbarExportEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridToolbarExportEventArgsDetailDescriptionMetadata.a == null) {
                WebGridToolbarExportEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridToolbarExportEventArgsDetailDescriptionMetadata.c(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
            WebBaseExporterDescriptionMetadata.d(a);
            WebExporterOptionsBaseDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:GridToolbarExportEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Grid", "ExportedType:WebGridBaseDirective");
            a.item("Exporter", "ExportedType:WebBaseExporter");
            a.item("Options", "ExportedType:WebExporterOptionsBase");
            a.item("Cancel", "Boolean");
        }
        static d(a) {
            WebGridToolbarExportEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridToolbarExportEventArgsDetail", () => new WebGridToolbarExportEventArgsDetailDescription());
            a.z("WebGridToolbarExportEventArgsDetail", WebGridToolbarExportEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridToolbarExportEventArgsDetailDescriptionMetadata, 'WebGridToolbarExportEventArgsDetailDescriptionMetadata');
    WebGridToolbarExportEventArgsDetailDescriptionMetadata.a = null;
    return WebGridToolbarExportEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridValidationStatusEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridValidationStatusEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridValidationStatusEventArgsDescriptionMetadata.a == null) {
                WebGridValidationStatusEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridValidationStatusEventArgsDescriptionMetadata.c(WebGridValidationStatusEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebGridValidationStatusEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridValidationStatusEventArgsDescriptionMetadata.a);
            WebGridValidationStatusEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridValidationStatusEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebGridValidationStatusEventArgsDetail");
        }
        static d(a) {
            WebGridValidationStatusEventArgsDescriptionMetadata.b(a);
            a.aa("WebGridValidationStatusEventArgs", () => new WebGridValidationStatusEventArgsDescription());
            a.z("WebGridValidationStatusEventArgs", WebGridValidationStatusEventArgsDescriptionMetadata.a);
        }
    }
    WebGridValidationStatusEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridValidationStatusEventArgsDescriptionMetadata, 'WebGridValidationStatusEventArgsDescriptionMetadata');
    WebGridValidationStatusEventArgsDescriptionMetadata.a = null;
    return WebGridValidationStatusEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebGridValidationStatusEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebGridValidationStatusEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebGridValidationStatusEventArgsDetailDescriptionMetadata.a == null) {
                WebGridValidationStatusEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebGridValidationStatusEventArgsDetailDescriptionMetadata.c(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:GridValidationStatusEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Status", "ExportedType:string:ValidationStatus");
            a.item("Status@names", "VALID;INVALID");
            a.item("Owner", "ExportedType:WebGridBaseDirective");
        }
        static d(a) {
            WebGridValidationStatusEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebGridValidationStatusEventArgsDetail", () => new WebGridValidationStatusEventArgsDetailDescription());
            a.z("WebGridValidationStatusEventArgsDetail", WebGridValidationStatusEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebGridValidationStatusEventArgsDetailDescriptionMetadata, 'WebGridValidationStatusEventArgsDetailDescriptionMetadata');
    WebGridValidationStatusEventArgsDetailDescriptionMetadata.a = null;
    return WebGridValidationStatusEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebPinRowEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebPinRowEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebPinRowEventArgsDescriptionMetadata.a == null) {
                WebPinRowEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebPinRowEventArgsDescriptionMetadata.c(WebPinRowEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebPinRowEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebPinRowEventArgsDescriptionMetadata.a);
            WebPinRowEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:PinRowEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebPinRowEventArgsDetail");
        }
        static d(a) {
            WebPinRowEventArgsDescriptionMetadata.b(a);
            a.aa("WebPinRowEventArgs", () => new WebPinRowEventArgsDescription());
            a.z("WebPinRowEventArgs", WebPinRowEventArgsDescriptionMetadata.a);
        }
    }
    WebPinRowEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebPinRowEventArgsDescriptionMetadata, 'WebPinRowEventArgsDescriptionMetadata');
    WebPinRowEventArgsDescriptionMetadata.a = null;
    return WebPinRowEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebPinRowEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebPinRowEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebPinRowEventArgsDetailDescriptionMetadata.a == null) {
                WebPinRowEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebPinRowEventArgsDetailDescriptionMetadata.c(WebPinRowEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebPinRowEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebPinRowEventArgsDetailDescriptionMetadata.a);
            WebRowTypeDescriptionMetadata.d(a);
        }
        static c(a) {
            WebCancelableEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:PinRowEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("RowID", "Unknown");
            a.item("Row", "ExportedType:WebRowType");
            a.item("InsertAtIndex", "Number:double");
            a.item("IsPinned", "Boolean");
        }
        static d(a) {
            WebPinRowEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebPinRowEventArgsDetail", () => new WebPinRowEventArgsDetailDescription());
            a.z("WebPinRowEventArgsDetail", WebPinRowEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebPinRowEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebPinRowEventArgsDetailDescriptionMetadata, 'WebPinRowEventArgsDetailDescriptionMetadata');
    WebPinRowEventArgsDetailDescriptionMetadata.a = null;
    return WebPinRowEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDataEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDataEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDataEventArgsDescriptionMetadata.a == null) {
                WebRowDataEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDataEventArgsDescriptionMetadata.c(WebRowDataEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebRowDataEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDataEventArgsDescriptionMetadata.a);
            WebRowDataEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:RowDataEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebRowDataEventArgsDetail");
        }
        static d(a) {
            WebRowDataEventArgsDescriptionMetadata.b(a);
            a.aa("WebRowDataEventArgs", () => new WebRowDataEventArgsDescription());
            a.z("WebRowDataEventArgs", WebRowDataEventArgsDescriptionMetadata.a);
        }
    }
    WebRowDataEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDataEventArgsDescriptionMetadata, 'WebRowDataEventArgsDescriptionMetadata');
    WebRowDataEventArgsDescriptionMetadata.a = null;
    return WebRowDataEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDataEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDataEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDataEventArgsDetailDescriptionMetadata.a == null) {
                WebRowDataEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDataEventArgsDetailDescriptionMetadata.c(WebRowDataEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebRowDataEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDataEventArgsDetailDescriptionMetadata.a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:RowDataEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Data", "Unknown");
            a.item("Owner", "ExportedType:WebGridBaseDirective");
        }
        static d(a) {
            WebRowDataEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebRowDataEventArgsDetail", () => new WebRowDataEventArgsDetailDescription());
            a.z("WebRowDataEventArgsDetail", WebRowDataEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebRowDataEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDataEventArgsDetailDescriptionMetadata, 'WebRowDataEventArgsDetailDescriptionMetadata');
    WebRowDataEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDataEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDragEndEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDragEndEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDragEndEventArgsDescriptionMetadata.a == null) {
                WebRowDragEndEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDragEndEventArgsDescriptionMetadata.c(WebRowDragEndEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebRowDragEndEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDragEndEventArgsDescriptionMetadata.a);
            WebRowDragEndEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:RowDragEndEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebRowDragEndEventArgsDetail");
        }
        static d(a) {
            WebRowDragEndEventArgsDescriptionMetadata.b(a);
            a.aa("WebRowDragEndEventArgs", () => new WebRowDragEndEventArgsDescription());
            a.z("WebRowDragEndEventArgs", WebRowDragEndEventArgsDescriptionMetadata.a);
        }
    }
    WebRowDragEndEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDragEndEventArgsDescriptionMetadata, 'WebRowDragEndEventArgsDescriptionMetadata');
    WebRowDragEndEventArgsDescriptionMetadata.a = null;
    return WebRowDragEndEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDragEndEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDragEndEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDragEndEventArgsDetailDescriptionMetadata.a == null) {
                WebRowDragEndEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDragEndEventArgsDetailDescriptionMetadata.c(WebRowDragEndEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebRowDragEndEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDragEndEventArgsDetailDescriptionMetadata.a);
            WebRowTypeDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:RowDragEndEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("DragDirective", "Unknown");
            a.item("DragData", "ExportedType:WebRowType");
            a.item("Animation", "Boolean");
        }
        static d(a) {
            WebRowDragEndEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebRowDragEndEventArgsDetail", () => new WebRowDragEndEventArgsDetailDescription());
            a.z("WebRowDragEndEventArgsDetail", WebRowDragEndEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebRowDragEndEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDragEndEventArgsDetailDescriptionMetadata, 'WebRowDragEndEventArgsDetailDescriptionMetadata');
    WebRowDragEndEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDragEndEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDragStartEventArgsDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDragStartEventArgsDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDragStartEventArgsDescriptionMetadata.a == null) {
                WebRowDragStartEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDragStartEventArgsDescriptionMetadata.c(WebRowDragStartEventArgsDescriptionMetadata.a);
            }
            if (a.j(WebRowDragStartEventArgsDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDragStartEventArgsDescriptionMetadata.a);
            WebRowDragStartEventArgsDetailDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:RowDragStartEventArgs");
            a.item("__isPlainObject", "Boolean");
            a.item("Detail", "ExportedType:WebRowDragStartEventArgsDetail");
        }
        static d(a) {
            WebRowDragStartEventArgsDescriptionMetadata.b(a);
            a.aa("WebRowDragStartEventArgs", () => new WebRowDragStartEventArgsDescription());
            a.z("WebRowDragStartEventArgs", WebRowDragStartEventArgsDescriptionMetadata.a);
        }
    }
    WebRowDragStartEventArgsDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDragStartEventArgsDescriptionMetadata, 'WebRowDragStartEventArgsDescriptionMetadata');
    WebRowDragStartEventArgsDescriptionMetadata.a = null;
    return WebRowDragStartEventArgsDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowDragStartEventArgsDetailDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowDragStartEventArgsDetailDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowDragStartEventArgsDetailDescriptionMetadata.a == null) {
                WebRowDragStartEventArgsDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowDragStartEventArgsDetailDescriptionMetadata.c(WebRowDragStartEventArgsDetailDescriptionMetadata.a);
            }
            if (a.j(WebRowDragStartEventArgsDetailDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowDragStartEventArgsDetailDescriptionMetadata.a);
            WebRowTypeDescriptionMetadata.d(a);
        }
        static c(a) {
            WebBaseEventArgsDetailDescriptionMetadata.c(a);
            a.item("__qualifiedNameTS", "String:RowDragStartEventArgsDetail");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("DragDirective", "Unknown");
            a.item("DragData", "ExportedType:WebRowType");
        }
        static d(a) {
            WebRowDragStartEventArgsDetailDescriptionMetadata.b(a);
            a.aa("WebRowDragStartEventArgsDetail", () => new WebRowDragStartEventArgsDetailDescription());
            a.z("WebRowDragStartEventArgsDetail", WebRowDragStartEventArgsDetailDescriptionMetadata.a);
        }
    }
    WebRowDragStartEventArgsDetailDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowDragStartEventArgsDetailDescriptionMetadata, 'WebRowDragStartEventArgsDetailDescriptionMetadata');
    WebRowDragStartEventArgsDetailDescriptionMetadata.a = null;
    return WebRowDragStartEventArgsDetailDescriptionMetadata;
})();
/**
 * @hidden
 */
export let WebRowTypeDescriptionMetadata = /*@__PURE__*/ (() => {
    class WebRowTypeDescriptionMetadata extends Base {
        static b(a) {
            if (WebRowTypeDescriptionMetadata.a == null) {
                WebRowTypeDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
                WebRowTypeDescriptionMetadata.c(WebRowTypeDescriptionMetadata.a);
            }
            if (a.j(WebRowTypeDescriptionMetadata.a)) {
                return;
            }
            a.y(WebRowTypeDescriptionMetadata.a);
            WebGroupByRecordDescriptionMetadata.d(a);
            WebGridValidationStateDescriptionMetadata.d(a);
            WebCellTypeDescriptionMetadata.d(a);
            WebRowTypeDescriptionMetadata.d(a);
            WebTreeGridRecordDescriptionMetadata.d(a);
            WebGridBaseDirectiveDescriptionMetadata.d(a);
        }
        static c(a) {
            a.item("__qualifiedNameTS", "String:RowType");
            a.item("__packageNameWC", "String:grids");
            a.item("__isPlainObject", "Boolean");
            a.item("Index", "Number:double");
            a.item("ViewIndex", "Number:double");
            a.item("IsGroupByRow", "Boolean");
            a.item("IsSummaryRow", "Boolean");
            a.item("GroupRow", "ExportedType:WebGroupByRecord");
            a.item("Key", "Unknown");
            a.item("Validation", "ExportedType:WebGridValidationState");
            a.item("Data", "Unknown");
            a.item("Cells", "Array:WebCellTypeDescription:CellType");
            a.item("Disabled", "Boolean");
            a.item("Pinned", "Boolean");
            a.item("Selected", "Boolean");
            a.item("Expanded", "Boolean");
            a.item("Deleted", "Boolean");
            a.item("InEditMode", "Boolean");
            a.item("Children", "Array:WebRowTypeDescription:RowType");
            a.item("RowParent", "(wc:Parent)ExportedType:WebRowType");
            a.item("HasChildren", "Boolean");
            a.item("TreeRow", "ExportedType:WebTreeGridRecord");
            a.item("AddRowUI", "Boolean");
            a.item("Focused", "Boolean");
            a.item("Grid", "ExportedType:WebGridBaseDirective");
        }
        static d(a) {
            WebRowTypeDescriptionMetadata.b(a);
            a.aa("WebRowType", () => new WebRowTypeDescription());
            a.z("WebRowType", WebRowTypeDescriptionMetadata.a);
        }
    }
    WebRowTypeDescriptionMetadata.$t = /*@__PURE__*/ markType(WebRowTypeDescriptionMetadata, 'WebRowTypeDescriptionMetadata');
    WebRowTypeDescriptionMetadata.a = null;
    return WebRowTypeDescriptionMetadata;
})();
