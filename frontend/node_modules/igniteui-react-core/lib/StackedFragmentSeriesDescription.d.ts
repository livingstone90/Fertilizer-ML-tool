import { Description } from "./Description";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class StackedFragmentSeriesDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private ca;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private b9;
    get brush(): string;
    set brush(a: string);
    private bn;
    get actualBrush(): string;
    set actualBrush(a: string);
    private j;
    get isDropShadowEnabled(): boolean;
    set isDropShadowEnabled(a: boolean);
    private f;
    get actualIsDropShadowEnabled(): boolean;
    set actualIsDropShadowEnabled(a: boolean);
    private an;
    get shadowBlur(): number;
    set shadowBlur(a: number);
    private ac;
    get actualShadowBlur(): number;
    set actualShadowBlur(a: number);
    private cr;
    get shadowColor(): string;
    set shadowColor(a: string);
    private b1;
    get actualShadowColor(): string;
    set actualShadowColor(a: string);
    private m;
    get useSingleShadow(): boolean;
    set useSingleShadow(a: boolean);
    private i;
    get actualUseSingleShadow(): boolean;
    set actualUseSingleShadow(a: boolean);
    private ao;
    get shadowOffsetX(): number;
    set shadowOffsetX(a: number);
    private ad;
    get actualShadowOffsetX(): number;
    set actualShadowOffsetX(a: number);
    private ap;
    get shadowOffsetY(): number;
    set shadowOffsetY(a: number);
    private ae;
    get actualShadowOffsetY(): number;
    set actualShadowOffsetY(a: number);
    private cd;
    get legendItemBadgeTemplateRef(): string;
    set legendItemBadgeTemplateRef(a: string);
    private bq;
    get actualLegendItemBadgeTemplateRef(): string;
    set actualLegendItemBadgeTemplateRef(a: string);
    private ce;
    get legendItemTemplateRef(): string;
    set legendItemTemplateRef(a: string);
    private br;
    get actualLegendItemTemplateRef(): string;
    set actualLegendItemTemplateRef(a: string);
    private cf;
    get legendItemVisibility(): string;
    set legendItemVisibility(a: string);
    private bs;
    get actualLegendItemVisibility(): string;
    set actualLegendItemVisibility(a: string);
    private cc;
    get legendItemBadgeShape(): string;
    set legendItemBadgeShape(a: string);
    private cb;
    get legendItemBadgeMode(): string;
    set legendItemBadgeMode(a: string);
    private bp;
    get actualLegendItemBadgeShape(): string;
    set actualLegendItemBadgeShape(a: string);
    private bo;
    get actualLegendItemBadgeMode(): string;
    set actualLegendItemBadgeMode(a: string);
    private cg;
    get markerBrush(): string;
    set markerBrush(a: string);
    private bt;
    get actualMarkerBrush(): string;
    set actualMarkerBrush(a: string);
    private ci;
    get markerOutline(): string;
    set markerOutline(a: string);
    private bv;
    get actualMarkerOutline(): string;
    set actualMarkerOutline(a: string);
    private ck;
    get markerTemplateRef(): string;
    set markerTemplateRef(a: string);
    private bx;
    get actualMarkerTemplateRef(): string;
    set actualMarkerTemplateRef(a: string);
    private cl;
    get markerType(): string;
    set markerType(a: string);
    private by;
    get actualMarkerType(): string;
    set actualMarkerType(a: string);
    private ch;
    get markerFillMode(): string;
    set markerFillMode(a: string);
    private bu;
    get actualMarkerFillMode(): string;
    set actualMarkerFillMode(a: string);
    private cj;
    get markerOutlineMode(): string;
    set markerOutlineMode(a: string);
    private bw;
    get actualMarkerOutlineMode(): string;
    set actualMarkerOutlineMode(a: string);
    private cm;
    get name(): string;
    set name(a: string);
    private ak;
    get opacity(): number;
    set opacity(a: number);
    private z;
    get actualOpacity(): number;
    set actualOpacity(a: number);
    private cn;
    get outline(): string;
    set outline(a: string);
    private bz;
    get actualOutline(): string;
    set actualOutline(a: string);
    private ag;
    get areaFillOpacity(): number;
    set areaFillOpacity(a: number);
    private v;
    get actualAreaFillOpacity(): number;
    set actualAreaFillOpacity(a: number);
    private ai;
    get markerFillOpacity(): number;
    set markerFillOpacity(a: number);
    private x;
    get actualMarkerFillOpacity(): number;
    set actualMarkerFillOpacity(a: number);
    private co;
    get outlineMode(): string;
    set outlineMode(a: string);
    private b0;
    get actualOutlineMode(): string;
    set actualOutlineMode(a: string);
    private ah;
    get highlightingFadeOpacity(): number;
    set highlightingFadeOpacity(a: number);
    private w;
    get actualHighlightingFadeOpacity(): number;
    set actualHighlightingFadeOpacity(a: number);
    private al;
    get radiusX(): number;
    set radiusX(a: number);
    private aa;
    get actualRadiusX(): number;
    set actualRadiusX(a: number);
    private g;
    get actualIsSplineShapePartOfRange(): boolean;
    set actualIsSplineShapePartOfRange(a: boolean);
    private k;
    get isSplineShapePartOfRange(): boolean;
    set isSplineShapePartOfRange(a: boolean);
    private am;
    get radiusY(): number;
    set radiusY(a: number);
    private ab;
    get actualRadiusY(): number;
    set actualRadiusY(a: number);
    private aq;
    get thickness(): number;
    set thickness(a: number);
    private af;
    get actualThickness(): number;
    set actualThickness(a: number);
    private aj;
    get markerThickness(): number;
    set markerThickness(a: number);
    private y;
    get actualMarkerThickness(): number;
    set actualMarkerThickness(a: number);
    private bl;
    get title(): any;
    set title(a: any);
    private cs;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private bf;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private bg;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private ct;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private cu;
    get transitionInMode(): string;
    set transitionInMode(a: string);
    private l;
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(a: boolean);
    private cv;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private h;
    get actualIsTransitionInEnabled(): boolean;
    set actualIsTransitionInEnabled(a: boolean);
    private be;
    get actualTransitionInDuration(): number;
    set actualTransitionInDuration(a: number);
    private b4;
    get actualTransitionInMode(): string;
    set actualTransitionInMode(a: string);
    private b5;
    get actualTransitionInSpeedType(): string;
    set actualTransitionInSpeedType(a: string);
    private b3;
    get actualTransitionInEasingFunctionRef(): string;
    set actualTransitionInEasingFunctionRef(a: string);
    private b2;
    get actualTransitionEasingFunctionRef(): string;
    set actualTransitionEasingFunctionRef(a: string);
    private bd;
    get actualTransitionDuration(): number;
    set actualTransitionDuration(a: number);
    private cy;
    get valueMemberPath(): string;
    set valueMemberPath(a: string);
    private cw;
    get valueMemberAsLegendLabel(): string;
    set valueMemberAsLegendLabel(a: string);
    private cx;
    get valueMemberAsLegendUnit(): string;
    set valueMemberAsLegendUnit(a: string);
    private b6;
    get actualValueMemberAsLegendLabel(): string;
    set actualValueMemberAsLegendLabel(a: string);
    private b7;
    get actualValueMemberAsLegendUnit(): string;
    set actualValueMemberAsLegendUnit(a: string);
    private cz;
    get visibility(): string;
    set visibility(a: string);
    private b8;
    get actualVisibility(): string;
    set actualVisibility(a: string);
    private cp;
    get parentOrLocalBrush(): string;
    set parentOrLocalBrush(a: string);
    private cq;
    get propertyUpdatedRef(): string;
    set propertyUpdatedRef(a: string);
}
