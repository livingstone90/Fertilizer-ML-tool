import { Base, Type } from "./type";
import { CodeGeneratingRendererResult } from "./CodeGeneratingRendererResult";
import { CodeGeneratingCodeWriter } from "./CodeGeneratingCodeWriter";
import { CodeGeneratingImportManager } from "./CodeGeneratingImportManager";
import { CodeGenerationRendererOptions } from "./CodeGenerationRendererOptions";
import { HashSet$1 } from "./HashSet$1";
/**
 * @hidden
 */
export declare class CodeGeneratingComponentRendererHandlerEmitter extends Base {
    static $t: Type;
    private m;
    private k;
    protected get l(): CodeGeneratingRendererResult;
    constructor(a: CodeGenerationRendererOptions, b: CodeGeneratingRendererResult);
    private d;
    protected get h(): CodeGeneratingCodeWriter;
    private a;
    protected get e(): CodeGeneratingCodeWriter;
    private i;
    protected get j(): CodeGeneratingImportManager;
    private b;
    protected get f(): CodeGeneratingCodeWriter;
    private c;
    protected get g(): CodeGeneratingCodeWriter;
    protected s(a: string, b: boolean): void;
    protected r(a: string, b: boolean): void;
    private n;
    q(a: string[], b: string[]): void;
    protected p(a: string, b: HashSet$1<string>, c: boolean, d: boolean): void;
    protected t(a: CodeGeneratingImportManager, b: string): void;
    protected o(a: string): string;
}
